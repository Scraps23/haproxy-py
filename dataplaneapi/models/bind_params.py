# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BindParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accept_netscaler_cip': 'int',
        'accept_proxy': 'bool',
        'allow_0rtt': 'bool',
        'alpn': 'str',
        'backlog': 'str',
        'ca_ignore_err': 'str',
        'ca_sign_file': 'str',
        'ca_sign_pass': 'str',
        'ca_verify_file': 'str',
        'ciphers': 'str',
        'ciphersuites': 'str',
        'crl_file': 'str',
        'crt_ignore_err': 'str',
        'crt_list': 'str',
        'curves': 'str',
        'defer_accept': 'bool',
        'ecdhe': 'str',
        'expose_fd_listeners': 'bool',
        'force_sslv3': 'bool',
        'force_tlsv10': 'bool',
        'force_tlsv11': 'bool',
        'force_tlsv12': 'bool',
        'force_tlsv13': 'bool',
        'generate_certificates': 'bool',
        'gid': 'int',
        'group': 'str',
        'id': 'str',
        'interface': 'str',
        'level': 'str',
        'maxconn': 'int',
        'mode': 'str',
        'mss': 'str',
        'name': 'str',
        'namespace': 'str',
        'nice': 'int',
        'no_ca_names': 'bool',
        'no_sslv3': 'bool',
        'no_tls_tickets': 'bool',
        'no_tlsv10': 'bool',
        'no_tlsv11': 'bool',
        'no_tlsv12': 'bool',
        'no_tlsv13': 'bool',
        'npn': 'str',
        'prefer_client_ciphers': 'bool',
        'process': 'str',
        'proto': 'str',
        'severity_output': 'str',
        'ssl': 'bool',
        'ssl_cafile': 'str',
        'ssl_certificate': 'str',
        'ssl_max_ver': 'str',
        'ssl_min_ver': 'str',
        'strict_sni': 'bool',
        'tcp_user_timeout': 'int',
        'tfo': 'bool',
        'tls_ticket_keys': 'str',
        'transparent': 'bool',
        'uid': 'str',
        'user': 'str',
        'v4v6': 'bool',
        'v6only': 'bool',
        'verify': 'str'
    }

    attribute_map = {
        'accept_netscaler_cip': 'accept_netscaler_cip',
        'accept_proxy': 'accept_proxy',
        'allow_0rtt': 'allow_0rtt',
        'alpn': 'alpn',
        'backlog': 'backlog',
        'ca_ignore_err': 'ca_ignore_err',
        'ca_sign_file': 'ca_sign_file',
        'ca_sign_pass': 'ca_sign_pass',
        'ca_verify_file': 'ca_verify_file',
        'ciphers': 'ciphers',
        'ciphersuites': 'ciphersuites',
        'crl_file': 'crl_file',
        'crt_ignore_err': 'crt_ignore_err',
        'crt_list': 'crt_list',
        'curves': 'curves',
        'defer_accept': 'defer_accept',
        'ecdhe': 'ecdhe',
        'expose_fd_listeners': 'expose_fd_listeners',
        'force_sslv3': 'force_sslv3',
        'force_tlsv10': 'force_tlsv10',
        'force_tlsv11': 'force_tlsv11',
        'force_tlsv12': 'force_tlsv12',
        'force_tlsv13': 'force_tlsv13',
        'generate_certificates': 'generate_certificates',
        'gid': 'gid',
        'group': 'group',
        'id': 'id',
        'interface': 'interface',
        'level': 'level',
        'maxconn': 'maxconn',
        'mode': 'mode',
        'mss': 'mss',
        'name': 'name',
        'namespace': 'namespace',
        'nice': 'nice',
        'no_ca_names': 'no_ca_names',
        'no_sslv3': 'no_sslv3',
        'no_tls_tickets': 'no_tls_tickets',
        'no_tlsv10': 'no_tlsv10',
        'no_tlsv11': 'no_tlsv11',
        'no_tlsv12': 'no_tlsv12',
        'no_tlsv13': 'no_tlsv13',
        'npn': 'npn',
        'prefer_client_ciphers': 'prefer_client_ciphers',
        'process': 'process',
        'proto': 'proto',
        'severity_output': 'severity_output',
        'ssl': 'ssl',
        'ssl_cafile': 'ssl_cafile',
        'ssl_certificate': 'ssl_certificate',
        'ssl_max_ver': 'ssl_max_ver',
        'ssl_min_ver': 'ssl_min_ver',
        'strict_sni': 'strict_sni',
        'tcp_user_timeout': 'tcp_user_timeout',
        'tfo': 'tfo',
        'tls_ticket_keys': 'tls_ticket_keys',
        'transparent': 'transparent',
        'uid': 'uid',
        'user': 'user',
        'v4v6': 'v4v6',
        'v6only': 'v6only',
        'verify': 'verify'
    }

    def __init__(self, accept_netscaler_cip=None, accept_proxy=None, allow_0rtt=None, alpn=None, backlog=None, ca_ignore_err=None, ca_sign_file=None, ca_sign_pass=None, ca_verify_file=None, ciphers=None, ciphersuites=None, crl_file=None, crt_ignore_err=None, crt_list=None, curves=None, defer_accept=None, ecdhe=None, expose_fd_listeners=None, force_sslv3=None, force_tlsv10=None, force_tlsv11=None, force_tlsv12=None, force_tlsv13=None, generate_certificates=None, gid=None, group=None, id=None, interface=None, level=None, maxconn=None, mode=None, mss=None, name=None, namespace=None, nice=None, no_ca_names=None, no_sslv3=None, no_tls_tickets=None, no_tlsv10=None, no_tlsv11=None, no_tlsv12=None, no_tlsv13=None, npn=None, prefer_client_ciphers=None, process=None, proto=None, severity_output=None, ssl=None, ssl_cafile=None, ssl_certificate=None, ssl_max_ver=None, ssl_min_ver=None, strict_sni=None, tcp_user_timeout=None, tfo=None, tls_ticket_keys=None, transparent=None, uid=None, user=None, v4v6=None, v6only=None, verify=None):  # noqa: E501
        """BindParams - a model defined in Swagger"""  # noqa: E501
        self._accept_netscaler_cip = None
        self._accept_proxy = None
        self._allow_0rtt = None
        self._alpn = None
        self._backlog = None
        self._ca_ignore_err = None
        self._ca_sign_file = None
        self._ca_sign_pass = None
        self._ca_verify_file = None
        self._ciphers = None
        self._ciphersuites = None
        self._crl_file = None
        self._crt_ignore_err = None
        self._crt_list = None
        self._curves = None
        self._defer_accept = None
        self._ecdhe = None
        self._expose_fd_listeners = None
        self._force_sslv3 = None
        self._force_tlsv10 = None
        self._force_tlsv11 = None
        self._force_tlsv12 = None
        self._force_tlsv13 = None
        self._generate_certificates = None
        self._gid = None
        self._group = None
        self._id = None
        self._interface = None
        self._level = None
        self._maxconn = None
        self._mode = None
        self._mss = None
        self._name = None
        self._namespace = None
        self._nice = None
        self._no_ca_names = None
        self._no_sslv3 = None
        self._no_tls_tickets = None
        self._no_tlsv10 = None
        self._no_tlsv11 = None
        self._no_tlsv12 = None
        self._no_tlsv13 = None
        self._npn = None
        self._prefer_client_ciphers = None
        self._process = None
        self._proto = None
        self._severity_output = None
        self._ssl = None
        self._ssl_cafile = None
        self._ssl_certificate = None
        self._ssl_max_ver = None
        self._ssl_min_ver = None
        self._strict_sni = None
        self._tcp_user_timeout = None
        self._tfo = None
        self._tls_ticket_keys = None
        self._transparent = None
        self._uid = None
        self._user = None
        self._v4v6 = None
        self._v6only = None
        self._verify = None
        self.discriminator = None
        if accept_netscaler_cip is not None:
            self.accept_netscaler_cip = accept_netscaler_cip
        if accept_proxy is not None:
            self.accept_proxy = accept_proxy
        if allow_0rtt is not None:
            self.allow_0rtt = allow_0rtt
        if alpn is not None:
            self.alpn = alpn
        if backlog is not None:
            self.backlog = backlog
        if ca_ignore_err is not None:
            self.ca_ignore_err = ca_ignore_err
        if ca_sign_file is not None:
            self.ca_sign_file = ca_sign_file
        if ca_sign_pass is not None:
            self.ca_sign_pass = ca_sign_pass
        if ca_verify_file is not None:
            self.ca_verify_file = ca_verify_file
        if ciphers is not None:
            self.ciphers = ciphers
        if ciphersuites is not None:
            self.ciphersuites = ciphersuites
        if crl_file is not None:
            self.crl_file = crl_file
        if crt_ignore_err is not None:
            self.crt_ignore_err = crt_ignore_err
        if crt_list is not None:
            self.crt_list = crt_list
        if curves is not None:
            self.curves = curves
        if defer_accept is not None:
            self.defer_accept = defer_accept
        if ecdhe is not None:
            self.ecdhe = ecdhe
        if expose_fd_listeners is not None:
            self.expose_fd_listeners = expose_fd_listeners
        if force_sslv3 is not None:
            self.force_sslv3 = force_sslv3
        if force_tlsv10 is not None:
            self.force_tlsv10 = force_tlsv10
        if force_tlsv11 is not None:
            self.force_tlsv11 = force_tlsv11
        if force_tlsv12 is not None:
            self.force_tlsv12 = force_tlsv12
        if force_tlsv13 is not None:
            self.force_tlsv13 = force_tlsv13
        if generate_certificates is not None:
            self.generate_certificates = generate_certificates
        if gid is not None:
            self.gid = gid
        if group is not None:
            self.group = group
        if id is not None:
            self.id = id
        if interface is not None:
            self.interface = interface
        if level is not None:
            self.level = level
        if maxconn is not None:
            self.maxconn = maxconn
        if mode is not None:
            self.mode = mode
        if mss is not None:
            self.mss = mss
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if nice is not None:
            self.nice = nice
        if no_ca_names is not None:
            self.no_ca_names = no_ca_names
        if no_sslv3 is not None:
            self.no_sslv3 = no_sslv3
        if no_tls_tickets is not None:
            self.no_tls_tickets = no_tls_tickets
        if no_tlsv10 is not None:
            self.no_tlsv10 = no_tlsv10
        if no_tlsv11 is not None:
            self.no_tlsv11 = no_tlsv11
        if no_tlsv12 is not None:
            self.no_tlsv12 = no_tlsv12
        if no_tlsv13 is not None:
            self.no_tlsv13 = no_tlsv13
        if npn is not None:
            self.npn = npn
        if prefer_client_ciphers is not None:
            self.prefer_client_ciphers = prefer_client_ciphers
        if process is not None:
            self.process = process
        if proto is not None:
            self.proto = proto
        if severity_output is not None:
            self.severity_output = severity_output
        if ssl is not None:
            self.ssl = ssl
        if ssl_cafile is not None:
            self.ssl_cafile = ssl_cafile
        if ssl_certificate is not None:
            self.ssl_certificate = ssl_certificate
        if ssl_max_ver is not None:
            self.ssl_max_ver = ssl_max_ver
        if ssl_min_ver is not None:
            self.ssl_min_ver = ssl_min_ver
        if strict_sni is not None:
            self.strict_sni = strict_sni
        if tcp_user_timeout is not None:
            self.tcp_user_timeout = tcp_user_timeout
        if tfo is not None:
            self.tfo = tfo
        if tls_ticket_keys is not None:
            self.tls_ticket_keys = tls_ticket_keys
        if transparent is not None:
            self.transparent = transparent
        if uid is not None:
            self.uid = uid
        if user is not None:
            self.user = user
        if v4v6 is not None:
            self.v4v6 = v4v6
        if v6only is not None:
            self.v6only = v6only
        if verify is not None:
            self.verify = verify

    @property
    def accept_netscaler_cip(self):
        """Gets the accept_netscaler_cip of this BindParams.  # noqa: E501


        :return: The accept_netscaler_cip of this BindParams.  # noqa: E501
        :rtype: int
        """
        return self._accept_netscaler_cip

    @accept_netscaler_cip.setter
    def accept_netscaler_cip(self, accept_netscaler_cip):
        """Sets the accept_netscaler_cip of this BindParams.


        :param accept_netscaler_cip: The accept_netscaler_cip of this BindParams.  # noqa: E501
        :type: int
        """

        self._accept_netscaler_cip = accept_netscaler_cip

    @property
    def accept_proxy(self):
        """Gets the accept_proxy of this BindParams.  # noqa: E501


        :return: The accept_proxy of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._accept_proxy

    @accept_proxy.setter
    def accept_proxy(self, accept_proxy):
        """Sets the accept_proxy of this BindParams.


        :param accept_proxy: The accept_proxy of this BindParams.  # noqa: E501
        :type: bool
        """

        self._accept_proxy = accept_proxy

    @property
    def allow_0rtt(self):
        """Gets the allow_0rtt of this BindParams.  # noqa: E501


        :return: The allow_0rtt of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._allow_0rtt

    @allow_0rtt.setter
    def allow_0rtt(self, allow_0rtt):
        """Sets the allow_0rtt of this BindParams.


        :param allow_0rtt: The allow_0rtt of this BindParams.  # noqa: E501
        :type: bool
        """

        self._allow_0rtt = allow_0rtt

    @property
    def alpn(self):
        """Gets the alpn of this BindParams.  # noqa: E501


        :return: The alpn of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._alpn

    @alpn.setter
    def alpn(self, alpn):
        """Sets the alpn of this BindParams.


        :param alpn: The alpn of this BindParams.  # noqa: E501
        :type: str
        """

        self._alpn = alpn

    @property
    def backlog(self):
        """Gets the backlog of this BindParams.  # noqa: E501


        :return: The backlog of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._backlog

    @backlog.setter
    def backlog(self, backlog):
        """Sets the backlog of this BindParams.


        :param backlog: The backlog of this BindParams.  # noqa: E501
        :type: str
        """

        self._backlog = backlog

    @property
    def ca_ignore_err(self):
        """Gets the ca_ignore_err of this BindParams.  # noqa: E501


        :return: The ca_ignore_err of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._ca_ignore_err

    @ca_ignore_err.setter
    def ca_ignore_err(self, ca_ignore_err):
        """Sets the ca_ignore_err of this BindParams.


        :param ca_ignore_err: The ca_ignore_err of this BindParams.  # noqa: E501
        :type: str
        """

        self._ca_ignore_err = ca_ignore_err

    @property
    def ca_sign_file(self):
        """Gets the ca_sign_file of this BindParams.  # noqa: E501


        :return: The ca_sign_file of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._ca_sign_file

    @ca_sign_file.setter
    def ca_sign_file(self, ca_sign_file):
        """Sets the ca_sign_file of this BindParams.


        :param ca_sign_file: The ca_sign_file of this BindParams.  # noqa: E501
        :type: str
        """

        self._ca_sign_file = ca_sign_file

    @property
    def ca_sign_pass(self):
        """Gets the ca_sign_pass of this BindParams.  # noqa: E501


        :return: The ca_sign_pass of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._ca_sign_pass

    @ca_sign_pass.setter
    def ca_sign_pass(self, ca_sign_pass):
        """Sets the ca_sign_pass of this BindParams.


        :param ca_sign_pass: The ca_sign_pass of this BindParams.  # noqa: E501
        :type: str
        """

        self._ca_sign_pass = ca_sign_pass

    @property
    def ca_verify_file(self):
        """Gets the ca_verify_file of this BindParams.  # noqa: E501


        :return: The ca_verify_file of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._ca_verify_file

    @ca_verify_file.setter
    def ca_verify_file(self, ca_verify_file):
        """Sets the ca_verify_file of this BindParams.


        :param ca_verify_file: The ca_verify_file of this BindParams.  # noqa: E501
        :type: str
        """

        self._ca_verify_file = ca_verify_file

    @property
    def ciphers(self):
        """Gets the ciphers of this BindParams.  # noqa: E501


        :return: The ciphers of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._ciphers

    @ciphers.setter
    def ciphers(self, ciphers):
        """Sets the ciphers of this BindParams.


        :param ciphers: The ciphers of this BindParams.  # noqa: E501
        :type: str
        """

        self._ciphers = ciphers

    @property
    def ciphersuites(self):
        """Gets the ciphersuites of this BindParams.  # noqa: E501


        :return: The ciphersuites of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._ciphersuites

    @ciphersuites.setter
    def ciphersuites(self, ciphersuites):
        """Sets the ciphersuites of this BindParams.


        :param ciphersuites: The ciphersuites of this BindParams.  # noqa: E501
        :type: str
        """

        self._ciphersuites = ciphersuites

    @property
    def crl_file(self):
        """Gets the crl_file of this BindParams.  # noqa: E501


        :return: The crl_file of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._crl_file

    @crl_file.setter
    def crl_file(self, crl_file):
        """Sets the crl_file of this BindParams.


        :param crl_file: The crl_file of this BindParams.  # noqa: E501
        :type: str
        """

        self._crl_file = crl_file

    @property
    def crt_ignore_err(self):
        """Gets the crt_ignore_err of this BindParams.  # noqa: E501


        :return: The crt_ignore_err of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._crt_ignore_err

    @crt_ignore_err.setter
    def crt_ignore_err(self, crt_ignore_err):
        """Sets the crt_ignore_err of this BindParams.


        :param crt_ignore_err: The crt_ignore_err of this BindParams.  # noqa: E501
        :type: str
        """

        self._crt_ignore_err = crt_ignore_err

    @property
    def crt_list(self):
        """Gets the crt_list of this BindParams.  # noqa: E501


        :return: The crt_list of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._crt_list

    @crt_list.setter
    def crt_list(self, crt_list):
        """Sets the crt_list of this BindParams.


        :param crt_list: The crt_list of this BindParams.  # noqa: E501
        :type: str
        """

        self._crt_list = crt_list

    @property
    def curves(self):
        """Gets the curves of this BindParams.  # noqa: E501


        :return: The curves of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._curves

    @curves.setter
    def curves(self, curves):
        """Sets the curves of this BindParams.


        :param curves: The curves of this BindParams.  # noqa: E501
        :type: str
        """

        self._curves = curves

    @property
    def defer_accept(self):
        """Gets the defer_accept of this BindParams.  # noqa: E501


        :return: The defer_accept of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._defer_accept

    @defer_accept.setter
    def defer_accept(self, defer_accept):
        """Sets the defer_accept of this BindParams.


        :param defer_accept: The defer_accept of this BindParams.  # noqa: E501
        :type: bool
        """

        self._defer_accept = defer_accept

    @property
    def ecdhe(self):
        """Gets the ecdhe of this BindParams.  # noqa: E501


        :return: The ecdhe of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._ecdhe

    @ecdhe.setter
    def ecdhe(self, ecdhe):
        """Sets the ecdhe of this BindParams.


        :param ecdhe: The ecdhe of this BindParams.  # noqa: E501
        :type: str
        """

        self._ecdhe = ecdhe

    @property
    def expose_fd_listeners(self):
        """Gets the expose_fd_listeners of this BindParams.  # noqa: E501


        :return: The expose_fd_listeners of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._expose_fd_listeners

    @expose_fd_listeners.setter
    def expose_fd_listeners(self, expose_fd_listeners):
        """Sets the expose_fd_listeners of this BindParams.


        :param expose_fd_listeners: The expose_fd_listeners of this BindParams.  # noqa: E501
        :type: bool
        """

        self._expose_fd_listeners = expose_fd_listeners

    @property
    def force_sslv3(self):
        """Gets the force_sslv3 of this BindParams.  # noqa: E501


        :return: The force_sslv3 of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._force_sslv3

    @force_sslv3.setter
    def force_sslv3(self, force_sslv3):
        """Sets the force_sslv3 of this BindParams.


        :param force_sslv3: The force_sslv3 of this BindParams.  # noqa: E501
        :type: bool
        """

        self._force_sslv3 = force_sslv3

    @property
    def force_tlsv10(self):
        """Gets the force_tlsv10 of this BindParams.  # noqa: E501


        :return: The force_tlsv10 of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._force_tlsv10

    @force_tlsv10.setter
    def force_tlsv10(self, force_tlsv10):
        """Sets the force_tlsv10 of this BindParams.


        :param force_tlsv10: The force_tlsv10 of this BindParams.  # noqa: E501
        :type: bool
        """

        self._force_tlsv10 = force_tlsv10

    @property
    def force_tlsv11(self):
        """Gets the force_tlsv11 of this BindParams.  # noqa: E501


        :return: The force_tlsv11 of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._force_tlsv11

    @force_tlsv11.setter
    def force_tlsv11(self, force_tlsv11):
        """Sets the force_tlsv11 of this BindParams.


        :param force_tlsv11: The force_tlsv11 of this BindParams.  # noqa: E501
        :type: bool
        """

        self._force_tlsv11 = force_tlsv11

    @property
    def force_tlsv12(self):
        """Gets the force_tlsv12 of this BindParams.  # noqa: E501


        :return: The force_tlsv12 of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._force_tlsv12

    @force_tlsv12.setter
    def force_tlsv12(self, force_tlsv12):
        """Sets the force_tlsv12 of this BindParams.


        :param force_tlsv12: The force_tlsv12 of this BindParams.  # noqa: E501
        :type: bool
        """

        self._force_tlsv12 = force_tlsv12

    @property
    def force_tlsv13(self):
        """Gets the force_tlsv13 of this BindParams.  # noqa: E501


        :return: The force_tlsv13 of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._force_tlsv13

    @force_tlsv13.setter
    def force_tlsv13(self, force_tlsv13):
        """Sets the force_tlsv13 of this BindParams.


        :param force_tlsv13: The force_tlsv13 of this BindParams.  # noqa: E501
        :type: bool
        """

        self._force_tlsv13 = force_tlsv13

    @property
    def generate_certificates(self):
        """Gets the generate_certificates of this BindParams.  # noqa: E501


        :return: The generate_certificates of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._generate_certificates

    @generate_certificates.setter
    def generate_certificates(self, generate_certificates):
        """Sets the generate_certificates of this BindParams.


        :param generate_certificates: The generate_certificates of this BindParams.  # noqa: E501
        :type: bool
        """

        self._generate_certificates = generate_certificates

    @property
    def gid(self):
        """Gets the gid of this BindParams.  # noqa: E501


        :return: The gid of this BindParams.  # noqa: E501
        :rtype: int
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this BindParams.


        :param gid: The gid of this BindParams.  # noqa: E501
        :type: int
        """

        self._gid = gid

    @property
    def group(self):
        """Gets the group of this BindParams.  # noqa: E501


        :return: The group of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this BindParams.


        :param group: The group of this BindParams.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this BindParams.  # noqa: E501


        :return: The id of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BindParams.


        :param id: The id of this BindParams.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def interface(self):
        """Gets the interface of this BindParams.  # noqa: E501


        :return: The interface of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this BindParams.


        :param interface: The interface of this BindParams.  # noqa: E501
        :type: str
        """

        self._interface = interface

    @property
    def level(self):
        """Gets the level of this BindParams.  # noqa: E501


        :return: The level of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this BindParams.


        :param level: The level of this BindParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["user", "operator", "admin"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def maxconn(self):
        """Gets the maxconn of this BindParams.  # noqa: E501


        :return: The maxconn of this BindParams.  # noqa: E501
        :rtype: int
        """
        return self._maxconn

    @maxconn.setter
    def maxconn(self, maxconn):
        """Sets the maxconn of this BindParams.


        :param maxconn: The maxconn of this BindParams.  # noqa: E501
        :type: int
        """

        self._maxconn = maxconn

    @property
    def mode(self):
        """Gets the mode of this BindParams.  # noqa: E501


        :return: The mode of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this BindParams.


        :param mode: The mode of this BindParams.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def mss(self):
        """Gets the mss of this BindParams.  # noqa: E501


        :return: The mss of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._mss

    @mss.setter
    def mss(self, mss):
        """Sets the mss of this BindParams.


        :param mss: The mss of this BindParams.  # noqa: E501
        :type: str
        """

        self._mss = mss

    @property
    def name(self):
        """Gets the name of this BindParams.  # noqa: E501


        :return: The name of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BindParams.


        :param name: The name of this BindParams.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this BindParams.  # noqa: E501


        :return: The namespace of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this BindParams.


        :param namespace: The namespace of this BindParams.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def nice(self):
        """Gets the nice of this BindParams.  # noqa: E501


        :return: The nice of this BindParams.  # noqa: E501
        :rtype: int
        """
        return self._nice

    @nice.setter
    def nice(self, nice):
        """Sets the nice of this BindParams.


        :param nice: The nice of this BindParams.  # noqa: E501
        :type: int
        """

        self._nice = nice

    @property
    def no_ca_names(self):
        """Gets the no_ca_names of this BindParams.  # noqa: E501


        :return: The no_ca_names of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._no_ca_names

    @no_ca_names.setter
    def no_ca_names(self, no_ca_names):
        """Sets the no_ca_names of this BindParams.


        :param no_ca_names: The no_ca_names of this BindParams.  # noqa: E501
        :type: bool
        """

        self._no_ca_names = no_ca_names

    @property
    def no_sslv3(self):
        """Gets the no_sslv3 of this BindParams.  # noqa: E501


        :return: The no_sslv3 of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._no_sslv3

    @no_sslv3.setter
    def no_sslv3(self, no_sslv3):
        """Sets the no_sslv3 of this BindParams.


        :param no_sslv3: The no_sslv3 of this BindParams.  # noqa: E501
        :type: bool
        """

        self._no_sslv3 = no_sslv3

    @property
    def no_tls_tickets(self):
        """Gets the no_tls_tickets of this BindParams.  # noqa: E501


        :return: The no_tls_tickets of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._no_tls_tickets

    @no_tls_tickets.setter
    def no_tls_tickets(self, no_tls_tickets):
        """Sets the no_tls_tickets of this BindParams.


        :param no_tls_tickets: The no_tls_tickets of this BindParams.  # noqa: E501
        :type: bool
        """

        self._no_tls_tickets = no_tls_tickets

    @property
    def no_tlsv10(self):
        """Gets the no_tlsv10 of this BindParams.  # noqa: E501


        :return: The no_tlsv10 of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._no_tlsv10

    @no_tlsv10.setter
    def no_tlsv10(self, no_tlsv10):
        """Sets the no_tlsv10 of this BindParams.


        :param no_tlsv10: The no_tlsv10 of this BindParams.  # noqa: E501
        :type: bool
        """

        self._no_tlsv10 = no_tlsv10

    @property
    def no_tlsv11(self):
        """Gets the no_tlsv11 of this BindParams.  # noqa: E501


        :return: The no_tlsv11 of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._no_tlsv11

    @no_tlsv11.setter
    def no_tlsv11(self, no_tlsv11):
        """Sets the no_tlsv11 of this BindParams.


        :param no_tlsv11: The no_tlsv11 of this BindParams.  # noqa: E501
        :type: bool
        """

        self._no_tlsv11 = no_tlsv11

    @property
    def no_tlsv12(self):
        """Gets the no_tlsv12 of this BindParams.  # noqa: E501


        :return: The no_tlsv12 of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._no_tlsv12

    @no_tlsv12.setter
    def no_tlsv12(self, no_tlsv12):
        """Sets the no_tlsv12 of this BindParams.


        :param no_tlsv12: The no_tlsv12 of this BindParams.  # noqa: E501
        :type: bool
        """

        self._no_tlsv12 = no_tlsv12

    @property
    def no_tlsv13(self):
        """Gets the no_tlsv13 of this BindParams.  # noqa: E501


        :return: The no_tlsv13 of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._no_tlsv13

    @no_tlsv13.setter
    def no_tlsv13(self, no_tlsv13):
        """Sets the no_tlsv13 of this BindParams.


        :param no_tlsv13: The no_tlsv13 of this BindParams.  # noqa: E501
        :type: bool
        """

        self._no_tlsv13 = no_tlsv13

    @property
    def npn(self):
        """Gets the npn of this BindParams.  # noqa: E501


        :return: The npn of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._npn

    @npn.setter
    def npn(self, npn):
        """Sets the npn of this BindParams.


        :param npn: The npn of this BindParams.  # noqa: E501
        :type: str
        """

        self._npn = npn

    @property
    def prefer_client_ciphers(self):
        """Gets the prefer_client_ciphers of this BindParams.  # noqa: E501


        :return: The prefer_client_ciphers of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._prefer_client_ciphers

    @prefer_client_ciphers.setter
    def prefer_client_ciphers(self, prefer_client_ciphers):
        """Sets the prefer_client_ciphers of this BindParams.


        :param prefer_client_ciphers: The prefer_client_ciphers of this BindParams.  # noqa: E501
        :type: bool
        """

        self._prefer_client_ciphers = prefer_client_ciphers

    @property
    def process(self):
        """Gets the process of this BindParams.  # noqa: E501


        :return: The process of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._process

    @process.setter
    def process(self, process):
        """Sets the process of this BindParams.


        :param process: The process of this BindParams.  # noqa: E501
        :type: str
        """

        self._process = process

    @property
    def proto(self):
        """Gets the proto of this BindParams.  # noqa: E501


        :return: The proto of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._proto

    @proto.setter
    def proto(self, proto):
        """Sets the proto of this BindParams.


        :param proto: The proto of this BindParams.  # noqa: E501
        :type: str
        """

        self._proto = proto

    @property
    def severity_output(self):
        """Gets the severity_output of this BindParams.  # noqa: E501


        :return: The severity_output of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._severity_output

    @severity_output.setter
    def severity_output(self, severity_output):
        """Sets the severity_output of this BindParams.


        :param severity_output: The severity_output of this BindParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "number", "string"]  # noqa: E501
        if severity_output not in allowed_values:
            raise ValueError(
                "Invalid value for `severity_output` ({0}), must be one of {1}"  # noqa: E501
                .format(severity_output, allowed_values)
            )

        self._severity_output = severity_output

    @property
    def ssl(self):
        """Gets the ssl of this BindParams.  # noqa: E501


        :return: The ssl of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this BindParams.


        :param ssl: The ssl of this BindParams.  # noqa: E501
        :type: bool
        """

        self._ssl = ssl

    @property
    def ssl_cafile(self):
        """Gets the ssl_cafile of this BindParams.  # noqa: E501


        :return: The ssl_cafile of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._ssl_cafile

    @ssl_cafile.setter
    def ssl_cafile(self, ssl_cafile):
        """Sets the ssl_cafile of this BindParams.


        :param ssl_cafile: The ssl_cafile of this BindParams.  # noqa: E501
        :type: str
        """

        self._ssl_cafile = ssl_cafile

    @property
    def ssl_certificate(self):
        """Gets the ssl_certificate of this BindParams.  # noqa: E501


        :return: The ssl_certificate of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._ssl_certificate

    @ssl_certificate.setter
    def ssl_certificate(self, ssl_certificate):
        """Sets the ssl_certificate of this BindParams.


        :param ssl_certificate: The ssl_certificate of this BindParams.  # noqa: E501
        :type: str
        """

        self._ssl_certificate = ssl_certificate

    @property
    def ssl_max_ver(self):
        """Gets the ssl_max_ver of this BindParams.  # noqa: E501


        :return: The ssl_max_ver of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._ssl_max_ver

    @ssl_max_ver.setter
    def ssl_max_ver(self, ssl_max_ver):
        """Sets the ssl_max_ver of this BindParams.


        :param ssl_max_ver: The ssl_max_ver of this BindParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["SSLv3", "TLSv1.0", "TLSv1.1", "TLSv1.2", "TLSv1.3"]  # noqa: E501
        if ssl_max_ver not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_max_ver` ({0}), must be one of {1}"  # noqa: E501
                .format(ssl_max_ver, allowed_values)
            )

        self._ssl_max_ver = ssl_max_ver

    @property
    def ssl_min_ver(self):
        """Gets the ssl_min_ver of this BindParams.  # noqa: E501


        :return: The ssl_min_ver of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._ssl_min_ver

    @ssl_min_ver.setter
    def ssl_min_ver(self, ssl_min_ver):
        """Sets the ssl_min_ver of this BindParams.


        :param ssl_min_ver: The ssl_min_ver of this BindParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["SSLv3", "TLSv1.0", "TLSv1.1", "TLSv1.2", "TLSv1.3"]  # noqa: E501
        if ssl_min_ver not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_min_ver` ({0}), must be one of {1}"  # noqa: E501
                .format(ssl_min_ver, allowed_values)
            )

        self._ssl_min_ver = ssl_min_ver

    @property
    def strict_sni(self):
        """Gets the strict_sni of this BindParams.  # noqa: E501


        :return: The strict_sni of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._strict_sni

    @strict_sni.setter
    def strict_sni(self, strict_sni):
        """Sets the strict_sni of this BindParams.


        :param strict_sni: The strict_sni of this BindParams.  # noqa: E501
        :type: bool
        """

        self._strict_sni = strict_sni

    @property
    def tcp_user_timeout(self):
        """Gets the tcp_user_timeout of this BindParams.  # noqa: E501


        :return: The tcp_user_timeout of this BindParams.  # noqa: E501
        :rtype: int
        """
        return self._tcp_user_timeout

    @tcp_user_timeout.setter
    def tcp_user_timeout(self, tcp_user_timeout):
        """Sets the tcp_user_timeout of this BindParams.


        :param tcp_user_timeout: The tcp_user_timeout of this BindParams.  # noqa: E501
        :type: int
        """

        self._tcp_user_timeout = tcp_user_timeout

    @property
    def tfo(self):
        """Gets the tfo of this BindParams.  # noqa: E501


        :return: The tfo of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._tfo

    @tfo.setter
    def tfo(self, tfo):
        """Sets the tfo of this BindParams.


        :param tfo: The tfo of this BindParams.  # noqa: E501
        :type: bool
        """

        self._tfo = tfo

    @property
    def tls_ticket_keys(self):
        """Gets the tls_ticket_keys of this BindParams.  # noqa: E501


        :return: The tls_ticket_keys of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._tls_ticket_keys

    @tls_ticket_keys.setter
    def tls_ticket_keys(self, tls_ticket_keys):
        """Sets the tls_ticket_keys of this BindParams.


        :param tls_ticket_keys: The tls_ticket_keys of this BindParams.  # noqa: E501
        :type: str
        """

        self._tls_ticket_keys = tls_ticket_keys

    @property
    def transparent(self):
        """Gets the transparent of this BindParams.  # noqa: E501


        :return: The transparent of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._transparent

    @transparent.setter
    def transparent(self, transparent):
        """Sets the transparent of this BindParams.


        :param transparent: The transparent of this BindParams.  # noqa: E501
        :type: bool
        """

        self._transparent = transparent

    @property
    def uid(self):
        """Gets the uid of this BindParams.  # noqa: E501


        :return: The uid of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this BindParams.


        :param uid: The uid of this BindParams.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def user(self):
        """Gets the user of this BindParams.  # noqa: E501


        :return: The user of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this BindParams.


        :param user: The user of this BindParams.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def v4v6(self):
        """Gets the v4v6 of this BindParams.  # noqa: E501


        :return: The v4v6 of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._v4v6

    @v4v6.setter
    def v4v6(self, v4v6):
        """Sets the v4v6 of this BindParams.


        :param v4v6: The v4v6 of this BindParams.  # noqa: E501
        :type: bool
        """

        self._v4v6 = v4v6

    @property
    def v6only(self):
        """Gets the v6only of this BindParams.  # noqa: E501


        :return: The v6only of this BindParams.  # noqa: E501
        :rtype: bool
        """
        return self._v6only

    @v6only.setter
    def v6only(self, v6only):
        """Sets the v6only of this BindParams.


        :param v6only: The v6only of this BindParams.  # noqa: E501
        :type: bool
        """

        self._v6only = v6only

    @property
    def verify(self):
        """Gets the verify of this BindParams.  # noqa: E501


        :return: The verify of this BindParams.  # noqa: E501
        :rtype: str
        """
        return self._verify

    @verify.setter
    def verify(self, verify):
        """Sets the verify of this BindParams.


        :param verify: The verify of this BindParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "optional", "required"]  # noqa: E501
        if verify not in allowed_values:
            raise ValueError(
                "Invalid value for `verify` ({0}), must be one of {1}"  # noqa: E501
                .format(verify, allowed_values)
            )

        self._verify = verify

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BindParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BindParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
