# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FcgiLogStderr(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'facility': 'str',
        'format': 'str',
        '_global': 'bool',
        'len': 'int',
        'level': 'str',
        'minlevel': 'str',
        'sample': 'Sample'
    }

    attribute_map = {
        'address': 'address',
        'facility': 'facility',
        'format': 'format',
        '_global': 'global',
        'len': 'len',
        'level': 'level',
        'minlevel': 'minlevel',
        'sample': 'sample'
    }

    def __init__(self, address=None, facility=None, format=None, _global=None, len=None, level=None, minlevel=None, sample=None):  # noqa: E501
        """FcgiLogStderr - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._facility = None
        self._format = None
        self.__global = None
        self._len = None
        self._level = None
        self._minlevel = None
        self._sample = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if facility is not None:
            self.facility = facility
        if format is not None:
            self.format = format
        if _global is not None:
            self._global = _global
        if len is not None:
            self.len = len
        if level is not None:
            self.level = level
        if minlevel is not None:
            self.minlevel = minlevel
        if sample is not None:
            self.sample = sample

    @property
    def address(self):
        """Gets the address of this FcgiLogStderr.  # noqa: E501


        :return: The address of this FcgiLogStderr.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this FcgiLogStderr.


        :param address: The address of this FcgiLogStderr.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def facility(self):
        """Gets the facility of this FcgiLogStderr.  # noqa: E501


        :return: The facility of this FcgiLogStderr.  # noqa: E501
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this FcgiLogStderr.


        :param facility: The facility of this FcgiLogStderr.  # noqa: E501
        :type: str
        """

        self._facility = facility

    @property
    def format(self):
        """Gets the format of this FcgiLogStderr.  # noqa: E501


        :return: The format of this FcgiLogStderr.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this FcgiLogStderr.


        :param format: The format of this FcgiLogStderr.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def _global(self):
        """Gets the _global of this FcgiLogStderr.  # noqa: E501


        :return: The _global of this FcgiLogStderr.  # noqa: E501
        :rtype: bool
        """
        return self.__global

    @_global.setter
    def _global(self, _global):
        """Sets the _global of this FcgiLogStderr.


        :param _global: The _global of this FcgiLogStderr.  # noqa: E501
        :type: bool
        """

        self.__global = _global

    @property
    def len(self):
        """Gets the len of this FcgiLogStderr.  # noqa: E501


        :return: The len of this FcgiLogStderr.  # noqa: E501
        :rtype: int
        """
        return self._len

    @len.setter
    def len(self, len):
        """Sets the len of this FcgiLogStderr.


        :param len: The len of this FcgiLogStderr.  # noqa: E501
        :type: int
        """

        self._len = len

    @property
    def level(self):
        """Gets the level of this FcgiLogStderr.  # noqa: E501


        :return: The level of this FcgiLogStderr.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this FcgiLogStderr.


        :param level: The level of this FcgiLogStderr.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def minlevel(self):
        """Gets the minlevel of this FcgiLogStderr.  # noqa: E501


        :return: The minlevel of this FcgiLogStderr.  # noqa: E501
        :rtype: str
        """
        return self._minlevel

    @minlevel.setter
    def minlevel(self, minlevel):
        """Sets the minlevel of this FcgiLogStderr.


        :param minlevel: The minlevel of this FcgiLogStderr.  # noqa: E501
        :type: str
        """

        self._minlevel = minlevel

    @property
    def sample(self):
        """Gets the sample of this FcgiLogStderr.  # noqa: E501


        :return: The sample of this FcgiLogStderr.  # noqa: E501
        :rtype: Sample
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """Sets the sample of this FcgiLogStderr.


        :param sample: The sample of this FcgiLogStderr.  # noqa: E501
        :type: Sample
        """

        self._sample = sample

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FcgiLogStderr, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FcgiLogStderr):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
