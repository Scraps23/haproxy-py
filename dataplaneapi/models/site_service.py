# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'http_connection_mode': 'str',
        'listeners': 'list[Bind]',
        'maxconn': 'int',
        'mode': 'str'
    }

    attribute_map = {
        'http_connection_mode': 'http_connection_mode',
        'listeners': 'listeners',
        'maxconn': 'maxconn',
        'mode': 'mode'
    }

    def __init__(self, http_connection_mode=None, listeners=None, maxconn=None, mode=None):  # noqa: E501
        """SiteService - a model defined in Swagger"""  # noqa: E501
        self._http_connection_mode = None
        self._listeners = None
        self._maxconn = None
        self._mode = None
        self.discriminator = None
        if http_connection_mode is not None:
            self.http_connection_mode = http_connection_mode
        if listeners is not None:
            self.listeners = listeners
        if maxconn is not None:
            self.maxconn = maxconn
        if mode is not None:
            self.mode = mode

    @property
    def http_connection_mode(self):
        """Gets the http_connection_mode of this SiteService.  # noqa: E501


        :return: The http_connection_mode of this SiteService.  # noqa: E501
        :rtype: str
        """
        return self._http_connection_mode

    @http_connection_mode.setter
    def http_connection_mode(self, http_connection_mode):
        """Sets the http_connection_mode of this SiteService.


        :param http_connection_mode: The http_connection_mode of this SiteService.  # noqa: E501
        :type: str
        """
        allowed_values = ["http-tunnel", "httpclose", "forced-close", "http-server-close", "http-keep-alive"]  # noqa: E501
        if http_connection_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `http_connection_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(http_connection_mode, allowed_values)
            )

        self._http_connection_mode = http_connection_mode

    @property
    def listeners(self):
        """Gets the listeners of this SiteService.  # noqa: E501


        :return: The listeners of this SiteService.  # noqa: E501
        :rtype: list[Bind]
        """
        return self._listeners

    @listeners.setter
    def listeners(self, listeners):
        """Sets the listeners of this SiteService.


        :param listeners: The listeners of this SiteService.  # noqa: E501
        :type: list[Bind]
        """

        self._listeners = listeners

    @property
    def maxconn(self):
        """Gets the maxconn of this SiteService.  # noqa: E501


        :return: The maxconn of this SiteService.  # noqa: E501
        :rtype: int
        """
        return self._maxconn

    @maxconn.setter
    def maxconn(self, maxconn):
        """Sets the maxconn of this SiteService.


        :param maxconn: The maxconn of this SiteService.  # noqa: E501
        :type: int
        """

        self._maxconn = maxconn

    @property
    def mode(self):
        """Gets the mode of this SiteService.  # noqa: E501


        :return: The mode of this SiteService.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this SiteService.


        :param mode: The mode of this SiteService.  # noqa: E501
        :type: str
        """
        allowed_values = ["http", "tcp"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
