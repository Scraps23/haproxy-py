# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HttpErrorRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index': 'int',
        'return_content': 'str',
        'return_content_format': 'str',
        'return_content_type': 'str',
        'return_hdrs': 'list[ReturnHeader]',
        'status': 'int',
        'type': 'str'
    }

    attribute_map = {
        'index': 'index',
        'return_content': 'return_content',
        'return_content_format': 'return_content_format',
        'return_content_type': 'return_content_type',
        'return_hdrs': 'return_hdrs',
        'status': 'status',
        'type': 'type'
    }

    def __init__(self, index=None, return_content=None, return_content_format=None, return_content_type=None, return_hdrs=None, status=None, type=None):  # noqa: E501
        """HttpErrorRule - a model defined in Swagger"""  # noqa: E501
        self._index = None
        self._return_content = None
        self._return_content_format = None
        self._return_content_type = None
        self._return_hdrs = None
        self._status = None
        self._type = None
        self.discriminator = None
        self.index = index
        if return_content is not None:
            self.return_content = return_content
        if return_content_format is not None:
            self.return_content_format = return_content_format
        if return_content_type is not None:
            self.return_content_type = return_content_type
        if return_hdrs is not None:
            self.return_hdrs = return_hdrs
        self.status = status
        self.type = type

    @property
    def index(self):
        """Gets the index of this HttpErrorRule.  # noqa: E501


        :return: The index of this HttpErrorRule.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this HttpErrorRule.


        :param index: The index of this HttpErrorRule.  # noqa: E501
        :type: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def return_content(self):
        """Gets the return_content of this HttpErrorRule.  # noqa: E501


        :return: The return_content of this HttpErrorRule.  # noqa: E501
        :rtype: str
        """
        return self._return_content

    @return_content.setter
    def return_content(self, return_content):
        """Sets the return_content of this HttpErrorRule.


        :param return_content: The return_content of this HttpErrorRule.  # noqa: E501
        :type: str
        """

        self._return_content = return_content

    @property
    def return_content_format(self):
        """Gets the return_content_format of this HttpErrorRule.  # noqa: E501


        :return: The return_content_format of this HttpErrorRule.  # noqa: E501
        :rtype: str
        """
        return self._return_content_format

    @return_content_format.setter
    def return_content_format(self, return_content_format):
        """Sets the return_content_format of this HttpErrorRule.


        :param return_content_format: The return_content_format of this HttpErrorRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["default-errorfile", "errorfile", "errorfiles", "file", "lf-file", "string", "lf-string"]  # noqa: E501
        if return_content_format not in allowed_values:
            raise ValueError(
                "Invalid value for `return_content_format` ({0}), must be one of {1}"  # noqa: E501
                .format(return_content_format, allowed_values)
            )

        self._return_content_format = return_content_format

    @property
    def return_content_type(self):
        """Gets the return_content_type of this HttpErrorRule.  # noqa: E501


        :return: The return_content_type of this HttpErrorRule.  # noqa: E501
        :rtype: str
        """
        return self._return_content_type

    @return_content_type.setter
    def return_content_type(self, return_content_type):
        """Sets the return_content_type of this HttpErrorRule.


        :param return_content_type: The return_content_type of this HttpErrorRule.  # noqa: E501
        :type: str
        """

        self._return_content_type = return_content_type

    @property
    def return_hdrs(self):
        """Gets the return_hdrs of this HttpErrorRule.  # noqa: E501


        :return: The return_hdrs of this HttpErrorRule.  # noqa: E501
        :rtype: list[ReturnHeader]
        """
        return self._return_hdrs

    @return_hdrs.setter
    def return_hdrs(self, return_hdrs):
        """Sets the return_hdrs of this HttpErrorRule.


        :param return_hdrs: The return_hdrs of this HttpErrorRule.  # noqa: E501
        :type: list[ReturnHeader]
        """

        self._return_hdrs = return_hdrs

    @property
    def status(self):
        """Gets the status of this HttpErrorRule.  # noqa: E501


        :return: The status of this HttpErrorRule.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HttpErrorRule.


        :param status: The status of this HttpErrorRule.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = [200, 400, 401, 403, 404, 405, 407, 408, 410, 413, 425, 429, 500, 501, 502, 503, 504]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this HttpErrorRule.  # noqa: E501


        :return: The type of this HttpErrorRule.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HttpErrorRule.


        :param type: The type of this HttpErrorRule.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["status"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HttpErrorRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HttpErrorRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
