# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Cookie(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attr': 'list[CookieAttr]',
        'domain': 'list[CookieAttr]',
        'dynamic': 'bool',
        'httponly': 'bool',
        'indirect': 'bool',
        'maxidle': 'int',
        'maxlife': 'int',
        'name': 'str',
        'nocache': 'bool',
        'postonly': 'bool',
        'preserve': 'bool',
        'secure': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'attr': 'attr',
        'domain': 'domain',
        'dynamic': 'dynamic',
        'httponly': 'httponly',
        'indirect': 'indirect',
        'maxidle': 'maxidle',
        'maxlife': 'maxlife',
        'name': 'name',
        'nocache': 'nocache',
        'postonly': 'postonly',
        'preserve': 'preserve',
        'secure': 'secure',
        'type': 'type'
    }

    def __init__(self, attr=None, domain=None, dynamic=None, httponly=None, indirect=None, maxidle=None, maxlife=None, name=None, nocache=None, postonly=None, preserve=None, secure=None, type=None):  # noqa: E501
        """Cookie - a model defined in Swagger"""  # noqa: E501
        self._attr = None
        self._domain = None
        self._dynamic = None
        self._httponly = None
        self._indirect = None
        self._maxidle = None
        self._maxlife = None
        self._name = None
        self._nocache = None
        self._postonly = None
        self._preserve = None
        self._secure = None
        self._type = None
        self.discriminator = None
        if attr is not None:
            self.attr = attr
        if domain is not None:
            self.domain = domain
        if dynamic is not None:
            self.dynamic = dynamic
        if httponly is not None:
            self.httponly = httponly
        if indirect is not None:
            self.indirect = indirect
        if maxidle is not None:
            self.maxidle = maxidle
        if maxlife is not None:
            self.maxlife = maxlife
        self.name = name
        if nocache is not None:
            self.nocache = nocache
        if postonly is not None:
            self.postonly = postonly
        if preserve is not None:
            self.preserve = preserve
        if secure is not None:
            self.secure = secure
        if type is not None:
            self.type = type

    @property
    def attr(self):
        """Gets the attr of this Cookie.  # noqa: E501


        :return: The attr of this Cookie.  # noqa: E501
        :rtype: list[CookieAttr]
        """
        return self._attr

    @attr.setter
    def attr(self, attr):
        """Sets the attr of this Cookie.


        :param attr: The attr of this Cookie.  # noqa: E501
        :type: list[CookieAttr]
        """

        self._attr = attr

    @property
    def domain(self):
        """Gets the domain of this Cookie.  # noqa: E501


        :return: The domain of this Cookie.  # noqa: E501
        :rtype: list[CookieAttr]
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Cookie.


        :param domain: The domain of this Cookie.  # noqa: E501
        :type: list[CookieAttr]
        """

        self._domain = domain

    @property
    def dynamic(self):
        """Gets the dynamic of this Cookie.  # noqa: E501


        :return: The dynamic of this Cookie.  # noqa: E501
        :rtype: bool
        """
        return self._dynamic

    @dynamic.setter
    def dynamic(self, dynamic):
        """Sets the dynamic of this Cookie.


        :param dynamic: The dynamic of this Cookie.  # noqa: E501
        :type: bool
        """

        self._dynamic = dynamic

    @property
    def httponly(self):
        """Gets the httponly of this Cookie.  # noqa: E501


        :return: The httponly of this Cookie.  # noqa: E501
        :rtype: bool
        """
        return self._httponly

    @httponly.setter
    def httponly(self, httponly):
        """Sets the httponly of this Cookie.


        :param httponly: The httponly of this Cookie.  # noqa: E501
        :type: bool
        """

        self._httponly = httponly

    @property
    def indirect(self):
        """Gets the indirect of this Cookie.  # noqa: E501


        :return: The indirect of this Cookie.  # noqa: E501
        :rtype: bool
        """
        return self._indirect

    @indirect.setter
    def indirect(self, indirect):
        """Sets the indirect of this Cookie.


        :param indirect: The indirect of this Cookie.  # noqa: E501
        :type: bool
        """

        self._indirect = indirect

    @property
    def maxidle(self):
        """Gets the maxidle of this Cookie.  # noqa: E501


        :return: The maxidle of this Cookie.  # noqa: E501
        :rtype: int
        """
        return self._maxidle

    @maxidle.setter
    def maxidle(self, maxidle):
        """Sets the maxidle of this Cookie.


        :param maxidle: The maxidle of this Cookie.  # noqa: E501
        :type: int
        """

        self._maxidle = maxidle

    @property
    def maxlife(self):
        """Gets the maxlife of this Cookie.  # noqa: E501


        :return: The maxlife of this Cookie.  # noqa: E501
        :rtype: int
        """
        return self._maxlife

    @maxlife.setter
    def maxlife(self, maxlife):
        """Sets the maxlife of this Cookie.


        :param maxlife: The maxlife of this Cookie.  # noqa: E501
        :type: int
        """

        self._maxlife = maxlife

    @property
    def name(self):
        """Gets the name of this Cookie.  # noqa: E501


        :return: The name of this Cookie.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cookie.


        :param name: The name of this Cookie.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def nocache(self):
        """Gets the nocache of this Cookie.  # noqa: E501


        :return: The nocache of this Cookie.  # noqa: E501
        :rtype: bool
        """
        return self._nocache

    @nocache.setter
    def nocache(self, nocache):
        """Sets the nocache of this Cookie.


        :param nocache: The nocache of this Cookie.  # noqa: E501
        :type: bool
        """

        self._nocache = nocache

    @property
    def postonly(self):
        """Gets the postonly of this Cookie.  # noqa: E501


        :return: The postonly of this Cookie.  # noqa: E501
        :rtype: bool
        """
        return self._postonly

    @postonly.setter
    def postonly(self, postonly):
        """Sets the postonly of this Cookie.


        :param postonly: The postonly of this Cookie.  # noqa: E501
        :type: bool
        """

        self._postonly = postonly

    @property
    def preserve(self):
        """Gets the preserve of this Cookie.  # noqa: E501


        :return: The preserve of this Cookie.  # noqa: E501
        :rtype: bool
        """
        return self._preserve

    @preserve.setter
    def preserve(self, preserve):
        """Sets the preserve of this Cookie.


        :param preserve: The preserve of this Cookie.  # noqa: E501
        :type: bool
        """

        self._preserve = preserve

    @property
    def secure(self):
        """Gets the secure of this Cookie.  # noqa: E501


        :return: The secure of this Cookie.  # noqa: E501
        :rtype: bool
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this Cookie.


        :param secure: The secure of this Cookie.  # noqa: E501
        :type: bool
        """

        self._secure = secure

    @property
    def type(self):
        """Gets the type of this Cookie.  # noqa: E501


        :return: The type of this Cookie.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Cookie.


        :param type: The type of this Cookie.  # noqa: E501
        :type: str
        """
        allowed_values = ["rewrite", "insert", "prefix"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cookie, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cookie):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
