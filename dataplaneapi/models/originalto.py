# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Originalto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'str',
        '_except': 'str',
        'header': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        '_except': 'except',
        'header': 'header'
    }

    def __init__(self, enabled=None, _except=None, header=None):  # noqa: E501
        """Originalto - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self.__except = None
        self._header = None
        self.discriminator = None
        self.enabled = enabled
        if _except is not None:
            self._except = _except
        if header is not None:
            self.header = header

    @property
    def enabled(self):
        """Gets the enabled of this Originalto.  # noqa: E501


        :return: The enabled of this Originalto.  # noqa: E501
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Originalto.


        :param enabled: The enabled of this Originalto.  # noqa: E501
        :type: str
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501
        allowed_values = ["enabled"]  # noqa: E501
        if enabled not in allowed_values:
            raise ValueError(
                "Invalid value for `enabled` ({0}), must be one of {1}"  # noqa: E501
                .format(enabled, allowed_values)
            )

        self._enabled = enabled

    @property
    def _except(self):
        """Gets the _except of this Originalto.  # noqa: E501


        :return: The _except of this Originalto.  # noqa: E501
        :rtype: str
        """
        return self.__except

    @_except.setter
    def _except(self, _except):
        """Sets the _except of this Originalto.


        :param _except: The _except of this Originalto.  # noqa: E501
        :type: str
        """

        self.__except = _except

    @property
    def header(self):
        """Gets the header of this Originalto.  # noqa: E501


        :return: The header of this Originalto.  # noqa: E501
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this Originalto.


        :param header: The header of this Originalto.  # noqa: E501
        :type: str
        """

        self._header = header

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Originalto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Originalto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
