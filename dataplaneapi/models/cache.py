# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Cache(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_age': 'int',
        'max_object_size': 'int',
        'max_secondary_entries': 'int',
        'name': 'str',
        'process_vary': 'bool',
        'total_max_size': 'int'
    }

    attribute_map = {
        'max_age': 'max_age',
        'max_object_size': 'max_object_size',
        'max_secondary_entries': 'max_secondary_entries',
        'name': 'name',
        'process_vary': 'process_vary',
        'total_max_size': 'total_max_size'
    }

    def __init__(self, max_age=None, max_object_size=None, max_secondary_entries=None, name=None, process_vary=None, total_max_size=None):  # noqa: E501
        """Cache - a model defined in Swagger"""  # noqa: E501
        self._max_age = None
        self._max_object_size = None
        self._max_secondary_entries = None
        self._name = None
        self._process_vary = None
        self._total_max_size = None
        self.discriminator = None
        if max_age is not None:
            self.max_age = max_age
        if max_object_size is not None:
            self.max_object_size = max_object_size
        if max_secondary_entries is not None:
            self.max_secondary_entries = max_secondary_entries
        self.name = name
        if process_vary is not None:
            self.process_vary = process_vary
        if total_max_size is not None:
            self.total_max_size = total_max_size

    @property
    def max_age(self):
        """Gets the max_age of this Cache.  # noqa: E501


        :return: The max_age of this Cache.  # noqa: E501
        :rtype: int
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this Cache.


        :param max_age: The max_age of this Cache.  # noqa: E501
        :type: int
        """

        self._max_age = max_age

    @property
    def max_object_size(self):
        """Gets the max_object_size of this Cache.  # noqa: E501


        :return: The max_object_size of this Cache.  # noqa: E501
        :rtype: int
        """
        return self._max_object_size

    @max_object_size.setter
    def max_object_size(self, max_object_size):
        """Sets the max_object_size of this Cache.


        :param max_object_size: The max_object_size of this Cache.  # noqa: E501
        :type: int
        """

        self._max_object_size = max_object_size

    @property
    def max_secondary_entries(self):
        """Gets the max_secondary_entries of this Cache.  # noqa: E501


        :return: The max_secondary_entries of this Cache.  # noqa: E501
        :rtype: int
        """
        return self._max_secondary_entries

    @max_secondary_entries.setter
    def max_secondary_entries(self, max_secondary_entries):
        """Sets the max_secondary_entries of this Cache.


        :param max_secondary_entries: The max_secondary_entries of this Cache.  # noqa: E501
        :type: int
        """

        self._max_secondary_entries = max_secondary_entries

    @property
    def name(self):
        """Gets the name of this Cache.  # noqa: E501


        :return: The name of this Cache.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cache.


        :param name: The name of this Cache.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def process_vary(self):
        """Gets the process_vary of this Cache.  # noqa: E501


        :return: The process_vary of this Cache.  # noqa: E501
        :rtype: bool
        """
        return self._process_vary

    @process_vary.setter
    def process_vary(self, process_vary):
        """Sets the process_vary of this Cache.


        :param process_vary: The process_vary of this Cache.  # noqa: E501
        :type: bool
        """

        self._process_vary = process_vary

    @property
    def total_max_size(self):
        """Gets the total_max_size of this Cache.  # noqa: E501


        :return: The total_max_size of this Cache.  # noqa: E501
        :rtype: int
        """
        return self._total_max_size

    @total_max_size.setter
    def total_max_size(self, total_max_size):
        """Sets the total_max_size of this Cache.


        :param total_max_size: The total_max_size of this Cache.  # noqa: E501
        :type: int
        """

        self._total_max_size = total_max_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cache, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cache):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
