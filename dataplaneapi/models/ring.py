# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Ring(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'format': 'str',
        'maxlen': 'int',
        'name': 'str',
        'size': 'int',
        'timeout_connect': 'int',
        'timeout_server': 'int'
    }

    attribute_map = {
        'description': 'description',
        'format': 'format',
        'maxlen': 'maxlen',
        'name': 'name',
        'size': 'size',
        'timeout_connect': 'timeout_connect',
        'timeout_server': 'timeout_server'
    }

    def __init__(self, description=None, format=None, maxlen=None, name=None, size=None, timeout_connect=None, timeout_server=None):  # noqa: E501
        """Ring - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._format = None
        self._maxlen = None
        self._name = None
        self._size = None
        self._timeout_connect = None
        self._timeout_server = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if format is not None:
            self.format = format
        if maxlen is not None:
            self.maxlen = maxlen
        self.name = name
        if size is not None:
            self.size = size
        if timeout_connect is not None:
            self.timeout_connect = timeout_connect
        if timeout_server is not None:
            self.timeout_server = timeout_server

    @property
    def description(self):
        """Gets the description of this Ring.  # noqa: E501


        :return: The description of this Ring.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Ring.


        :param description: The description of this Ring.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def format(self):
        """Gets the format of this Ring.  # noqa: E501


        :return: The format of this Ring.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Ring.


        :param format: The format of this Ring.  # noqa: E501
        :type: str
        """
        allowed_values = ["iso", "local", "raw", "rfc3164", "rfc5424", "short", "priority", "timed"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def maxlen(self):
        """Gets the maxlen of this Ring.  # noqa: E501


        :return: The maxlen of this Ring.  # noqa: E501
        :rtype: int
        """
        return self._maxlen

    @maxlen.setter
    def maxlen(self, maxlen):
        """Sets the maxlen of this Ring.


        :param maxlen: The maxlen of this Ring.  # noqa: E501
        :type: int
        """

        self._maxlen = maxlen

    @property
    def name(self):
        """Gets the name of this Ring.  # noqa: E501


        :return: The name of this Ring.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Ring.


        :param name: The name of this Ring.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def size(self):
        """Gets the size of this Ring.  # noqa: E501


        :return: The size of this Ring.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Ring.


        :param size: The size of this Ring.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def timeout_connect(self):
        """Gets the timeout_connect of this Ring.  # noqa: E501


        :return: The timeout_connect of this Ring.  # noqa: E501
        :rtype: int
        """
        return self._timeout_connect

    @timeout_connect.setter
    def timeout_connect(self, timeout_connect):
        """Sets the timeout_connect of this Ring.


        :param timeout_connect: The timeout_connect of this Ring.  # noqa: E501
        :type: int
        """

        self._timeout_connect = timeout_connect

    @property
    def timeout_server(self):
        """Gets the timeout_server of this Ring.  # noqa: E501


        :return: The timeout_server of this Ring.  # noqa: E501
        :rtype: int
        """
        return self._timeout_server

    @timeout_server.setter
    def timeout_server(self, timeout_server):
        """Sets the timeout_server of this Ring.


        :param timeout_server: The timeout_server of this Ring.  # noqa: E501
        :type: int
        """

        self._timeout_server = timeout_server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ring, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ring):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
