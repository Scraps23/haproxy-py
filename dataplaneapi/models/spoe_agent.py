# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SpoeAgent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_async': 'str',
        'continue_on_error': 'str',
        'dontlog_normal': 'str',
        'engine_name': 'str',
        'force_set_var': 'str',
        'groups': 'str',
        'hello_timeout': 'int',
        'idle_timeout': 'int',
        'log': 'LogTargets',
        'max_frame_size': 'int',
        'max_waiting_frames': 'int',
        'maxconnrate': 'int',
        'maxerrrate': 'int',
        'messages': 'str',
        'name': 'str',
        'option_set_on_error': 'str',
        'option_set_process_time': 'str',
        'option_set_total_time': 'str',
        'option_var_prefix': 'str',
        'pipelining': 'str',
        'processing_timeout': 'int',
        'register_var_names': 'str',
        'send_frag_payload': 'str',
        'use_backend': 'str'
    }

    attribute_map = {
        '_async': 'async',
        'continue_on_error': 'continue-on-error',
        'dontlog_normal': 'dontlog-normal',
        'engine_name': 'engine-name',
        'force_set_var': 'force-set-var',
        'groups': 'groups',
        'hello_timeout': 'hello_timeout',
        'idle_timeout': 'idle_timeout',
        'log': 'log',
        'max_frame_size': 'max-frame-size',
        'max_waiting_frames': 'max-waiting-frames',
        'maxconnrate': 'maxconnrate',
        'maxerrrate': 'maxerrrate',
        'messages': 'messages',
        'name': 'name',
        'option_set_on_error': 'option_set-on-error',
        'option_set_process_time': 'option_set-process-time',
        'option_set_total_time': 'option_set-total-time',
        'option_var_prefix': 'option_var-prefix',
        'pipelining': 'pipelining',
        'processing_timeout': 'processing_timeout',
        'register_var_names': 'register-var-names',
        'send_frag_payload': 'send-frag-payload',
        'use_backend': 'use-backend'
    }

    def __init__(self, _async=None, continue_on_error=None, dontlog_normal=None, engine_name=None, force_set_var=None, groups=None, hello_timeout=None, idle_timeout=None, log=None, max_frame_size=None, max_waiting_frames=None, maxconnrate=None, maxerrrate=None, messages=None, name=None, option_set_on_error=None, option_set_process_time=None, option_set_total_time=None, option_var_prefix=None, pipelining=None, processing_timeout=None, register_var_names=None, send_frag_payload=None, use_backend=None):  # noqa: E501
        """SpoeAgent - a model defined in Swagger"""  # noqa: E501
        self.__async = None
        self._continue_on_error = None
        self._dontlog_normal = None
        self._engine_name = None
        self._force_set_var = None
        self._groups = None
        self._hello_timeout = None
        self._idle_timeout = None
        self._log = None
        self._max_frame_size = None
        self._max_waiting_frames = None
        self._maxconnrate = None
        self._maxerrrate = None
        self._messages = None
        self._name = None
        self._option_set_on_error = None
        self._option_set_process_time = None
        self._option_set_total_time = None
        self._option_var_prefix = None
        self._pipelining = None
        self._processing_timeout = None
        self._register_var_names = None
        self._send_frag_payload = None
        self._use_backend = None
        self.discriminator = None
        if _async is not None:
            self._async = _async
        if continue_on_error is not None:
            self.continue_on_error = continue_on_error
        if dontlog_normal is not None:
            self.dontlog_normal = dontlog_normal
        if engine_name is not None:
            self.engine_name = engine_name
        if force_set_var is not None:
            self.force_set_var = force_set_var
        if groups is not None:
            self.groups = groups
        if hello_timeout is not None:
            self.hello_timeout = hello_timeout
        if idle_timeout is not None:
            self.idle_timeout = idle_timeout
        if log is not None:
            self.log = log
        if max_frame_size is not None:
            self.max_frame_size = max_frame_size
        if max_waiting_frames is not None:
            self.max_waiting_frames = max_waiting_frames
        if maxconnrate is not None:
            self.maxconnrate = maxconnrate
        if maxerrrate is not None:
            self.maxerrrate = maxerrrate
        if messages is not None:
            self.messages = messages
        self.name = name
        if option_set_on_error is not None:
            self.option_set_on_error = option_set_on_error
        if option_set_process_time is not None:
            self.option_set_process_time = option_set_process_time
        if option_set_total_time is not None:
            self.option_set_total_time = option_set_total_time
        if option_var_prefix is not None:
            self.option_var_prefix = option_var_prefix
        if pipelining is not None:
            self.pipelining = pipelining
        if processing_timeout is not None:
            self.processing_timeout = processing_timeout
        if register_var_names is not None:
            self.register_var_names = register_var_names
        if send_frag_payload is not None:
            self.send_frag_payload = send_frag_payload
        if use_backend is not None:
            self.use_backend = use_backend

    @property
    def _async(self):
        """Gets the _async of this SpoeAgent.  # noqa: E501


        :return: The _async of this SpoeAgent.  # noqa: E501
        :rtype: str
        """
        return self.__async

    @_async.setter
    def _async(self, _async):
        """Sets the _async of this SpoeAgent.


        :param _async: The _async of this SpoeAgent.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if _async not in allowed_values:
            raise ValueError(
                "Invalid value for `_async` ({0}), must be one of {1}"  # noqa: E501
                .format(_async, allowed_values)
            )

        self.__async = _async

    @property
    def continue_on_error(self):
        """Gets the continue_on_error of this SpoeAgent.  # noqa: E501


        :return: The continue_on_error of this SpoeAgent.  # noqa: E501
        :rtype: str
        """
        return self._continue_on_error

    @continue_on_error.setter
    def continue_on_error(self, continue_on_error):
        """Sets the continue_on_error of this SpoeAgent.


        :param continue_on_error: The continue_on_error of this SpoeAgent.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled"]  # noqa: E501
        if continue_on_error not in allowed_values:
            raise ValueError(
                "Invalid value for `continue_on_error` ({0}), must be one of {1}"  # noqa: E501
                .format(continue_on_error, allowed_values)
            )

        self._continue_on_error = continue_on_error

    @property
    def dontlog_normal(self):
        """Gets the dontlog_normal of this SpoeAgent.  # noqa: E501


        :return: The dontlog_normal of this SpoeAgent.  # noqa: E501
        :rtype: str
        """
        return self._dontlog_normal

    @dontlog_normal.setter
    def dontlog_normal(self, dontlog_normal):
        """Sets the dontlog_normal of this SpoeAgent.


        :param dontlog_normal: The dontlog_normal of this SpoeAgent.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if dontlog_normal not in allowed_values:
            raise ValueError(
                "Invalid value for `dontlog_normal` ({0}), must be one of {1}"  # noqa: E501
                .format(dontlog_normal, allowed_values)
            )

        self._dontlog_normal = dontlog_normal

    @property
    def engine_name(self):
        """Gets the engine_name of this SpoeAgent.  # noqa: E501


        :return: The engine_name of this SpoeAgent.  # noqa: E501
        :rtype: str
        """
        return self._engine_name

    @engine_name.setter
    def engine_name(self, engine_name):
        """Sets the engine_name of this SpoeAgent.


        :param engine_name: The engine_name of this SpoeAgent.  # noqa: E501
        :type: str
        """

        self._engine_name = engine_name

    @property
    def force_set_var(self):
        """Gets the force_set_var of this SpoeAgent.  # noqa: E501


        :return: The force_set_var of this SpoeAgent.  # noqa: E501
        :rtype: str
        """
        return self._force_set_var

    @force_set_var.setter
    def force_set_var(self, force_set_var):
        """Sets the force_set_var of this SpoeAgent.


        :param force_set_var: The force_set_var of this SpoeAgent.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled"]  # noqa: E501
        if force_set_var not in allowed_values:
            raise ValueError(
                "Invalid value for `force_set_var` ({0}), must be one of {1}"  # noqa: E501
                .format(force_set_var, allowed_values)
            )

        self._force_set_var = force_set_var

    @property
    def groups(self):
        """Gets the groups of this SpoeAgent.  # noqa: E501


        :return: The groups of this SpoeAgent.  # noqa: E501
        :rtype: str
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this SpoeAgent.


        :param groups: The groups of this SpoeAgent.  # noqa: E501
        :type: str
        """

        self._groups = groups

    @property
    def hello_timeout(self):
        """Gets the hello_timeout of this SpoeAgent.  # noqa: E501


        :return: The hello_timeout of this SpoeAgent.  # noqa: E501
        :rtype: int
        """
        return self._hello_timeout

    @hello_timeout.setter
    def hello_timeout(self, hello_timeout):
        """Sets the hello_timeout of this SpoeAgent.


        :param hello_timeout: The hello_timeout of this SpoeAgent.  # noqa: E501
        :type: int
        """

        self._hello_timeout = hello_timeout

    @property
    def idle_timeout(self):
        """Gets the idle_timeout of this SpoeAgent.  # noqa: E501


        :return: The idle_timeout of this SpoeAgent.  # noqa: E501
        :rtype: int
        """
        return self._idle_timeout

    @idle_timeout.setter
    def idle_timeout(self, idle_timeout):
        """Sets the idle_timeout of this SpoeAgent.


        :param idle_timeout: The idle_timeout of this SpoeAgent.  # noqa: E501
        :type: int
        """

        self._idle_timeout = idle_timeout

    @property
    def log(self):
        """Gets the log of this SpoeAgent.  # noqa: E501


        :return: The log of this SpoeAgent.  # noqa: E501
        :rtype: LogTargets
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this SpoeAgent.


        :param log: The log of this SpoeAgent.  # noqa: E501
        :type: LogTargets
        """

        self._log = log

    @property
    def max_frame_size(self):
        """Gets the max_frame_size of this SpoeAgent.  # noqa: E501


        :return: The max_frame_size of this SpoeAgent.  # noqa: E501
        :rtype: int
        """
        return self._max_frame_size

    @max_frame_size.setter
    def max_frame_size(self, max_frame_size):
        """Sets the max_frame_size of this SpoeAgent.


        :param max_frame_size: The max_frame_size of this SpoeAgent.  # noqa: E501
        :type: int
        """

        self._max_frame_size = max_frame_size

    @property
    def max_waiting_frames(self):
        """Gets the max_waiting_frames of this SpoeAgent.  # noqa: E501


        :return: The max_waiting_frames of this SpoeAgent.  # noqa: E501
        :rtype: int
        """
        return self._max_waiting_frames

    @max_waiting_frames.setter
    def max_waiting_frames(self, max_waiting_frames):
        """Sets the max_waiting_frames of this SpoeAgent.


        :param max_waiting_frames: The max_waiting_frames of this SpoeAgent.  # noqa: E501
        :type: int
        """

        self._max_waiting_frames = max_waiting_frames

    @property
    def maxconnrate(self):
        """Gets the maxconnrate of this SpoeAgent.  # noqa: E501


        :return: The maxconnrate of this SpoeAgent.  # noqa: E501
        :rtype: int
        """
        return self._maxconnrate

    @maxconnrate.setter
    def maxconnrate(self, maxconnrate):
        """Sets the maxconnrate of this SpoeAgent.


        :param maxconnrate: The maxconnrate of this SpoeAgent.  # noqa: E501
        :type: int
        """

        self._maxconnrate = maxconnrate

    @property
    def maxerrrate(self):
        """Gets the maxerrrate of this SpoeAgent.  # noqa: E501


        :return: The maxerrrate of this SpoeAgent.  # noqa: E501
        :rtype: int
        """
        return self._maxerrrate

    @maxerrrate.setter
    def maxerrrate(self, maxerrrate):
        """Sets the maxerrrate of this SpoeAgent.


        :param maxerrrate: The maxerrrate of this SpoeAgent.  # noqa: E501
        :type: int
        """

        self._maxerrrate = maxerrrate

    @property
    def messages(self):
        """Gets the messages of this SpoeAgent.  # noqa: E501


        :return: The messages of this SpoeAgent.  # noqa: E501
        :rtype: str
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this SpoeAgent.


        :param messages: The messages of this SpoeAgent.  # noqa: E501
        :type: str
        """

        self._messages = messages

    @property
    def name(self):
        """Gets the name of this SpoeAgent.  # noqa: E501


        :return: The name of this SpoeAgent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SpoeAgent.


        :param name: The name of this SpoeAgent.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def option_set_on_error(self):
        """Gets the option_set_on_error of this SpoeAgent.  # noqa: E501


        :return: The option_set_on_error of this SpoeAgent.  # noqa: E501
        :rtype: str
        """
        return self._option_set_on_error

    @option_set_on_error.setter
    def option_set_on_error(self, option_set_on_error):
        """Sets the option_set_on_error of this SpoeAgent.


        :param option_set_on_error: The option_set_on_error of this SpoeAgent.  # noqa: E501
        :type: str
        """

        self._option_set_on_error = option_set_on_error

    @property
    def option_set_process_time(self):
        """Gets the option_set_process_time of this SpoeAgent.  # noqa: E501


        :return: The option_set_process_time of this SpoeAgent.  # noqa: E501
        :rtype: str
        """
        return self._option_set_process_time

    @option_set_process_time.setter
    def option_set_process_time(self, option_set_process_time):
        """Sets the option_set_process_time of this SpoeAgent.


        :param option_set_process_time: The option_set_process_time of this SpoeAgent.  # noqa: E501
        :type: str
        """

        self._option_set_process_time = option_set_process_time

    @property
    def option_set_total_time(self):
        """Gets the option_set_total_time of this SpoeAgent.  # noqa: E501


        :return: The option_set_total_time of this SpoeAgent.  # noqa: E501
        :rtype: str
        """
        return self._option_set_total_time

    @option_set_total_time.setter
    def option_set_total_time(self, option_set_total_time):
        """Sets the option_set_total_time of this SpoeAgent.


        :param option_set_total_time: The option_set_total_time of this SpoeAgent.  # noqa: E501
        :type: str
        """

        self._option_set_total_time = option_set_total_time

    @property
    def option_var_prefix(self):
        """Gets the option_var_prefix of this SpoeAgent.  # noqa: E501


        :return: The option_var_prefix of this SpoeAgent.  # noqa: E501
        :rtype: str
        """
        return self._option_var_prefix

    @option_var_prefix.setter
    def option_var_prefix(self, option_var_prefix):
        """Sets the option_var_prefix of this SpoeAgent.


        :param option_var_prefix: The option_var_prefix of this SpoeAgent.  # noqa: E501
        :type: str
        """

        self._option_var_prefix = option_var_prefix

    @property
    def pipelining(self):
        """Gets the pipelining of this SpoeAgent.  # noqa: E501


        :return: The pipelining of this SpoeAgent.  # noqa: E501
        :rtype: str
        """
        return self._pipelining

    @pipelining.setter
    def pipelining(self, pipelining):
        """Sets the pipelining of this SpoeAgent.


        :param pipelining: The pipelining of this SpoeAgent.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if pipelining not in allowed_values:
            raise ValueError(
                "Invalid value for `pipelining` ({0}), must be one of {1}"  # noqa: E501
                .format(pipelining, allowed_values)
            )

        self._pipelining = pipelining

    @property
    def processing_timeout(self):
        """Gets the processing_timeout of this SpoeAgent.  # noqa: E501


        :return: The processing_timeout of this SpoeAgent.  # noqa: E501
        :rtype: int
        """
        return self._processing_timeout

    @processing_timeout.setter
    def processing_timeout(self, processing_timeout):
        """Sets the processing_timeout of this SpoeAgent.


        :param processing_timeout: The processing_timeout of this SpoeAgent.  # noqa: E501
        :type: int
        """

        self._processing_timeout = processing_timeout

    @property
    def register_var_names(self):
        """Gets the register_var_names of this SpoeAgent.  # noqa: E501


        :return: The register_var_names of this SpoeAgent.  # noqa: E501
        :rtype: str
        """
        return self._register_var_names

    @register_var_names.setter
    def register_var_names(self, register_var_names):
        """Sets the register_var_names of this SpoeAgent.


        :param register_var_names: The register_var_names of this SpoeAgent.  # noqa: E501
        :type: str
        """

        self._register_var_names = register_var_names

    @property
    def send_frag_payload(self):
        """Gets the send_frag_payload of this SpoeAgent.  # noqa: E501


        :return: The send_frag_payload of this SpoeAgent.  # noqa: E501
        :rtype: str
        """
        return self._send_frag_payload

    @send_frag_payload.setter
    def send_frag_payload(self, send_frag_payload):
        """Sets the send_frag_payload of this SpoeAgent.


        :param send_frag_payload: The send_frag_payload of this SpoeAgent.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if send_frag_payload not in allowed_values:
            raise ValueError(
                "Invalid value for `send_frag_payload` ({0}), must be one of {1}"  # noqa: E501
                .format(send_frag_payload, allowed_values)
            )

        self._send_frag_payload = send_frag_payload

    @property
    def use_backend(self):
        """Gets the use_backend of this SpoeAgent.  # noqa: E501


        :return: The use_backend of this SpoeAgent.  # noqa: E501
        :rtype: str
        """
        return self._use_backend

    @use_backend.setter
    def use_backend(self, use_backend):
        """Sets the use_backend of this SpoeAgent.


        :param use_backend: The use_backend of this SpoeAgent.  # noqa: E501
        :type: str
        """

        self._use_backend = use_backend

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpoeAgent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpoeAgent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
