# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HttpCheck(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addr': 'str',
        'alpn': 'str',
        'body': 'str',
        'body_log_format': 'str',
        'check_comment': 'str',
        'default': 'bool',
        'error_status': 'str',
        'exclamation_mark': 'bool',
        'headers': 'list[ReturnHeader]',
        'index': 'int',
        'linger': 'bool',
        'match': 'str',
        'method': 'str',
        'min_recv': 'int',
        'ok_status': 'str',
        'on_error': 'str',
        'on_success': 'str',
        'pattern': 'str',
        'port': 'int',
        'port_string': 'str',
        'proto': 'str',
        'send_proxy': 'bool',
        'sni': 'str',
        'ssl': 'bool',
        'status_code': 'str',
        'tout_status': 'str',
        'type': 'str',
        'uri': 'str',
        'uri_log_format': 'str',
        'var_expr': 'str',
        'var_format': 'str',
        'var_name': 'str',
        'var_scope': 'str',
        'version': 'str',
        'via_socks4': 'bool'
    }

    attribute_map = {
        'addr': 'addr',
        'alpn': 'alpn',
        'body': 'body',
        'body_log_format': 'body_log_format',
        'check_comment': 'check_comment',
        'default': 'default',
        'error_status': 'error_status',
        'exclamation_mark': 'exclamation_mark',
        'headers': 'headers',
        'index': 'index',
        'linger': 'linger',
        'match': 'match',
        'method': 'method',
        'min_recv': 'min_recv',
        'ok_status': 'ok_status',
        'on_error': 'on_error',
        'on_success': 'on_success',
        'pattern': 'pattern',
        'port': 'port',
        'port_string': 'port_string',
        'proto': 'proto',
        'send_proxy': 'send_proxy',
        'sni': 'sni',
        'ssl': 'ssl',
        'status_code': 'status-code',
        'tout_status': 'tout_status',
        'type': 'type',
        'uri': 'uri',
        'uri_log_format': 'uri_log_format',
        'var_expr': 'var_expr',
        'var_format': 'var_format',
        'var_name': 'var_name',
        'var_scope': 'var_scope',
        'version': 'version',
        'via_socks4': 'via_socks4'
    }

    def __init__(self, addr=None, alpn=None, body=None, body_log_format=None, check_comment=None, default=None, error_status=None, exclamation_mark=None, headers=None, index=None, linger=None, match=None, method=None, min_recv=None, ok_status=None, on_error=None, on_success=None, pattern=None, port=None, port_string=None, proto=None, send_proxy=None, sni=None, ssl=None, status_code=None, tout_status=None, type=None, uri=None, uri_log_format=None, var_expr=None, var_format=None, var_name=None, var_scope=None, version=None, via_socks4=None):  # noqa: E501
        """HttpCheck - a model defined in Swagger"""  # noqa: E501
        self._addr = None
        self._alpn = None
        self._body = None
        self._body_log_format = None
        self._check_comment = None
        self._default = None
        self._error_status = None
        self._exclamation_mark = None
        self._headers = None
        self._index = None
        self._linger = None
        self._match = None
        self._method = None
        self._min_recv = None
        self._ok_status = None
        self._on_error = None
        self._on_success = None
        self._pattern = None
        self._port = None
        self._port_string = None
        self._proto = None
        self._send_proxy = None
        self._sni = None
        self._ssl = None
        self._status_code = None
        self._tout_status = None
        self._type = None
        self._uri = None
        self._uri_log_format = None
        self._var_expr = None
        self._var_format = None
        self._var_name = None
        self._var_scope = None
        self._version = None
        self._via_socks4 = None
        self.discriminator = None
        if addr is not None:
            self.addr = addr
        if alpn is not None:
            self.alpn = alpn
        if body is not None:
            self.body = body
        if body_log_format is not None:
            self.body_log_format = body_log_format
        if check_comment is not None:
            self.check_comment = check_comment
        if default is not None:
            self.default = default
        if error_status is not None:
            self.error_status = error_status
        if exclamation_mark is not None:
            self.exclamation_mark = exclamation_mark
        if headers is not None:
            self.headers = headers
        self.index = index
        if linger is not None:
            self.linger = linger
        if match is not None:
            self.match = match
        if method is not None:
            self.method = method
        if min_recv is not None:
            self.min_recv = min_recv
        if ok_status is not None:
            self.ok_status = ok_status
        if on_error is not None:
            self.on_error = on_error
        if on_success is not None:
            self.on_success = on_success
        if pattern is not None:
            self.pattern = pattern
        if port is not None:
            self.port = port
        if port_string is not None:
            self.port_string = port_string
        if proto is not None:
            self.proto = proto
        if send_proxy is not None:
            self.send_proxy = send_proxy
        if sni is not None:
            self.sni = sni
        if ssl is not None:
            self.ssl = ssl
        if status_code is not None:
            self.status_code = status_code
        if tout_status is not None:
            self.tout_status = tout_status
        self.type = type
        if uri is not None:
            self.uri = uri
        if uri_log_format is not None:
            self.uri_log_format = uri_log_format
        if var_expr is not None:
            self.var_expr = var_expr
        if var_format is not None:
            self.var_format = var_format
        if var_name is not None:
            self.var_name = var_name
        if var_scope is not None:
            self.var_scope = var_scope
        if version is not None:
            self.version = version
        if via_socks4 is not None:
            self.via_socks4 = via_socks4

    @property
    def addr(self):
        """Gets the addr of this HttpCheck.  # noqa: E501


        :return: The addr of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._addr

    @addr.setter
    def addr(self, addr):
        """Sets the addr of this HttpCheck.


        :param addr: The addr of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._addr = addr

    @property
    def alpn(self):
        """Gets the alpn of this HttpCheck.  # noqa: E501


        :return: The alpn of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._alpn

    @alpn.setter
    def alpn(self, alpn):
        """Sets the alpn of this HttpCheck.


        :param alpn: The alpn of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._alpn = alpn

    @property
    def body(self):
        """Gets the body of this HttpCheck.  # noqa: E501


        :return: The body of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this HttpCheck.


        :param body: The body of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def body_log_format(self):
        """Gets the body_log_format of this HttpCheck.  # noqa: E501


        :return: The body_log_format of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._body_log_format

    @body_log_format.setter
    def body_log_format(self, body_log_format):
        """Sets the body_log_format of this HttpCheck.


        :param body_log_format: The body_log_format of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._body_log_format = body_log_format

    @property
    def check_comment(self):
        """Gets the check_comment of this HttpCheck.  # noqa: E501


        :return: The check_comment of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._check_comment

    @check_comment.setter
    def check_comment(self, check_comment):
        """Sets the check_comment of this HttpCheck.


        :param check_comment: The check_comment of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._check_comment = check_comment

    @property
    def default(self):
        """Gets the default of this HttpCheck.  # noqa: E501


        :return: The default of this HttpCheck.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this HttpCheck.


        :param default: The default of this HttpCheck.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def error_status(self):
        """Gets the error_status of this HttpCheck.  # noqa: E501


        :return: The error_status of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._error_status

    @error_status.setter
    def error_status(self, error_status):
        """Sets the error_status of this HttpCheck.


        :param error_status: The error_status of this HttpCheck.  # noqa: E501
        :type: str
        """
        allowed_values = ["L7OKC", "L7RSP", "L7STS", "L6RSP", "L4CON"]  # noqa: E501
        if error_status not in allowed_values:
            raise ValueError(
                "Invalid value for `error_status` ({0}), must be one of {1}"  # noqa: E501
                .format(error_status, allowed_values)
            )

        self._error_status = error_status

    @property
    def exclamation_mark(self):
        """Gets the exclamation_mark of this HttpCheck.  # noqa: E501


        :return: The exclamation_mark of this HttpCheck.  # noqa: E501
        :rtype: bool
        """
        return self._exclamation_mark

    @exclamation_mark.setter
    def exclamation_mark(self, exclamation_mark):
        """Sets the exclamation_mark of this HttpCheck.


        :param exclamation_mark: The exclamation_mark of this HttpCheck.  # noqa: E501
        :type: bool
        """

        self._exclamation_mark = exclamation_mark

    @property
    def headers(self):
        """Gets the headers of this HttpCheck.  # noqa: E501


        :return: The headers of this HttpCheck.  # noqa: E501
        :rtype: list[ReturnHeader]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this HttpCheck.


        :param headers: The headers of this HttpCheck.  # noqa: E501
        :type: list[ReturnHeader]
        """

        self._headers = headers

    @property
    def index(self):
        """Gets the index of this HttpCheck.  # noqa: E501


        :return: The index of this HttpCheck.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this HttpCheck.


        :param index: The index of this HttpCheck.  # noqa: E501
        :type: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def linger(self):
        """Gets the linger of this HttpCheck.  # noqa: E501


        :return: The linger of this HttpCheck.  # noqa: E501
        :rtype: bool
        """
        return self._linger

    @linger.setter
    def linger(self, linger):
        """Sets the linger of this HttpCheck.


        :param linger: The linger of this HttpCheck.  # noqa: E501
        :type: bool
        """

        self._linger = linger

    @property
    def match(self):
        """Gets the match of this HttpCheck.  # noqa: E501


        :return: The match of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this HttpCheck.


        :param match: The match of this HttpCheck.  # noqa: E501
        :type: str
        """
        allowed_values = ["status", "rstatus", "hdr", "fhdr", "string", "rstring"]  # noqa: E501
        if match not in allowed_values:
            raise ValueError(
                "Invalid value for `match` ({0}), must be one of {1}"  # noqa: E501
                .format(match, allowed_values)
            )

        self._match = match

    @property
    def method(self):
        """Gets the method of this HttpCheck.  # noqa: E501


        :return: The method of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this HttpCheck.


        :param method: The method of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def min_recv(self):
        """Gets the min_recv of this HttpCheck.  # noqa: E501


        :return: The min_recv of this HttpCheck.  # noqa: E501
        :rtype: int
        """
        return self._min_recv

    @min_recv.setter
    def min_recv(self, min_recv):
        """Sets the min_recv of this HttpCheck.


        :param min_recv: The min_recv of this HttpCheck.  # noqa: E501
        :type: int
        """

        self._min_recv = min_recv

    @property
    def ok_status(self):
        """Gets the ok_status of this HttpCheck.  # noqa: E501


        :return: The ok_status of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._ok_status

    @ok_status.setter
    def ok_status(self, ok_status):
        """Sets the ok_status of this HttpCheck.


        :param ok_status: The ok_status of this HttpCheck.  # noqa: E501
        :type: str
        """
        allowed_values = ["L7OK", "L7OKC", "L6OK", "L4OK"]  # noqa: E501
        if ok_status not in allowed_values:
            raise ValueError(
                "Invalid value for `ok_status` ({0}), must be one of {1}"  # noqa: E501
                .format(ok_status, allowed_values)
            )

        self._ok_status = ok_status

    @property
    def on_error(self):
        """Gets the on_error of this HttpCheck.  # noqa: E501


        :return: The on_error of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._on_error

    @on_error.setter
    def on_error(self, on_error):
        """Sets the on_error of this HttpCheck.


        :param on_error: The on_error of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._on_error = on_error

    @property
    def on_success(self):
        """Gets the on_success of this HttpCheck.  # noqa: E501


        :return: The on_success of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._on_success

    @on_success.setter
    def on_success(self, on_success):
        """Sets the on_success of this HttpCheck.


        :param on_success: The on_success of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._on_success = on_success

    @property
    def pattern(self):
        """Gets the pattern of this HttpCheck.  # noqa: E501


        :return: The pattern of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this HttpCheck.


        :param pattern: The pattern of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._pattern = pattern

    @property
    def port(self):
        """Gets the port of this HttpCheck.  # noqa: E501


        :return: The port of this HttpCheck.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this HttpCheck.


        :param port: The port of this HttpCheck.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def port_string(self):
        """Gets the port_string of this HttpCheck.  # noqa: E501


        :return: The port_string of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._port_string

    @port_string.setter
    def port_string(self, port_string):
        """Sets the port_string of this HttpCheck.


        :param port_string: The port_string of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._port_string = port_string

    @property
    def proto(self):
        """Gets the proto of this HttpCheck.  # noqa: E501


        :return: The proto of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._proto

    @proto.setter
    def proto(self, proto):
        """Sets the proto of this HttpCheck.


        :param proto: The proto of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._proto = proto

    @property
    def send_proxy(self):
        """Gets the send_proxy of this HttpCheck.  # noqa: E501


        :return: The send_proxy of this HttpCheck.  # noqa: E501
        :rtype: bool
        """
        return self._send_proxy

    @send_proxy.setter
    def send_proxy(self, send_proxy):
        """Sets the send_proxy of this HttpCheck.


        :param send_proxy: The send_proxy of this HttpCheck.  # noqa: E501
        :type: bool
        """

        self._send_proxy = send_proxy

    @property
    def sni(self):
        """Gets the sni of this HttpCheck.  # noqa: E501


        :return: The sni of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._sni

    @sni.setter
    def sni(self, sni):
        """Sets the sni of this HttpCheck.


        :param sni: The sni of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._sni = sni

    @property
    def ssl(self):
        """Gets the ssl of this HttpCheck.  # noqa: E501


        :return: The ssl of this HttpCheck.  # noqa: E501
        :rtype: bool
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this HttpCheck.


        :param ssl: The ssl of this HttpCheck.  # noqa: E501
        :type: bool
        """

        self._ssl = ssl

    @property
    def status_code(self):
        """Gets the status_code of this HttpCheck.  # noqa: E501


        :return: The status_code of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this HttpCheck.


        :param status_code: The status_code of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._status_code = status_code

    @property
    def tout_status(self):
        """Gets the tout_status of this HttpCheck.  # noqa: E501


        :return: The tout_status of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._tout_status

    @tout_status.setter
    def tout_status(self, tout_status):
        """Sets the tout_status of this HttpCheck.


        :param tout_status: The tout_status of this HttpCheck.  # noqa: E501
        :type: str
        """
        allowed_values = ["L7TOUT", "L6TOUT", "L4TOUT"]  # noqa: E501
        if tout_status not in allowed_values:
            raise ValueError(
                "Invalid value for `tout_status` ({0}), must be one of {1}"  # noqa: E501
                .format(tout_status, allowed_values)
            )

        self._tout_status = tout_status

    @property
    def type(self):
        """Gets the type of this HttpCheck.  # noqa: E501


        :return: The type of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HttpCheck.


        :param type: The type of this HttpCheck.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["comment", "connect", "disable-on-404", "expect", "send", "send-state", "set-var", "set-var-fmt", "unset-var"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this HttpCheck.  # noqa: E501


        :return: The uri of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this HttpCheck.


        :param uri: The uri of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def uri_log_format(self):
        """Gets the uri_log_format of this HttpCheck.  # noqa: E501


        :return: The uri_log_format of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._uri_log_format

    @uri_log_format.setter
    def uri_log_format(self, uri_log_format):
        """Sets the uri_log_format of this HttpCheck.


        :param uri_log_format: The uri_log_format of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._uri_log_format = uri_log_format

    @property
    def var_expr(self):
        """Gets the var_expr of this HttpCheck.  # noqa: E501


        :return: The var_expr of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._var_expr

    @var_expr.setter
    def var_expr(self, var_expr):
        """Sets the var_expr of this HttpCheck.


        :param var_expr: The var_expr of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._var_expr = var_expr

    @property
    def var_format(self):
        """Gets the var_format of this HttpCheck.  # noqa: E501


        :return: The var_format of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._var_format

    @var_format.setter
    def var_format(self, var_format):
        """Sets the var_format of this HttpCheck.


        :param var_format: The var_format of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._var_format = var_format

    @property
    def var_name(self):
        """Gets the var_name of this HttpCheck.  # noqa: E501


        :return: The var_name of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._var_name

    @var_name.setter
    def var_name(self, var_name):
        """Sets the var_name of this HttpCheck.


        :param var_name: The var_name of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._var_name = var_name

    @property
    def var_scope(self):
        """Gets the var_scope of this HttpCheck.  # noqa: E501


        :return: The var_scope of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._var_scope

    @var_scope.setter
    def var_scope(self, var_scope):
        """Sets the var_scope of this HttpCheck.


        :param var_scope: The var_scope of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._var_scope = var_scope

    @property
    def version(self):
        """Gets the version of this HttpCheck.  # noqa: E501


        :return: The version of this HttpCheck.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HttpCheck.


        :param version: The version of this HttpCheck.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def via_socks4(self):
        """Gets the via_socks4 of this HttpCheck.  # noqa: E501


        :return: The via_socks4 of this HttpCheck.  # noqa: E501
        :rtype: bool
        """
        return self._via_socks4

    @via_socks4.setter
    def via_socks4(self, via_socks4):
        """Sets the via_socks4 of this HttpCheck.


        :param via_socks4: The via_socks4 of this HttpCheck.  # noqa: E501
        :type: bool
        """

        self._via_socks4 = via_socks4

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HttpCheck, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HttpCheck):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
