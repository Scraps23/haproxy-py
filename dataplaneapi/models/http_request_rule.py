# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HttpRequestRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acl_file': 'str',
        'acl_keyfmt': 'str',
        'auth_realm': 'str',
        'bandwidth_limit_limit': 'str',
        'bandwidth_limit_name': 'str',
        'bandwidth_limit_period': 'str',
        'cache_name': 'str',
        'capture_id': 'int',
        'capture_len': 'int',
        'capture_sample': 'str',
        'cond': 'str',
        'cond_test': 'str',
        'deny_status': 'int',
        'expr': 'str',
        'hdr_format': 'str',
        'hdr_match': 'str',
        'hdr_method': 'str',
        'hdr_name': 'str',
        'hint_format': 'str',
        'hint_name': 'str',
        'index': 'int',
        'log_level': 'str',
        'lua_action': 'str',
        'lua_params': 'str',
        'map_file': 'str',
        'map_keyfmt': 'str',
        'map_valuefmt': 'str',
        'mark_value': 'str',
        'method_fmt': 'str',
        'nice_value': 'int',
        'normalizer': 'str',
        'normalizer_full': 'bool',
        'normalizer_strict': 'bool',
        'path_fmt': 'str',
        'path_match': 'str',
        'protocol': 'str',
        'query_fmt': 'str',
        'redir_code': 'int',
        'redir_option': 'str',
        'redir_type': 'str',
        'redir_value': 'str',
        'resolvers': 'str',
        'return_content': 'str',
        'return_content_format': 'str',
        'return_content_type': 'str',
        'return_hdrs': 'list[ReturnHeader]',
        'return_status_code': 'int',
        'sc_expr': 'str',
        'sc_id': 'int',
        'sc_int': 'int',
        'service_name': 'str',
        'spoe_engine': 'str',
        'spoe_group': 'str',
        'strict_mode': 'str',
        'timeout': 'str',
        'timeout_type': 'str',
        'tos_value': 'str',
        'track_sc0_key': 'str',
        'track_sc0_table': 'str',
        'track_sc1_key': 'str',
        'track_sc1_table': 'str',
        'track_sc2_key': 'str',
        'track_sc2_table': 'str',
        'type': 'str',
        'uri_fmt': 'str',
        'uri_match': 'str',
        'var_expr': 'str',
        'var_format': 'str',
        'var_name': 'str',
        'var_scope': 'str',
        'wait_at_least': 'int',
        'wait_time': 'int'
    }

    attribute_map = {
        'acl_file': 'acl_file',
        'acl_keyfmt': 'acl_keyfmt',
        'auth_realm': 'auth_realm',
        'bandwidth_limit_limit': 'bandwidth_limit_limit',
        'bandwidth_limit_name': 'bandwidth_limit_name',
        'bandwidth_limit_period': 'bandwidth_limit_period',
        'cache_name': 'cache_name',
        'capture_id': 'capture_id',
        'capture_len': 'capture_len',
        'capture_sample': 'capture_sample',
        'cond': 'cond',
        'cond_test': 'cond_test',
        'deny_status': 'deny_status',
        'expr': 'expr',
        'hdr_format': 'hdr_format',
        'hdr_match': 'hdr_match',
        'hdr_method': 'hdr_method',
        'hdr_name': 'hdr_name',
        'hint_format': 'hint_format',
        'hint_name': 'hint_name',
        'index': 'index',
        'log_level': 'log_level',
        'lua_action': 'lua_action',
        'lua_params': 'lua_params',
        'map_file': 'map_file',
        'map_keyfmt': 'map_keyfmt',
        'map_valuefmt': 'map_valuefmt',
        'mark_value': 'mark_value',
        'method_fmt': 'method_fmt',
        'nice_value': 'nice_value',
        'normalizer': 'normalizer',
        'normalizer_full': 'normalizer_full',
        'normalizer_strict': 'normalizer_strict',
        'path_fmt': 'path_fmt',
        'path_match': 'path_match',
        'protocol': 'protocol',
        'query_fmt': 'query-fmt',
        'redir_code': 'redir_code',
        'redir_option': 'redir_option',
        'redir_type': 'redir_type',
        'redir_value': 'redir_value',
        'resolvers': 'resolvers',
        'return_content': 'return_content',
        'return_content_format': 'return_content_format',
        'return_content_type': 'return_content_type',
        'return_hdrs': 'return_hdrs',
        'return_status_code': 'return_status_code',
        'sc_expr': 'sc_expr',
        'sc_id': 'sc_id',
        'sc_int': 'sc_int',
        'service_name': 'service_name',
        'spoe_engine': 'spoe_engine',
        'spoe_group': 'spoe_group',
        'strict_mode': 'strict_mode',
        'timeout': 'timeout',
        'timeout_type': 'timeout_type',
        'tos_value': 'tos_value',
        'track_sc0_key': 'track-sc0-key',
        'track_sc0_table': 'track-sc0-table',
        'track_sc1_key': 'track-sc1-key',
        'track_sc1_table': 'track-sc1-table',
        'track_sc2_key': 'track-sc2-key',
        'track_sc2_table': 'track-sc2-table',
        'type': 'type',
        'uri_fmt': 'uri-fmt',
        'uri_match': 'uri-match',
        'var_expr': 'var_expr',
        'var_format': 'var_format',
        'var_name': 'var_name',
        'var_scope': 'var_scope',
        'wait_at_least': 'wait_at_least',
        'wait_time': 'wait_time'
    }

    def __init__(self, acl_file=None, acl_keyfmt=None, auth_realm=None, bandwidth_limit_limit=None, bandwidth_limit_name=None, bandwidth_limit_period=None, cache_name=None, capture_id=None, capture_len=None, capture_sample=None, cond=None, cond_test=None, deny_status=None, expr=None, hdr_format=None, hdr_match=None, hdr_method=None, hdr_name=None, hint_format=None, hint_name=None, index=None, log_level=None, lua_action=None, lua_params=None, map_file=None, map_keyfmt=None, map_valuefmt=None, mark_value=None, method_fmt=None, nice_value=None, normalizer=None, normalizer_full=None, normalizer_strict=None, path_fmt=None, path_match=None, protocol=None, query_fmt=None, redir_code=None, redir_option=None, redir_type=None, redir_value=None, resolvers=None, return_content=None, return_content_format=None, return_content_type=None, return_hdrs=None, return_status_code=None, sc_expr=None, sc_id=None, sc_int=None, service_name=None, spoe_engine=None, spoe_group=None, strict_mode=None, timeout=None, timeout_type=None, tos_value=None, track_sc0_key=None, track_sc0_table=None, track_sc1_key=None, track_sc1_table=None, track_sc2_key=None, track_sc2_table=None, type=None, uri_fmt=None, uri_match=None, var_expr=None, var_format=None, var_name=None, var_scope=None, wait_at_least=None, wait_time=None):  # noqa: E501
        """HttpRequestRule - a model defined in Swagger"""  # noqa: E501
        self._acl_file = None
        self._acl_keyfmt = None
        self._auth_realm = None
        self._bandwidth_limit_limit = None
        self._bandwidth_limit_name = None
        self._bandwidth_limit_period = None
        self._cache_name = None
        self._capture_id = None
        self._capture_len = None
        self._capture_sample = None
        self._cond = None
        self._cond_test = None
        self._deny_status = None
        self._expr = None
        self._hdr_format = None
        self._hdr_match = None
        self._hdr_method = None
        self._hdr_name = None
        self._hint_format = None
        self._hint_name = None
        self._index = None
        self._log_level = None
        self._lua_action = None
        self._lua_params = None
        self._map_file = None
        self._map_keyfmt = None
        self._map_valuefmt = None
        self._mark_value = None
        self._method_fmt = None
        self._nice_value = None
        self._normalizer = None
        self._normalizer_full = None
        self._normalizer_strict = None
        self._path_fmt = None
        self._path_match = None
        self._protocol = None
        self._query_fmt = None
        self._redir_code = None
        self._redir_option = None
        self._redir_type = None
        self._redir_value = None
        self._resolvers = None
        self._return_content = None
        self._return_content_format = None
        self._return_content_type = None
        self._return_hdrs = None
        self._return_status_code = None
        self._sc_expr = None
        self._sc_id = None
        self._sc_int = None
        self._service_name = None
        self._spoe_engine = None
        self._spoe_group = None
        self._strict_mode = None
        self._timeout = None
        self._timeout_type = None
        self._tos_value = None
        self._track_sc0_key = None
        self._track_sc0_table = None
        self._track_sc1_key = None
        self._track_sc1_table = None
        self._track_sc2_key = None
        self._track_sc2_table = None
        self._type = None
        self._uri_fmt = None
        self._uri_match = None
        self._var_expr = None
        self._var_format = None
        self._var_name = None
        self._var_scope = None
        self._wait_at_least = None
        self._wait_time = None
        self.discriminator = None
        if acl_file is not None:
            self.acl_file = acl_file
        if acl_keyfmt is not None:
            self.acl_keyfmt = acl_keyfmt
        if auth_realm is not None:
            self.auth_realm = auth_realm
        if bandwidth_limit_limit is not None:
            self.bandwidth_limit_limit = bandwidth_limit_limit
        if bandwidth_limit_name is not None:
            self.bandwidth_limit_name = bandwidth_limit_name
        if bandwidth_limit_period is not None:
            self.bandwidth_limit_period = bandwidth_limit_period
        if cache_name is not None:
            self.cache_name = cache_name
        if capture_id is not None:
            self.capture_id = capture_id
        if capture_len is not None:
            self.capture_len = capture_len
        if capture_sample is not None:
            self.capture_sample = capture_sample
        if cond is not None:
            self.cond = cond
        if cond_test is not None:
            self.cond_test = cond_test
        if deny_status is not None:
            self.deny_status = deny_status
        if expr is not None:
            self.expr = expr
        if hdr_format is not None:
            self.hdr_format = hdr_format
        if hdr_match is not None:
            self.hdr_match = hdr_match
        if hdr_method is not None:
            self.hdr_method = hdr_method
        if hdr_name is not None:
            self.hdr_name = hdr_name
        if hint_format is not None:
            self.hint_format = hint_format
        if hint_name is not None:
            self.hint_name = hint_name
        self.index = index
        if log_level is not None:
            self.log_level = log_level
        if lua_action is not None:
            self.lua_action = lua_action
        if lua_params is not None:
            self.lua_params = lua_params
        if map_file is not None:
            self.map_file = map_file
        if map_keyfmt is not None:
            self.map_keyfmt = map_keyfmt
        if map_valuefmt is not None:
            self.map_valuefmt = map_valuefmt
        if mark_value is not None:
            self.mark_value = mark_value
        if method_fmt is not None:
            self.method_fmt = method_fmt
        if nice_value is not None:
            self.nice_value = nice_value
        if normalizer is not None:
            self.normalizer = normalizer
        if normalizer_full is not None:
            self.normalizer_full = normalizer_full
        if normalizer_strict is not None:
            self.normalizer_strict = normalizer_strict
        if path_fmt is not None:
            self.path_fmt = path_fmt
        if path_match is not None:
            self.path_match = path_match
        if protocol is not None:
            self.protocol = protocol
        if query_fmt is not None:
            self.query_fmt = query_fmt
        if redir_code is not None:
            self.redir_code = redir_code
        if redir_option is not None:
            self.redir_option = redir_option
        if redir_type is not None:
            self.redir_type = redir_type
        if redir_value is not None:
            self.redir_value = redir_value
        if resolvers is not None:
            self.resolvers = resolvers
        if return_content is not None:
            self.return_content = return_content
        if return_content_format is not None:
            self.return_content_format = return_content_format
        if return_content_type is not None:
            self.return_content_type = return_content_type
        if return_hdrs is not None:
            self.return_hdrs = return_hdrs
        if return_status_code is not None:
            self.return_status_code = return_status_code
        if sc_expr is not None:
            self.sc_expr = sc_expr
        if sc_id is not None:
            self.sc_id = sc_id
        if sc_int is not None:
            self.sc_int = sc_int
        if service_name is not None:
            self.service_name = service_name
        if spoe_engine is not None:
            self.spoe_engine = spoe_engine
        if spoe_group is not None:
            self.spoe_group = spoe_group
        if strict_mode is not None:
            self.strict_mode = strict_mode
        if timeout is not None:
            self.timeout = timeout
        if timeout_type is not None:
            self.timeout_type = timeout_type
        if tos_value is not None:
            self.tos_value = tos_value
        if track_sc0_key is not None:
            self.track_sc0_key = track_sc0_key
        if track_sc0_table is not None:
            self.track_sc0_table = track_sc0_table
        if track_sc1_key is not None:
            self.track_sc1_key = track_sc1_key
        if track_sc1_table is not None:
            self.track_sc1_table = track_sc1_table
        if track_sc2_key is not None:
            self.track_sc2_key = track_sc2_key
        if track_sc2_table is not None:
            self.track_sc2_table = track_sc2_table
        self.type = type
        if uri_fmt is not None:
            self.uri_fmt = uri_fmt
        if uri_match is not None:
            self.uri_match = uri_match
        if var_expr is not None:
            self.var_expr = var_expr
        if var_format is not None:
            self.var_format = var_format
        if var_name is not None:
            self.var_name = var_name
        if var_scope is not None:
            self.var_scope = var_scope
        if wait_at_least is not None:
            self.wait_at_least = wait_at_least
        if wait_time is not None:
            self.wait_time = wait_time

    @property
    def acl_file(self):
        """Gets the acl_file of this HttpRequestRule.  # noqa: E501


        :return: The acl_file of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._acl_file

    @acl_file.setter
    def acl_file(self, acl_file):
        """Sets the acl_file of this HttpRequestRule.


        :param acl_file: The acl_file of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._acl_file = acl_file

    @property
    def acl_keyfmt(self):
        """Gets the acl_keyfmt of this HttpRequestRule.  # noqa: E501


        :return: The acl_keyfmt of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._acl_keyfmt

    @acl_keyfmt.setter
    def acl_keyfmt(self, acl_keyfmt):
        """Sets the acl_keyfmt of this HttpRequestRule.


        :param acl_keyfmt: The acl_keyfmt of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._acl_keyfmt = acl_keyfmt

    @property
    def auth_realm(self):
        """Gets the auth_realm of this HttpRequestRule.  # noqa: E501


        :return: The auth_realm of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._auth_realm

    @auth_realm.setter
    def auth_realm(self, auth_realm):
        """Sets the auth_realm of this HttpRequestRule.


        :param auth_realm: The auth_realm of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._auth_realm = auth_realm

    @property
    def bandwidth_limit_limit(self):
        """Gets the bandwidth_limit_limit of this HttpRequestRule.  # noqa: E501


        :return: The bandwidth_limit_limit of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._bandwidth_limit_limit

    @bandwidth_limit_limit.setter
    def bandwidth_limit_limit(self, bandwidth_limit_limit):
        """Sets the bandwidth_limit_limit of this HttpRequestRule.


        :param bandwidth_limit_limit: The bandwidth_limit_limit of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._bandwidth_limit_limit = bandwidth_limit_limit

    @property
    def bandwidth_limit_name(self):
        """Gets the bandwidth_limit_name of this HttpRequestRule.  # noqa: E501


        :return: The bandwidth_limit_name of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._bandwidth_limit_name

    @bandwidth_limit_name.setter
    def bandwidth_limit_name(self, bandwidth_limit_name):
        """Sets the bandwidth_limit_name of this HttpRequestRule.


        :param bandwidth_limit_name: The bandwidth_limit_name of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._bandwidth_limit_name = bandwidth_limit_name

    @property
    def bandwidth_limit_period(self):
        """Gets the bandwidth_limit_period of this HttpRequestRule.  # noqa: E501


        :return: The bandwidth_limit_period of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._bandwidth_limit_period

    @bandwidth_limit_period.setter
    def bandwidth_limit_period(self, bandwidth_limit_period):
        """Sets the bandwidth_limit_period of this HttpRequestRule.


        :param bandwidth_limit_period: The bandwidth_limit_period of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._bandwidth_limit_period = bandwidth_limit_period

    @property
    def cache_name(self):
        """Gets the cache_name of this HttpRequestRule.  # noqa: E501


        :return: The cache_name of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._cache_name

    @cache_name.setter
    def cache_name(self, cache_name):
        """Sets the cache_name of this HttpRequestRule.


        :param cache_name: The cache_name of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._cache_name = cache_name

    @property
    def capture_id(self):
        """Gets the capture_id of this HttpRequestRule.  # noqa: E501


        :return: The capture_id of this HttpRequestRule.  # noqa: E501
        :rtype: int
        """
        return self._capture_id

    @capture_id.setter
    def capture_id(self, capture_id):
        """Sets the capture_id of this HttpRequestRule.


        :param capture_id: The capture_id of this HttpRequestRule.  # noqa: E501
        :type: int
        """

        self._capture_id = capture_id

    @property
    def capture_len(self):
        """Gets the capture_len of this HttpRequestRule.  # noqa: E501


        :return: The capture_len of this HttpRequestRule.  # noqa: E501
        :rtype: int
        """
        return self._capture_len

    @capture_len.setter
    def capture_len(self, capture_len):
        """Sets the capture_len of this HttpRequestRule.


        :param capture_len: The capture_len of this HttpRequestRule.  # noqa: E501
        :type: int
        """

        self._capture_len = capture_len

    @property
    def capture_sample(self):
        """Gets the capture_sample of this HttpRequestRule.  # noqa: E501


        :return: The capture_sample of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._capture_sample

    @capture_sample.setter
    def capture_sample(self, capture_sample):
        """Sets the capture_sample of this HttpRequestRule.


        :param capture_sample: The capture_sample of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._capture_sample = capture_sample

    @property
    def cond(self):
        """Gets the cond of this HttpRequestRule.  # noqa: E501


        :return: The cond of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._cond

    @cond.setter
    def cond(self, cond):
        """Sets the cond of this HttpRequestRule.


        :param cond: The cond of this HttpRequestRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["if", "unless"]  # noqa: E501
        if cond not in allowed_values:
            raise ValueError(
                "Invalid value for `cond` ({0}), must be one of {1}"  # noqa: E501
                .format(cond, allowed_values)
            )

        self._cond = cond

    @property
    def cond_test(self):
        """Gets the cond_test of this HttpRequestRule.  # noqa: E501


        :return: The cond_test of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._cond_test

    @cond_test.setter
    def cond_test(self, cond_test):
        """Sets the cond_test of this HttpRequestRule.


        :param cond_test: The cond_test of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._cond_test = cond_test

    @property
    def deny_status(self):
        """Gets the deny_status of this HttpRequestRule.  # noqa: E501


        :return: The deny_status of this HttpRequestRule.  # noqa: E501
        :rtype: int
        """
        return self._deny_status

    @deny_status.setter
    def deny_status(self, deny_status):
        """Sets the deny_status of this HttpRequestRule.


        :param deny_status: The deny_status of this HttpRequestRule.  # noqa: E501
        :type: int
        """

        self._deny_status = deny_status

    @property
    def expr(self):
        """Gets the expr of this HttpRequestRule.  # noqa: E501


        :return: The expr of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._expr

    @expr.setter
    def expr(self, expr):
        """Sets the expr of this HttpRequestRule.


        :param expr: The expr of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._expr = expr

    @property
    def hdr_format(self):
        """Gets the hdr_format of this HttpRequestRule.  # noqa: E501


        :return: The hdr_format of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._hdr_format

    @hdr_format.setter
    def hdr_format(self, hdr_format):
        """Sets the hdr_format of this HttpRequestRule.


        :param hdr_format: The hdr_format of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._hdr_format = hdr_format

    @property
    def hdr_match(self):
        """Gets the hdr_match of this HttpRequestRule.  # noqa: E501


        :return: The hdr_match of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._hdr_match

    @hdr_match.setter
    def hdr_match(self, hdr_match):
        """Sets the hdr_match of this HttpRequestRule.


        :param hdr_match: The hdr_match of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._hdr_match = hdr_match

    @property
    def hdr_method(self):
        """Gets the hdr_method of this HttpRequestRule.  # noqa: E501


        :return: The hdr_method of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._hdr_method

    @hdr_method.setter
    def hdr_method(self, hdr_method):
        """Sets the hdr_method of this HttpRequestRule.


        :param hdr_method: The hdr_method of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._hdr_method = hdr_method

    @property
    def hdr_name(self):
        """Gets the hdr_name of this HttpRequestRule.  # noqa: E501


        :return: The hdr_name of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._hdr_name

    @hdr_name.setter
    def hdr_name(self, hdr_name):
        """Sets the hdr_name of this HttpRequestRule.


        :param hdr_name: The hdr_name of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._hdr_name = hdr_name

    @property
    def hint_format(self):
        """Gets the hint_format of this HttpRequestRule.  # noqa: E501


        :return: The hint_format of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._hint_format

    @hint_format.setter
    def hint_format(self, hint_format):
        """Sets the hint_format of this HttpRequestRule.


        :param hint_format: The hint_format of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._hint_format = hint_format

    @property
    def hint_name(self):
        """Gets the hint_name of this HttpRequestRule.  # noqa: E501


        :return: The hint_name of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._hint_name

    @hint_name.setter
    def hint_name(self, hint_name):
        """Sets the hint_name of this HttpRequestRule.


        :param hint_name: The hint_name of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._hint_name = hint_name

    @property
    def index(self):
        """Gets the index of this HttpRequestRule.  # noqa: E501


        :return: The index of this HttpRequestRule.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this HttpRequestRule.


        :param index: The index of this HttpRequestRule.  # noqa: E501
        :type: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def log_level(self):
        """Gets the log_level of this HttpRequestRule.  # noqa: E501


        :return: The log_level of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this HttpRequestRule.


        :param log_level: The log_level of this HttpRequestRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["emerg", "alert", "crit", "err", "warning", "notice", "info", "debug", "silent"]  # noqa: E501
        if log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `log_level` ({0}), must be one of {1}"  # noqa: E501
                .format(log_level, allowed_values)
            )

        self._log_level = log_level

    @property
    def lua_action(self):
        """Gets the lua_action of this HttpRequestRule.  # noqa: E501


        :return: The lua_action of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._lua_action

    @lua_action.setter
    def lua_action(self, lua_action):
        """Sets the lua_action of this HttpRequestRule.


        :param lua_action: The lua_action of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._lua_action = lua_action

    @property
    def lua_params(self):
        """Gets the lua_params of this HttpRequestRule.  # noqa: E501


        :return: The lua_params of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._lua_params

    @lua_params.setter
    def lua_params(self, lua_params):
        """Sets the lua_params of this HttpRequestRule.


        :param lua_params: The lua_params of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._lua_params = lua_params

    @property
    def map_file(self):
        """Gets the map_file of this HttpRequestRule.  # noqa: E501


        :return: The map_file of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._map_file

    @map_file.setter
    def map_file(self, map_file):
        """Sets the map_file of this HttpRequestRule.


        :param map_file: The map_file of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._map_file = map_file

    @property
    def map_keyfmt(self):
        """Gets the map_keyfmt of this HttpRequestRule.  # noqa: E501


        :return: The map_keyfmt of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._map_keyfmt

    @map_keyfmt.setter
    def map_keyfmt(self, map_keyfmt):
        """Sets the map_keyfmt of this HttpRequestRule.


        :param map_keyfmt: The map_keyfmt of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._map_keyfmt = map_keyfmt

    @property
    def map_valuefmt(self):
        """Gets the map_valuefmt of this HttpRequestRule.  # noqa: E501


        :return: The map_valuefmt of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._map_valuefmt

    @map_valuefmt.setter
    def map_valuefmt(self, map_valuefmt):
        """Sets the map_valuefmt of this HttpRequestRule.


        :param map_valuefmt: The map_valuefmt of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._map_valuefmt = map_valuefmt

    @property
    def mark_value(self):
        """Gets the mark_value of this HttpRequestRule.  # noqa: E501


        :return: The mark_value of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._mark_value

    @mark_value.setter
    def mark_value(self, mark_value):
        """Sets the mark_value of this HttpRequestRule.


        :param mark_value: The mark_value of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._mark_value = mark_value

    @property
    def method_fmt(self):
        """Gets the method_fmt of this HttpRequestRule.  # noqa: E501


        :return: The method_fmt of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._method_fmt

    @method_fmt.setter
    def method_fmt(self, method_fmt):
        """Sets the method_fmt of this HttpRequestRule.


        :param method_fmt: The method_fmt of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._method_fmt = method_fmt

    @property
    def nice_value(self):
        """Gets the nice_value of this HttpRequestRule.  # noqa: E501


        :return: The nice_value of this HttpRequestRule.  # noqa: E501
        :rtype: int
        """
        return self._nice_value

    @nice_value.setter
    def nice_value(self, nice_value):
        """Sets the nice_value of this HttpRequestRule.


        :param nice_value: The nice_value of this HttpRequestRule.  # noqa: E501
        :type: int
        """

        self._nice_value = nice_value

    @property
    def normalizer(self):
        """Gets the normalizer of this HttpRequestRule.  # noqa: E501


        :return: The normalizer of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._normalizer

    @normalizer.setter
    def normalizer(self, normalizer):
        """Sets the normalizer of this HttpRequestRule.


        :param normalizer: The normalizer of this HttpRequestRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["fragment-encode", "fragment-strip", "path-merge-slashes", "path-strip-dot", "path-strip-dotdot", "percent-decode-unreserved", "percent-to-upercase", "query-sort-by-name"]  # noqa: E501
        if normalizer not in allowed_values:
            raise ValueError(
                "Invalid value for `normalizer` ({0}), must be one of {1}"  # noqa: E501
                .format(normalizer, allowed_values)
            )

        self._normalizer = normalizer

    @property
    def normalizer_full(self):
        """Gets the normalizer_full of this HttpRequestRule.  # noqa: E501


        :return: The normalizer_full of this HttpRequestRule.  # noqa: E501
        :rtype: bool
        """
        return self._normalizer_full

    @normalizer_full.setter
    def normalizer_full(self, normalizer_full):
        """Sets the normalizer_full of this HttpRequestRule.


        :param normalizer_full: The normalizer_full of this HttpRequestRule.  # noqa: E501
        :type: bool
        """

        self._normalizer_full = normalizer_full

    @property
    def normalizer_strict(self):
        """Gets the normalizer_strict of this HttpRequestRule.  # noqa: E501


        :return: The normalizer_strict of this HttpRequestRule.  # noqa: E501
        :rtype: bool
        """
        return self._normalizer_strict

    @normalizer_strict.setter
    def normalizer_strict(self, normalizer_strict):
        """Sets the normalizer_strict of this HttpRequestRule.


        :param normalizer_strict: The normalizer_strict of this HttpRequestRule.  # noqa: E501
        :type: bool
        """

        self._normalizer_strict = normalizer_strict

    @property
    def path_fmt(self):
        """Gets the path_fmt of this HttpRequestRule.  # noqa: E501


        :return: The path_fmt of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._path_fmt

    @path_fmt.setter
    def path_fmt(self, path_fmt):
        """Sets the path_fmt of this HttpRequestRule.


        :param path_fmt: The path_fmt of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._path_fmt = path_fmt

    @property
    def path_match(self):
        """Gets the path_match of this HttpRequestRule.  # noqa: E501


        :return: The path_match of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._path_match

    @path_match.setter
    def path_match(self, path_match):
        """Sets the path_match of this HttpRequestRule.


        :param path_match: The path_match of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._path_match = path_match

    @property
    def protocol(self):
        """Gets the protocol of this HttpRequestRule.  # noqa: E501


        :return: The protocol of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this HttpRequestRule.


        :param protocol: The protocol of this HttpRequestRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["ipv4", "ipv6"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def query_fmt(self):
        """Gets the query_fmt of this HttpRequestRule.  # noqa: E501


        :return: The query_fmt of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._query_fmt

    @query_fmt.setter
    def query_fmt(self, query_fmt):
        """Sets the query_fmt of this HttpRequestRule.


        :param query_fmt: The query_fmt of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._query_fmt = query_fmt

    @property
    def redir_code(self):
        """Gets the redir_code of this HttpRequestRule.  # noqa: E501


        :return: The redir_code of this HttpRequestRule.  # noqa: E501
        :rtype: int
        """
        return self._redir_code

    @redir_code.setter
    def redir_code(self, redir_code):
        """Sets the redir_code of this HttpRequestRule.


        :param redir_code: The redir_code of this HttpRequestRule.  # noqa: E501
        :type: int
        """
        allowed_values = [301, 302, 303, 307, 308]  # noqa: E501
        if redir_code not in allowed_values:
            raise ValueError(
                "Invalid value for `redir_code` ({0}), must be one of {1}"  # noqa: E501
                .format(redir_code, allowed_values)
            )

        self._redir_code = redir_code

    @property
    def redir_option(self):
        """Gets the redir_option of this HttpRequestRule.  # noqa: E501


        :return: The redir_option of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._redir_option

    @redir_option.setter
    def redir_option(self, redir_option):
        """Sets the redir_option of this HttpRequestRule.


        :param redir_option: The redir_option of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._redir_option = redir_option

    @property
    def redir_type(self):
        """Gets the redir_type of this HttpRequestRule.  # noqa: E501


        :return: The redir_type of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._redir_type

    @redir_type.setter
    def redir_type(self, redir_type):
        """Sets the redir_type of this HttpRequestRule.


        :param redir_type: The redir_type of this HttpRequestRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["location", "prefix", "scheme"]  # noqa: E501
        if redir_type not in allowed_values:
            raise ValueError(
                "Invalid value for `redir_type` ({0}), must be one of {1}"  # noqa: E501
                .format(redir_type, allowed_values)
            )

        self._redir_type = redir_type

    @property
    def redir_value(self):
        """Gets the redir_value of this HttpRequestRule.  # noqa: E501


        :return: The redir_value of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._redir_value

    @redir_value.setter
    def redir_value(self, redir_value):
        """Sets the redir_value of this HttpRequestRule.


        :param redir_value: The redir_value of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._redir_value = redir_value

    @property
    def resolvers(self):
        """Gets the resolvers of this HttpRequestRule.  # noqa: E501


        :return: The resolvers of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._resolvers

    @resolvers.setter
    def resolvers(self, resolvers):
        """Sets the resolvers of this HttpRequestRule.


        :param resolvers: The resolvers of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._resolvers = resolvers

    @property
    def return_content(self):
        """Gets the return_content of this HttpRequestRule.  # noqa: E501


        :return: The return_content of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._return_content

    @return_content.setter
    def return_content(self, return_content):
        """Sets the return_content of this HttpRequestRule.


        :param return_content: The return_content of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._return_content = return_content

    @property
    def return_content_format(self):
        """Gets the return_content_format of this HttpRequestRule.  # noqa: E501


        :return: The return_content_format of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._return_content_format

    @return_content_format.setter
    def return_content_format(self, return_content_format):
        """Sets the return_content_format of this HttpRequestRule.


        :param return_content_format: The return_content_format of this HttpRequestRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["default-errorfile", "errorfile", "errorfiles", "file", "lf-file", "string", "lf-string"]  # noqa: E501
        if return_content_format not in allowed_values:
            raise ValueError(
                "Invalid value for `return_content_format` ({0}), must be one of {1}"  # noqa: E501
                .format(return_content_format, allowed_values)
            )

        self._return_content_format = return_content_format

    @property
    def return_content_type(self):
        """Gets the return_content_type of this HttpRequestRule.  # noqa: E501


        :return: The return_content_type of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._return_content_type

    @return_content_type.setter
    def return_content_type(self, return_content_type):
        """Sets the return_content_type of this HttpRequestRule.


        :param return_content_type: The return_content_type of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._return_content_type = return_content_type

    @property
    def return_hdrs(self):
        """Gets the return_hdrs of this HttpRequestRule.  # noqa: E501


        :return: The return_hdrs of this HttpRequestRule.  # noqa: E501
        :rtype: list[ReturnHeader]
        """
        return self._return_hdrs

    @return_hdrs.setter
    def return_hdrs(self, return_hdrs):
        """Sets the return_hdrs of this HttpRequestRule.


        :param return_hdrs: The return_hdrs of this HttpRequestRule.  # noqa: E501
        :type: list[ReturnHeader]
        """

        self._return_hdrs = return_hdrs

    @property
    def return_status_code(self):
        """Gets the return_status_code of this HttpRequestRule.  # noqa: E501


        :return: The return_status_code of this HttpRequestRule.  # noqa: E501
        :rtype: int
        """
        return self._return_status_code

    @return_status_code.setter
    def return_status_code(self, return_status_code):
        """Sets the return_status_code of this HttpRequestRule.


        :param return_status_code: The return_status_code of this HttpRequestRule.  # noqa: E501
        :type: int
        """

        self._return_status_code = return_status_code

    @property
    def sc_expr(self):
        """Gets the sc_expr of this HttpRequestRule.  # noqa: E501


        :return: The sc_expr of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._sc_expr

    @sc_expr.setter
    def sc_expr(self, sc_expr):
        """Sets the sc_expr of this HttpRequestRule.


        :param sc_expr: The sc_expr of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._sc_expr = sc_expr

    @property
    def sc_id(self):
        """Gets the sc_id of this HttpRequestRule.  # noqa: E501


        :return: The sc_id of this HttpRequestRule.  # noqa: E501
        :rtype: int
        """
        return self._sc_id

    @sc_id.setter
    def sc_id(self, sc_id):
        """Sets the sc_id of this HttpRequestRule.


        :param sc_id: The sc_id of this HttpRequestRule.  # noqa: E501
        :type: int
        """

        self._sc_id = sc_id

    @property
    def sc_int(self):
        """Gets the sc_int of this HttpRequestRule.  # noqa: E501


        :return: The sc_int of this HttpRequestRule.  # noqa: E501
        :rtype: int
        """
        return self._sc_int

    @sc_int.setter
    def sc_int(self, sc_int):
        """Sets the sc_int of this HttpRequestRule.


        :param sc_int: The sc_int of this HttpRequestRule.  # noqa: E501
        :type: int
        """

        self._sc_int = sc_int

    @property
    def service_name(self):
        """Gets the service_name of this HttpRequestRule.  # noqa: E501


        :return: The service_name of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this HttpRequestRule.


        :param service_name: The service_name of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    @property
    def spoe_engine(self):
        """Gets the spoe_engine of this HttpRequestRule.  # noqa: E501


        :return: The spoe_engine of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._spoe_engine

    @spoe_engine.setter
    def spoe_engine(self, spoe_engine):
        """Sets the spoe_engine of this HttpRequestRule.


        :param spoe_engine: The spoe_engine of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._spoe_engine = spoe_engine

    @property
    def spoe_group(self):
        """Gets the spoe_group of this HttpRequestRule.  # noqa: E501


        :return: The spoe_group of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._spoe_group

    @spoe_group.setter
    def spoe_group(self, spoe_group):
        """Sets the spoe_group of this HttpRequestRule.


        :param spoe_group: The spoe_group of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._spoe_group = spoe_group

    @property
    def strict_mode(self):
        """Gets the strict_mode of this HttpRequestRule.  # noqa: E501


        :return: The strict_mode of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._strict_mode

    @strict_mode.setter
    def strict_mode(self, strict_mode):
        """Sets the strict_mode of this HttpRequestRule.


        :param strict_mode: The strict_mode of this HttpRequestRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["on", "off"]  # noqa: E501
        if strict_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `strict_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(strict_mode, allowed_values)
            )

        self._strict_mode = strict_mode

    @property
    def timeout(self):
        """Gets the timeout of this HttpRequestRule.  # noqa: E501


        :return: The timeout of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this HttpRequestRule.


        :param timeout: The timeout of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._timeout = timeout

    @property
    def timeout_type(self):
        """Gets the timeout_type of this HttpRequestRule.  # noqa: E501


        :return: The timeout_type of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._timeout_type

    @timeout_type.setter
    def timeout_type(self, timeout_type):
        """Sets the timeout_type of this HttpRequestRule.


        :param timeout_type: The timeout_type of this HttpRequestRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["server", "tunnel"]  # noqa: E501
        if timeout_type not in allowed_values:
            raise ValueError(
                "Invalid value for `timeout_type` ({0}), must be one of {1}"  # noqa: E501
                .format(timeout_type, allowed_values)
            )

        self._timeout_type = timeout_type

    @property
    def tos_value(self):
        """Gets the tos_value of this HttpRequestRule.  # noqa: E501


        :return: The tos_value of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._tos_value

    @tos_value.setter
    def tos_value(self, tos_value):
        """Sets the tos_value of this HttpRequestRule.


        :param tos_value: The tos_value of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._tos_value = tos_value

    @property
    def track_sc0_key(self):
        """Gets the track_sc0_key of this HttpRequestRule.  # noqa: E501


        :return: The track_sc0_key of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._track_sc0_key

    @track_sc0_key.setter
    def track_sc0_key(self, track_sc0_key):
        """Sets the track_sc0_key of this HttpRequestRule.


        :param track_sc0_key: The track_sc0_key of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._track_sc0_key = track_sc0_key

    @property
    def track_sc0_table(self):
        """Gets the track_sc0_table of this HttpRequestRule.  # noqa: E501


        :return: The track_sc0_table of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._track_sc0_table

    @track_sc0_table.setter
    def track_sc0_table(self, track_sc0_table):
        """Sets the track_sc0_table of this HttpRequestRule.


        :param track_sc0_table: The track_sc0_table of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._track_sc0_table = track_sc0_table

    @property
    def track_sc1_key(self):
        """Gets the track_sc1_key of this HttpRequestRule.  # noqa: E501


        :return: The track_sc1_key of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._track_sc1_key

    @track_sc1_key.setter
    def track_sc1_key(self, track_sc1_key):
        """Sets the track_sc1_key of this HttpRequestRule.


        :param track_sc1_key: The track_sc1_key of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._track_sc1_key = track_sc1_key

    @property
    def track_sc1_table(self):
        """Gets the track_sc1_table of this HttpRequestRule.  # noqa: E501


        :return: The track_sc1_table of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._track_sc1_table

    @track_sc1_table.setter
    def track_sc1_table(self, track_sc1_table):
        """Sets the track_sc1_table of this HttpRequestRule.


        :param track_sc1_table: The track_sc1_table of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._track_sc1_table = track_sc1_table

    @property
    def track_sc2_key(self):
        """Gets the track_sc2_key of this HttpRequestRule.  # noqa: E501


        :return: The track_sc2_key of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._track_sc2_key

    @track_sc2_key.setter
    def track_sc2_key(self, track_sc2_key):
        """Sets the track_sc2_key of this HttpRequestRule.


        :param track_sc2_key: The track_sc2_key of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._track_sc2_key = track_sc2_key

    @property
    def track_sc2_table(self):
        """Gets the track_sc2_table of this HttpRequestRule.  # noqa: E501


        :return: The track_sc2_table of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._track_sc2_table

    @track_sc2_table.setter
    def track_sc2_table(self, track_sc2_table):
        """Sets the track_sc2_table of this HttpRequestRule.


        :param track_sc2_table: The track_sc2_table of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._track_sc2_table = track_sc2_table

    @property
    def type(self):
        """Gets the type of this HttpRequestRule.  # noqa: E501


        :return: The type of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HttpRequestRule.


        :param type: The type of this HttpRequestRule.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["add-acl", "add-header", "allow", "auth", "cache-use", "capture", "del-acl", "del-header", "del-map", "deny", "disable-l7-retry", "do-resolve", "early-hint", "normalize-uri", "redirect", "reject", "replace-header", "replace-path", "replace-pathq", "replace-uri", "replace-value", "return", "sc-inc-gpc0", "sc-inc-gpc1", "sc-set-gpt0", "send-spoe-group", "set-dst", "set-dst-port", "set-header", "set-log-level", "set-map", "set-mark", "set-method", "set-nice", "set-path", "set-pathq", "set-priority-class", "set-priority-offset", "set-query", "set-src", "set-src-port", "set-timeout", "set-tos", "set-uri", "set-var", "silent-drop", "strict-mode", "tarpit", "track-sc0", "track-sc1", "track-sc2", "unset-var", "use-service", "wait-for-body", "wait-for-handshake", "set-bandwidth-limit"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uri_fmt(self):
        """Gets the uri_fmt of this HttpRequestRule.  # noqa: E501


        :return: The uri_fmt of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._uri_fmt

    @uri_fmt.setter
    def uri_fmt(self, uri_fmt):
        """Sets the uri_fmt of this HttpRequestRule.


        :param uri_fmt: The uri_fmt of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._uri_fmt = uri_fmt

    @property
    def uri_match(self):
        """Gets the uri_match of this HttpRequestRule.  # noqa: E501


        :return: The uri_match of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._uri_match

    @uri_match.setter
    def uri_match(self, uri_match):
        """Sets the uri_match of this HttpRequestRule.


        :param uri_match: The uri_match of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._uri_match = uri_match

    @property
    def var_expr(self):
        """Gets the var_expr of this HttpRequestRule.  # noqa: E501


        :return: The var_expr of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._var_expr

    @var_expr.setter
    def var_expr(self, var_expr):
        """Sets the var_expr of this HttpRequestRule.


        :param var_expr: The var_expr of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._var_expr = var_expr

    @property
    def var_format(self):
        """Gets the var_format of this HttpRequestRule.  # noqa: E501


        :return: The var_format of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._var_format

    @var_format.setter
    def var_format(self, var_format):
        """Sets the var_format of this HttpRequestRule.


        :param var_format: The var_format of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._var_format = var_format

    @property
    def var_name(self):
        """Gets the var_name of this HttpRequestRule.  # noqa: E501


        :return: The var_name of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._var_name

    @var_name.setter
    def var_name(self, var_name):
        """Sets the var_name of this HttpRequestRule.


        :param var_name: The var_name of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._var_name = var_name

    @property
    def var_scope(self):
        """Gets the var_scope of this HttpRequestRule.  # noqa: E501


        :return: The var_scope of this HttpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._var_scope

    @var_scope.setter
    def var_scope(self, var_scope):
        """Sets the var_scope of this HttpRequestRule.


        :param var_scope: The var_scope of this HttpRequestRule.  # noqa: E501
        :type: str
        """

        self._var_scope = var_scope

    @property
    def wait_at_least(self):
        """Gets the wait_at_least of this HttpRequestRule.  # noqa: E501


        :return: The wait_at_least of this HttpRequestRule.  # noqa: E501
        :rtype: int
        """
        return self._wait_at_least

    @wait_at_least.setter
    def wait_at_least(self, wait_at_least):
        """Sets the wait_at_least of this HttpRequestRule.


        :param wait_at_least: The wait_at_least of this HttpRequestRule.  # noqa: E501
        :type: int
        """

        self._wait_at_least = wait_at_least

    @property
    def wait_time(self):
        """Gets the wait_time of this HttpRequestRule.  # noqa: E501


        :return: The wait_time of this HttpRequestRule.  # noqa: E501
        :rtype: int
        """
        return self._wait_time

    @wait_time.setter
    def wait_time(self, wait_time):
        """Sets the wait_time of this HttpRequestRule.


        :param wait_time: The wait_time of this HttpRequestRule.  # noqa: E501
        :type: int
        """

        self._wait_time = wait_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HttpRequestRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HttpRequestRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
