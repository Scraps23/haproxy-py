# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Balance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'algorithm': 'str',
        'hash_expression': 'str',
        'hdr_name': 'str',
        'hdr_use_domain_only': 'bool',
        'random_draws': 'int',
        'rdp_cookie_name': 'str',
        'uri_depth': 'int',
        'uri_len': 'int',
        'uri_path_only': 'bool',
        'uri_whole': 'bool',
        'url_param': 'str',
        'url_param_check_post': 'int',
        'url_param_max_wait': 'int'
    }

    attribute_map = {
        'algorithm': 'algorithm',
        'hash_expression': 'hash_expression',
        'hdr_name': 'hdr_name',
        'hdr_use_domain_only': 'hdr_use_domain_only',
        'random_draws': 'random_draws',
        'rdp_cookie_name': 'rdp_cookie_name',
        'uri_depth': 'uri_depth',
        'uri_len': 'uri_len',
        'uri_path_only': 'uri_path_only',
        'uri_whole': 'uri_whole',
        'url_param': 'url_param',
        'url_param_check_post': 'url_param_check_post',
        'url_param_max_wait': 'url_param_max_wait'
    }

    def __init__(self, algorithm=None, hash_expression=None, hdr_name=None, hdr_use_domain_only=None, random_draws=None, rdp_cookie_name=None, uri_depth=None, uri_len=None, uri_path_only=None, uri_whole=None, url_param=None, url_param_check_post=None, url_param_max_wait=None):  # noqa: E501
        """Balance - a model defined in Swagger"""  # noqa: E501
        self._algorithm = None
        self._hash_expression = None
        self._hdr_name = None
        self._hdr_use_domain_only = None
        self._random_draws = None
        self._rdp_cookie_name = None
        self._uri_depth = None
        self._uri_len = None
        self._uri_path_only = None
        self._uri_whole = None
        self._url_param = None
        self._url_param_check_post = None
        self._url_param_max_wait = None
        self.discriminator = None
        self.algorithm = algorithm
        if hash_expression is not None:
            self.hash_expression = hash_expression
        if hdr_name is not None:
            self.hdr_name = hdr_name
        if hdr_use_domain_only is not None:
            self.hdr_use_domain_only = hdr_use_domain_only
        if random_draws is not None:
            self.random_draws = random_draws
        if rdp_cookie_name is not None:
            self.rdp_cookie_name = rdp_cookie_name
        if uri_depth is not None:
            self.uri_depth = uri_depth
        if uri_len is not None:
            self.uri_len = uri_len
        if uri_path_only is not None:
            self.uri_path_only = uri_path_only
        if uri_whole is not None:
            self.uri_whole = uri_whole
        if url_param is not None:
            self.url_param = url_param
        if url_param_check_post is not None:
            self.url_param_check_post = url_param_check_post
        if url_param_max_wait is not None:
            self.url_param_max_wait = url_param_max_wait

    @property
    def algorithm(self):
        """Gets the algorithm of this Balance.  # noqa: E501


        :return: The algorithm of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this Balance.


        :param algorithm: The algorithm of this Balance.  # noqa: E501
        :type: str
        """
        if algorithm is None:
            raise ValueError("Invalid value for `algorithm`, must not be `None`")  # noqa: E501
        allowed_values = ["roundrobin", "static-rr", "leastconn", "first", "source", "uri", "url_param", "hdr", "random", "rdp-cookie", "hash"]  # noqa: E501
        if algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def hash_expression(self):
        """Gets the hash_expression of this Balance.  # noqa: E501


        :return: The hash_expression of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._hash_expression

    @hash_expression.setter
    def hash_expression(self, hash_expression):
        """Sets the hash_expression of this Balance.


        :param hash_expression: The hash_expression of this Balance.  # noqa: E501
        :type: str
        """

        self._hash_expression = hash_expression

    @property
    def hdr_name(self):
        """Gets the hdr_name of this Balance.  # noqa: E501


        :return: The hdr_name of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._hdr_name

    @hdr_name.setter
    def hdr_name(self, hdr_name):
        """Sets the hdr_name of this Balance.


        :param hdr_name: The hdr_name of this Balance.  # noqa: E501
        :type: str
        """

        self._hdr_name = hdr_name

    @property
    def hdr_use_domain_only(self):
        """Gets the hdr_use_domain_only of this Balance.  # noqa: E501


        :return: The hdr_use_domain_only of this Balance.  # noqa: E501
        :rtype: bool
        """
        return self._hdr_use_domain_only

    @hdr_use_domain_only.setter
    def hdr_use_domain_only(self, hdr_use_domain_only):
        """Sets the hdr_use_domain_only of this Balance.


        :param hdr_use_domain_only: The hdr_use_domain_only of this Balance.  # noqa: E501
        :type: bool
        """

        self._hdr_use_domain_only = hdr_use_domain_only

    @property
    def random_draws(self):
        """Gets the random_draws of this Balance.  # noqa: E501


        :return: The random_draws of this Balance.  # noqa: E501
        :rtype: int
        """
        return self._random_draws

    @random_draws.setter
    def random_draws(self, random_draws):
        """Sets the random_draws of this Balance.


        :param random_draws: The random_draws of this Balance.  # noqa: E501
        :type: int
        """

        self._random_draws = random_draws

    @property
    def rdp_cookie_name(self):
        """Gets the rdp_cookie_name of this Balance.  # noqa: E501


        :return: The rdp_cookie_name of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._rdp_cookie_name

    @rdp_cookie_name.setter
    def rdp_cookie_name(self, rdp_cookie_name):
        """Sets the rdp_cookie_name of this Balance.


        :param rdp_cookie_name: The rdp_cookie_name of this Balance.  # noqa: E501
        :type: str
        """

        self._rdp_cookie_name = rdp_cookie_name

    @property
    def uri_depth(self):
        """Gets the uri_depth of this Balance.  # noqa: E501


        :return: The uri_depth of this Balance.  # noqa: E501
        :rtype: int
        """
        return self._uri_depth

    @uri_depth.setter
    def uri_depth(self, uri_depth):
        """Sets the uri_depth of this Balance.


        :param uri_depth: The uri_depth of this Balance.  # noqa: E501
        :type: int
        """

        self._uri_depth = uri_depth

    @property
    def uri_len(self):
        """Gets the uri_len of this Balance.  # noqa: E501


        :return: The uri_len of this Balance.  # noqa: E501
        :rtype: int
        """
        return self._uri_len

    @uri_len.setter
    def uri_len(self, uri_len):
        """Sets the uri_len of this Balance.


        :param uri_len: The uri_len of this Balance.  # noqa: E501
        :type: int
        """

        self._uri_len = uri_len

    @property
    def uri_path_only(self):
        """Gets the uri_path_only of this Balance.  # noqa: E501


        :return: The uri_path_only of this Balance.  # noqa: E501
        :rtype: bool
        """
        return self._uri_path_only

    @uri_path_only.setter
    def uri_path_only(self, uri_path_only):
        """Sets the uri_path_only of this Balance.


        :param uri_path_only: The uri_path_only of this Balance.  # noqa: E501
        :type: bool
        """

        self._uri_path_only = uri_path_only

    @property
    def uri_whole(self):
        """Gets the uri_whole of this Balance.  # noqa: E501


        :return: The uri_whole of this Balance.  # noqa: E501
        :rtype: bool
        """
        return self._uri_whole

    @uri_whole.setter
    def uri_whole(self, uri_whole):
        """Sets the uri_whole of this Balance.


        :param uri_whole: The uri_whole of this Balance.  # noqa: E501
        :type: bool
        """

        self._uri_whole = uri_whole

    @property
    def url_param(self):
        """Gets the url_param of this Balance.  # noqa: E501


        :return: The url_param of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._url_param

    @url_param.setter
    def url_param(self, url_param):
        """Sets the url_param of this Balance.


        :param url_param: The url_param of this Balance.  # noqa: E501
        :type: str
        """

        self._url_param = url_param

    @property
    def url_param_check_post(self):
        """Gets the url_param_check_post of this Balance.  # noqa: E501


        :return: The url_param_check_post of this Balance.  # noqa: E501
        :rtype: int
        """
        return self._url_param_check_post

    @url_param_check_post.setter
    def url_param_check_post(self, url_param_check_post):
        """Sets the url_param_check_post of this Balance.


        :param url_param_check_post: The url_param_check_post of this Balance.  # noqa: E501
        :type: int
        """

        self._url_param_check_post = url_param_check_post

    @property
    def url_param_max_wait(self):
        """Gets the url_param_max_wait of this Balance.  # noqa: E501


        :return: The url_param_max_wait of this Balance.  # noqa: E501
        :rtype: int
        """
        return self._url_param_max_wait

    @url_param_max_wait.setter
    def url_param_max_wait(self, url_param_max_wait):
        """Sets the url_param_max_wait of this Balance.


        :param url_param_max_wait: The url_param_max_wait of this Balance.  # noqa: E501
        :type: int
        """

        self._url_param_max_wait = url_param_max_wait

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Balance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Balance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
