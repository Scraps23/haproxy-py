# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PeerEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'name': 'str',
        'port': 'int',
        'shard': 'int'
    }

    attribute_map = {
        'address': 'address',
        'name': 'name',
        'port': 'port',
        'shard': 'shard'
    }

    def __init__(self, address=None, name=None, port=None, shard=None):  # noqa: E501
        """PeerEntry - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._name = None
        self._port = None
        self._shard = None
        self.discriminator = None
        self.address = address
        self.name = name
        self.port = port
        if shard is not None:
            self.shard = shard

    @property
    def address(self):
        """Gets the address of this PeerEntry.  # noqa: E501


        :return: The address of this PeerEntry.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PeerEntry.


        :param address: The address of this PeerEntry.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def name(self):
        """Gets the name of this PeerEntry.  # noqa: E501


        :return: The name of this PeerEntry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PeerEntry.


        :param name: The name of this PeerEntry.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def port(self):
        """Gets the port of this PeerEntry.  # noqa: E501


        :return: The port of this PeerEntry.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this PeerEntry.


        :param port: The port of this PeerEntry.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def shard(self):
        """Gets the shard of this PeerEntry.  # noqa: E501


        :return: The shard of this PeerEntry.  # noqa: E501
        :rtype: int
        """
        return self._shard

    @shard.setter
    def shard(self, shard):
        """Sets the shard of this PeerEntry.


        :param shard: The shard of this PeerEntry.  # noqa: E501
        :type: int
        """

        self._shard = shard

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PeerEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeerEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
