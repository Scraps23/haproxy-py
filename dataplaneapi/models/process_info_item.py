# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProcessInfoItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_peers': 'int',
        'busy_polling': 'int',
        'bytes_out_rate': 'int',
        'compress_bps_in': 'int',
        'compress_bps_out': 'int',
        'compress_bps_rate_lim': 'int',
        'conn_rate': 'int',
        'conn_rate_limit': 'int',
        'connected_peers': 'int',
        'cum_conns': 'int',
        'cum_req': 'int',
        'cum_ssl_conns': 'int',
        'curr_conns': 'int',
        'curr_ssl_conns': 'int',
        'dropped_logs': 'int',
        'failed_resolutions': 'int',
        'hard_max_conn': 'int',
        'idle_pct': 'int',
        'jobs': 'int',
        'listeners': 'int',
        'max_conn': 'int',
        'max_conn_rate': 'int',
        'max_pipes': 'int',
        'max_sess_rate': 'int',
        'max_sock': 'int',
        'max_ssl_conns': 'int',
        'max_ssl_rate': 'int',
        'max_zlib_mem_usage': 'int',
        'mem_max_mb': 'int',
        'nbthread': 'int',
        'node': 'str',
        'pid': 'int',
        'pipes_free': 'int',
        'pipes_used': 'int',
        'pool_alloc_mb': 'int',
        'pool_failed': 'int',
        'pool_used_mb': 'int',
        'process_num': 'int',
        'processes': 'int',
        'release_date': 'date',
        'run_queue': 'int',
        'sess_rate': 'int',
        'sess_rate_limit': 'int',
        'ssl_backend_key_rate': 'int',
        'ssl_backend_max_key_rate': 'int',
        'ssl_cache_lookups': 'int',
        'ssl_cache_misses': 'int',
        'ssl_frontend_key_rate': 'int',
        'ssl_frontend_max_key_rate': 'int',
        'ssl_frontend_session_reuse': 'int',
        'ssl_rate': 'int',
        'ssl_rate_limit': 'int',
        'stopping': 'int',
        'tasks': 'int',
        'total_bytes_out': 'int',
        'ulimit_n': 'int',
        'unstoppable': 'int',
        'uptime': 'int',
        'version': 'str',
        'zlib_mem_usage': 'int'
    }

    attribute_map = {
        'active_peers': 'active_peers',
        'busy_polling': 'busy_polling',
        'bytes_out_rate': 'bytes_out_rate',
        'compress_bps_in': 'compress_bps_in',
        'compress_bps_out': 'compress_bps_out',
        'compress_bps_rate_lim': 'compress_bps_rate_lim',
        'conn_rate': 'conn_rate',
        'conn_rate_limit': 'conn_rate_limit',
        'connected_peers': 'connected_peers',
        'cum_conns': 'cum_conns',
        'cum_req': 'cum_req',
        'cum_ssl_conns': 'cum_ssl_conns',
        'curr_conns': 'curr_conns',
        'curr_ssl_conns': 'curr_ssl_conns',
        'dropped_logs': 'dropped_logs',
        'failed_resolutions': 'failed_resolutions',
        'hard_max_conn': 'hard_max_conn',
        'idle_pct': 'idle_pct',
        'jobs': 'jobs',
        'listeners': 'listeners',
        'max_conn': 'max_conn',
        'max_conn_rate': 'max_conn_rate',
        'max_pipes': 'max_pipes',
        'max_sess_rate': 'max_sess_rate',
        'max_sock': 'max_sock',
        'max_ssl_conns': 'max_ssl_conns',
        'max_ssl_rate': 'max_ssl_rate',
        'max_zlib_mem_usage': 'max_zlib_mem_usage',
        'mem_max_mb': 'mem_max_mb',
        'nbthread': 'nbthread',
        'node': 'node',
        'pid': 'pid',
        'pipes_free': 'pipes_free',
        'pipes_used': 'pipes_used',
        'pool_alloc_mb': 'pool_alloc_mb',
        'pool_failed': 'pool_failed',
        'pool_used_mb': 'pool_used_mb',
        'process_num': 'process_num',
        'processes': 'processes',
        'release_date': 'release_date',
        'run_queue': 'run_queue',
        'sess_rate': 'sess_rate',
        'sess_rate_limit': 'sess_rate_limit',
        'ssl_backend_key_rate': 'ssl_backend_key_rate',
        'ssl_backend_max_key_rate': 'ssl_backend_max_key_rate',
        'ssl_cache_lookups': 'ssl_cache_lookups',
        'ssl_cache_misses': 'ssl_cache_misses',
        'ssl_frontend_key_rate': 'ssl_frontend_key_rate',
        'ssl_frontend_max_key_rate': 'ssl_frontend_max_key_rate',
        'ssl_frontend_session_reuse': 'ssl_frontend_session_reuse',
        'ssl_rate': 'ssl_rate',
        'ssl_rate_limit': 'ssl_rate_limit',
        'stopping': 'stopping',
        'tasks': 'tasks',
        'total_bytes_out': 'total_bytes_out',
        'ulimit_n': 'ulimit_n',
        'unstoppable': 'unstoppable',
        'uptime': 'uptime',
        'version': 'version',
        'zlib_mem_usage': 'zlib_mem_usage'
    }

    def __init__(self, active_peers=None, busy_polling=None, bytes_out_rate=None, compress_bps_in=None, compress_bps_out=None, compress_bps_rate_lim=None, conn_rate=None, conn_rate_limit=None, connected_peers=None, cum_conns=None, cum_req=None, cum_ssl_conns=None, curr_conns=None, curr_ssl_conns=None, dropped_logs=None, failed_resolutions=None, hard_max_conn=None, idle_pct=None, jobs=None, listeners=None, max_conn=None, max_conn_rate=None, max_pipes=None, max_sess_rate=None, max_sock=None, max_ssl_conns=None, max_ssl_rate=None, max_zlib_mem_usage=None, mem_max_mb=None, nbthread=None, node=None, pid=None, pipes_free=None, pipes_used=None, pool_alloc_mb=None, pool_failed=None, pool_used_mb=None, process_num=None, processes=None, release_date=None, run_queue=None, sess_rate=None, sess_rate_limit=None, ssl_backend_key_rate=None, ssl_backend_max_key_rate=None, ssl_cache_lookups=None, ssl_cache_misses=None, ssl_frontend_key_rate=None, ssl_frontend_max_key_rate=None, ssl_frontend_session_reuse=None, ssl_rate=None, ssl_rate_limit=None, stopping=None, tasks=None, total_bytes_out=None, ulimit_n=None, unstoppable=None, uptime=None, version=None, zlib_mem_usage=None):  # noqa: E501
        """ProcessInfoItem - a model defined in Swagger"""  # noqa: E501
        self._active_peers = None
        self._busy_polling = None
        self._bytes_out_rate = None
        self._compress_bps_in = None
        self._compress_bps_out = None
        self._compress_bps_rate_lim = None
        self._conn_rate = None
        self._conn_rate_limit = None
        self._connected_peers = None
        self._cum_conns = None
        self._cum_req = None
        self._cum_ssl_conns = None
        self._curr_conns = None
        self._curr_ssl_conns = None
        self._dropped_logs = None
        self._failed_resolutions = None
        self._hard_max_conn = None
        self._idle_pct = None
        self._jobs = None
        self._listeners = None
        self._max_conn = None
        self._max_conn_rate = None
        self._max_pipes = None
        self._max_sess_rate = None
        self._max_sock = None
        self._max_ssl_conns = None
        self._max_ssl_rate = None
        self._max_zlib_mem_usage = None
        self._mem_max_mb = None
        self._nbthread = None
        self._node = None
        self._pid = None
        self._pipes_free = None
        self._pipes_used = None
        self._pool_alloc_mb = None
        self._pool_failed = None
        self._pool_used_mb = None
        self._process_num = None
        self._processes = None
        self._release_date = None
        self._run_queue = None
        self._sess_rate = None
        self._sess_rate_limit = None
        self._ssl_backend_key_rate = None
        self._ssl_backend_max_key_rate = None
        self._ssl_cache_lookups = None
        self._ssl_cache_misses = None
        self._ssl_frontend_key_rate = None
        self._ssl_frontend_max_key_rate = None
        self._ssl_frontend_session_reuse = None
        self._ssl_rate = None
        self._ssl_rate_limit = None
        self._stopping = None
        self._tasks = None
        self._total_bytes_out = None
        self._ulimit_n = None
        self._unstoppable = None
        self._uptime = None
        self._version = None
        self._zlib_mem_usage = None
        self.discriminator = None
        if active_peers is not None:
            self.active_peers = active_peers
        if busy_polling is not None:
            self.busy_polling = busy_polling
        if bytes_out_rate is not None:
            self.bytes_out_rate = bytes_out_rate
        if compress_bps_in is not None:
            self.compress_bps_in = compress_bps_in
        if compress_bps_out is not None:
            self.compress_bps_out = compress_bps_out
        if compress_bps_rate_lim is not None:
            self.compress_bps_rate_lim = compress_bps_rate_lim
        if conn_rate is not None:
            self.conn_rate = conn_rate
        if conn_rate_limit is not None:
            self.conn_rate_limit = conn_rate_limit
        if connected_peers is not None:
            self.connected_peers = connected_peers
        if cum_conns is not None:
            self.cum_conns = cum_conns
        if cum_req is not None:
            self.cum_req = cum_req
        if cum_ssl_conns is not None:
            self.cum_ssl_conns = cum_ssl_conns
        if curr_conns is not None:
            self.curr_conns = curr_conns
        if curr_ssl_conns is not None:
            self.curr_ssl_conns = curr_ssl_conns
        if dropped_logs is not None:
            self.dropped_logs = dropped_logs
        if failed_resolutions is not None:
            self.failed_resolutions = failed_resolutions
        if hard_max_conn is not None:
            self.hard_max_conn = hard_max_conn
        if idle_pct is not None:
            self.idle_pct = idle_pct
        if jobs is not None:
            self.jobs = jobs
        if listeners is not None:
            self.listeners = listeners
        if max_conn is not None:
            self.max_conn = max_conn
        if max_conn_rate is not None:
            self.max_conn_rate = max_conn_rate
        if max_pipes is not None:
            self.max_pipes = max_pipes
        if max_sess_rate is not None:
            self.max_sess_rate = max_sess_rate
        if max_sock is not None:
            self.max_sock = max_sock
        if max_ssl_conns is not None:
            self.max_ssl_conns = max_ssl_conns
        if max_ssl_rate is not None:
            self.max_ssl_rate = max_ssl_rate
        if max_zlib_mem_usage is not None:
            self.max_zlib_mem_usage = max_zlib_mem_usage
        if mem_max_mb is not None:
            self.mem_max_mb = mem_max_mb
        if nbthread is not None:
            self.nbthread = nbthread
        if node is not None:
            self.node = node
        if pid is not None:
            self.pid = pid
        if pipes_free is not None:
            self.pipes_free = pipes_free
        if pipes_used is not None:
            self.pipes_used = pipes_used
        if pool_alloc_mb is not None:
            self.pool_alloc_mb = pool_alloc_mb
        if pool_failed is not None:
            self.pool_failed = pool_failed
        if pool_used_mb is not None:
            self.pool_used_mb = pool_used_mb
        if process_num is not None:
            self.process_num = process_num
        if processes is not None:
            self.processes = processes
        if release_date is not None:
            self.release_date = release_date
        if run_queue is not None:
            self.run_queue = run_queue
        if sess_rate is not None:
            self.sess_rate = sess_rate
        if sess_rate_limit is not None:
            self.sess_rate_limit = sess_rate_limit
        if ssl_backend_key_rate is not None:
            self.ssl_backend_key_rate = ssl_backend_key_rate
        if ssl_backend_max_key_rate is not None:
            self.ssl_backend_max_key_rate = ssl_backend_max_key_rate
        if ssl_cache_lookups is not None:
            self.ssl_cache_lookups = ssl_cache_lookups
        if ssl_cache_misses is not None:
            self.ssl_cache_misses = ssl_cache_misses
        if ssl_frontend_key_rate is not None:
            self.ssl_frontend_key_rate = ssl_frontend_key_rate
        if ssl_frontend_max_key_rate is not None:
            self.ssl_frontend_max_key_rate = ssl_frontend_max_key_rate
        if ssl_frontend_session_reuse is not None:
            self.ssl_frontend_session_reuse = ssl_frontend_session_reuse
        if ssl_rate is not None:
            self.ssl_rate = ssl_rate
        if ssl_rate_limit is not None:
            self.ssl_rate_limit = ssl_rate_limit
        if stopping is not None:
            self.stopping = stopping
        if tasks is not None:
            self.tasks = tasks
        if total_bytes_out is not None:
            self.total_bytes_out = total_bytes_out
        if ulimit_n is not None:
            self.ulimit_n = ulimit_n
        if unstoppable is not None:
            self.unstoppable = unstoppable
        if uptime is not None:
            self.uptime = uptime
        if version is not None:
            self.version = version
        if zlib_mem_usage is not None:
            self.zlib_mem_usage = zlib_mem_usage

    @property
    def active_peers(self):
        """Gets the active_peers of this ProcessInfoItem.  # noqa: E501


        :return: The active_peers of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._active_peers

    @active_peers.setter
    def active_peers(self, active_peers):
        """Sets the active_peers of this ProcessInfoItem.


        :param active_peers: The active_peers of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._active_peers = active_peers

    @property
    def busy_polling(self):
        """Gets the busy_polling of this ProcessInfoItem.  # noqa: E501


        :return: The busy_polling of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._busy_polling

    @busy_polling.setter
    def busy_polling(self, busy_polling):
        """Sets the busy_polling of this ProcessInfoItem.


        :param busy_polling: The busy_polling of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._busy_polling = busy_polling

    @property
    def bytes_out_rate(self):
        """Gets the bytes_out_rate of this ProcessInfoItem.  # noqa: E501


        :return: The bytes_out_rate of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._bytes_out_rate

    @bytes_out_rate.setter
    def bytes_out_rate(self, bytes_out_rate):
        """Sets the bytes_out_rate of this ProcessInfoItem.


        :param bytes_out_rate: The bytes_out_rate of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._bytes_out_rate = bytes_out_rate

    @property
    def compress_bps_in(self):
        """Gets the compress_bps_in of this ProcessInfoItem.  # noqa: E501


        :return: The compress_bps_in of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._compress_bps_in

    @compress_bps_in.setter
    def compress_bps_in(self, compress_bps_in):
        """Sets the compress_bps_in of this ProcessInfoItem.


        :param compress_bps_in: The compress_bps_in of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._compress_bps_in = compress_bps_in

    @property
    def compress_bps_out(self):
        """Gets the compress_bps_out of this ProcessInfoItem.  # noqa: E501


        :return: The compress_bps_out of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._compress_bps_out

    @compress_bps_out.setter
    def compress_bps_out(self, compress_bps_out):
        """Sets the compress_bps_out of this ProcessInfoItem.


        :param compress_bps_out: The compress_bps_out of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._compress_bps_out = compress_bps_out

    @property
    def compress_bps_rate_lim(self):
        """Gets the compress_bps_rate_lim of this ProcessInfoItem.  # noqa: E501


        :return: The compress_bps_rate_lim of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._compress_bps_rate_lim

    @compress_bps_rate_lim.setter
    def compress_bps_rate_lim(self, compress_bps_rate_lim):
        """Sets the compress_bps_rate_lim of this ProcessInfoItem.


        :param compress_bps_rate_lim: The compress_bps_rate_lim of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._compress_bps_rate_lim = compress_bps_rate_lim

    @property
    def conn_rate(self):
        """Gets the conn_rate of this ProcessInfoItem.  # noqa: E501


        :return: The conn_rate of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._conn_rate

    @conn_rate.setter
    def conn_rate(self, conn_rate):
        """Sets the conn_rate of this ProcessInfoItem.


        :param conn_rate: The conn_rate of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._conn_rate = conn_rate

    @property
    def conn_rate_limit(self):
        """Gets the conn_rate_limit of this ProcessInfoItem.  # noqa: E501


        :return: The conn_rate_limit of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._conn_rate_limit

    @conn_rate_limit.setter
    def conn_rate_limit(self, conn_rate_limit):
        """Sets the conn_rate_limit of this ProcessInfoItem.


        :param conn_rate_limit: The conn_rate_limit of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._conn_rate_limit = conn_rate_limit

    @property
    def connected_peers(self):
        """Gets the connected_peers of this ProcessInfoItem.  # noqa: E501


        :return: The connected_peers of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._connected_peers

    @connected_peers.setter
    def connected_peers(self, connected_peers):
        """Sets the connected_peers of this ProcessInfoItem.


        :param connected_peers: The connected_peers of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._connected_peers = connected_peers

    @property
    def cum_conns(self):
        """Gets the cum_conns of this ProcessInfoItem.  # noqa: E501


        :return: The cum_conns of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._cum_conns

    @cum_conns.setter
    def cum_conns(self, cum_conns):
        """Sets the cum_conns of this ProcessInfoItem.


        :param cum_conns: The cum_conns of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._cum_conns = cum_conns

    @property
    def cum_req(self):
        """Gets the cum_req of this ProcessInfoItem.  # noqa: E501


        :return: The cum_req of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._cum_req

    @cum_req.setter
    def cum_req(self, cum_req):
        """Sets the cum_req of this ProcessInfoItem.


        :param cum_req: The cum_req of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._cum_req = cum_req

    @property
    def cum_ssl_conns(self):
        """Gets the cum_ssl_conns of this ProcessInfoItem.  # noqa: E501


        :return: The cum_ssl_conns of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._cum_ssl_conns

    @cum_ssl_conns.setter
    def cum_ssl_conns(self, cum_ssl_conns):
        """Sets the cum_ssl_conns of this ProcessInfoItem.


        :param cum_ssl_conns: The cum_ssl_conns of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._cum_ssl_conns = cum_ssl_conns

    @property
    def curr_conns(self):
        """Gets the curr_conns of this ProcessInfoItem.  # noqa: E501


        :return: The curr_conns of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._curr_conns

    @curr_conns.setter
    def curr_conns(self, curr_conns):
        """Sets the curr_conns of this ProcessInfoItem.


        :param curr_conns: The curr_conns of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._curr_conns = curr_conns

    @property
    def curr_ssl_conns(self):
        """Gets the curr_ssl_conns of this ProcessInfoItem.  # noqa: E501


        :return: The curr_ssl_conns of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._curr_ssl_conns

    @curr_ssl_conns.setter
    def curr_ssl_conns(self, curr_ssl_conns):
        """Sets the curr_ssl_conns of this ProcessInfoItem.


        :param curr_ssl_conns: The curr_ssl_conns of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._curr_ssl_conns = curr_ssl_conns

    @property
    def dropped_logs(self):
        """Gets the dropped_logs of this ProcessInfoItem.  # noqa: E501


        :return: The dropped_logs of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._dropped_logs

    @dropped_logs.setter
    def dropped_logs(self, dropped_logs):
        """Sets the dropped_logs of this ProcessInfoItem.


        :param dropped_logs: The dropped_logs of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._dropped_logs = dropped_logs

    @property
    def failed_resolutions(self):
        """Gets the failed_resolutions of this ProcessInfoItem.  # noqa: E501


        :return: The failed_resolutions of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._failed_resolutions

    @failed_resolutions.setter
    def failed_resolutions(self, failed_resolutions):
        """Sets the failed_resolutions of this ProcessInfoItem.


        :param failed_resolutions: The failed_resolutions of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._failed_resolutions = failed_resolutions

    @property
    def hard_max_conn(self):
        """Gets the hard_max_conn of this ProcessInfoItem.  # noqa: E501


        :return: The hard_max_conn of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._hard_max_conn

    @hard_max_conn.setter
    def hard_max_conn(self, hard_max_conn):
        """Sets the hard_max_conn of this ProcessInfoItem.


        :param hard_max_conn: The hard_max_conn of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._hard_max_conn = hard_max_conn

    @property
    def idle_pct(self):
        """Gets the idle_pct of this ProcessInfoItem.  # noqa: E501


        :return: The idle_pct of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._idle_pct

    @idle_pct.setter
    def idle_pct(self, idle_pct):
        """Sets the idle_pct of this ProcessInfoItem.


        :param idle_pct: The idle_pct of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._idle_pct = idle_pct

    @property
    def jobs(self):
        """Gets the jobs of this ProcessInfoItem.  # noqa: E501


        :return: The jobs of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this ProcessInfoItem.


        :param jobs: The jobs of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._jobs = jobs

    @property
    def listeners(self):
        """Gets the listeners of this ProcessInfoItem.  # noqa: E501


        :return: The listeners of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._listeners

    @listeners.setter
    def listeners(self, listeners):
        """Sets the listeners of this ProcessInfoItem.


        :param listeners: The listeners of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._listeners = listeners

    @property
    def max_conn(self):
        """Gets the max_conn of this ProcessInfoItem.  # noqa: E501


        :return: The max_conn of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._max_conn

    @max_conn.setter
    def max_conn(self, max_conn):
        """Sets the max_conn of this ProcessInfoItem.


        :param max_conn: The max_conn of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._max_conn = max_conn

    @property
    def max_conn_rate(self):
        """Gets the max_conn_rate of this ProcessInfoItem.  # noqa: E501


        :return: The max_conn_rate of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._max_conn_rate

    @max_conn_rate.setter
    def max_conn_rate(self, max_conn_rate):
        """Sets the max_conn_rate of this ProcessInfoItem.


        :param max_conn_rate: The max_conn_rate of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._max_conn_rate = max_conn_rate

    @property
    def max_pipes(self):
        """Gets the max_pipes of this ProcessInfoItem.  # noqa: E501


        :return: The max_pipes of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._max_pipes

    @max_pipes.setter
    def max_pipes(self, max_pipes):
        """Sets the max_pipes of this ProcessInfoItem.


        :param max_pipes: The max_pipes of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._max_pipes = max_pipes

    @property
    def max_sess_rate(self):
        """Gets the max_sess_rate of this ProcessInfoItem.  # noqa: E501


        :return: The max_sess_rate of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._max_sess_rate

    @max_sess_rate.setter
    def max_sess_rate(self, max_sess_rate):
        """Sets the max_sess_rate of this ProcessInfoItem.


        :param max_sess_rate: The max_sess_rate of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._max_sess_rate = max_sess_rate

    @property
    def max_sock(self):
        """Gets the max_sock of this ProcessInfoItem.  # noqa: E501


        :return: The max_sock of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._max_sock

    @max_sock.setter
    def max_sock(self, max_sock):
        """Sets the max_sock of this ProcessInfoItem.


        :param max_sock: The max_sock of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._max_sock = max_sock

    @property
    def max_ssl_conns(self):
        """Gets the max_ssl_conns of this ProcessInfoItem.  # noqa: E501


        :return: The max_ssl_conns of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._max_ssl_conns

    @max_ssl_conns.setter
    def max_ssl_conns(self, max_ssl_conns):
        """Sets the max_ssl_conns of this ProcessInfoItem.


        :param max_ssl_conns: The max_ssl_conns of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._max_ssl_conns = max_ssl_conns

    @property
    def max_ssl_rate(self):
        """Gets the max_ssl_rate of this ProcessInfoItem.  # noqa: E501


        :return: The max_ssl_rate of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._max_ssl_rate

    @max_ssl_rate.setter
    def max_ssl_rate(self, max_ssl_rate):
        """Sets the max_ssl_rate of this ProcessInfoItem.


        :param max_ssl_rate: The max_ssl_rate of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._max_ssl_rate = max_ssl_rate

    @property
    def max_zlib_mem_usage(self):
        """Gets the max_zlib_mem_usage of this ProcessInfoItem.  # noqa: E501


        :return: The max_zlib_mem_usage of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._max_zlib_mem_usage

    @max_zlib_mem_usage.setter
    def max_zlib_mem_usage(self, max_zlib_mem_usage):
        """Sets the max_zlib_mem_usage of this ProcessInfoItem.


        :param max_zlib_mem_usage: The max_zlib_mem_usage of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._max_zlib_mem_usage = max_zlib_mem_usage

    @property
    def mem_max_mb(self):
        """Gets the mem_max_mb of this ProcessInfoItem.  # noqa: E501


        :return: The mem_max_mb of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._mem_max_mb

    @mem_max_mb.setter
    def mem_max_mb(self, mem_max_mb):
        """Sets the mem_max_mb of this ProcessInfoItem.


        :param mem_max_mb: The mem_max_mb of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._mem_max_mb = mem_max_mb

    @property
    def nbthread(self):
        """Gets the nbthread of this ProcessInfoItem.  # noqa: E501

        Number of threads  # noqa: E501

        :return: The nbthread of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._nbthread

    @nbthread.setter
    def nbthread(self, nbthread):
        """Sets the nbthread of this ProcessInfoItem.

        Number of threads  # noqa: E501

        :param nbthread: The nbthread of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._nbthread = nbthread

    @property
    def node(self):
        """Gets the node of this ProcessInfoItem.  # noqa: E501


        :return: The node of this ProcessInfoItem.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this ProcessInfoItem.


        :param node: The node of this ProcessInfoItem.  # noqa: E501
        :type: str
        """

        self._node = node

    @property
    def pid(self):
        """Gets the pid of this ProcessInfoItem.  # noqa: E501

        Process id of the replying worker process  # noqa: E501

        :return: The pid of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this ProcessInfoItem.

        Process id of the replying worker process  # noqa: E501

        :param pid: The pid of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def pipes_free(self):
        """Gets the pipes_free of this ProcessInfoItem.  # noqa: E501


        :return: The pipes_free of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._pipes_free

    @pipes_free.setter
    def pipes_free(self, pipes_free):
        """Sets the pipes_free of this ProcessInfoItem.


        :param pipes_free: The pipes_free of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._pipes_free = pipes_free

    @property
    def pipes_used(self):
        """Gets the pipes_used of this ProcessInfoItem.  # noqa: E501


        :return: The pipes_used of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._pipes_used

    @pipes_used.setter
    def pipes_used(self, pipes_used):
        """Sets the pipes_used of this ProcessInfoItem.


        :param pipes_used: The pipes_used of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._pipes_used = pipes_used

    @property
    def pool_alloc_mb(self):
        """Gets the pool_alloc_mb of this ProcessInfoItem.  # noqa: E501


        :return: The pool_alloc_mb of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._pool_alloc_mb

    @pool_alloc_mb.setter
    def pool_alloc_mb(self, pool_alloc_mb):
        """Sets the pool_alloc_mb of this ProcessInfoItem.


        :param pool_alloc_mb: The pool_alloc_mb of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._pool_alloc_mb = pool_alloc_mb

    @property
    def pool_failed(self):
        """Gets the pool_failed of this ProcessInfoItem.  # noqa: E501


        :return: The pool_failed of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._pool_failed

    @pool_failed.setter
    def pool_failed(self, pool_failed):
        """Sets the pool_failed of this ProcessInfoItem.


        :param pool_failed: The pool_failed of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._pool_failed = pool_failed

    @property
    def pool_used_mb(self):
        """Gets the pool_used_mb of this ProcessInfoItem.  # noqa: E501


        :return: The pool_used_mb of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._pool_used_mb

    @pool_used_mb.setter
    def pool_used_mb(self, pool_used_mb):
        """Sets the pool_used_mb of this ProcessInfoItem.


        :param pool_used_mb: The pool_used_mb of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._pool_used_mb = pool_used_mb

    @property
    def process_num(self):
        """Gets the process_num of this ProcessInfoItem.  # noqa: E501

        Process number  # noqa: E501

        :return: The process_num of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._process_num

    @process_num.setter
    def process_num(self, process_num):
        """Sets the process_num of this ProcessInfoItem.

        Process number  # noqa: E501

        :param process_num: The process_num of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._process_num = process_num

    @property
    def processes(self):
        """Gets the processes of this ProcessInfoItem.  # noqa: E501

        Number of spawned processes  # noqa: E501

        :return: The processes of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._processes

    @processes.setter
    def processes(self, processes):
        """Sets the processes of this ProcessInfoItem.

        Number of spawned processes  # noqa: E501

        :param processes: The processes of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._processes = processes

    @property
    def release_date(self):
        """Gets the release_date of this ProcessInfoItem.  # noqa: E501

        HAProxy version release date  # noqa: E501

        :return: The release_date of this ProcessInfoItem.  # noqa: E501
        :rtype: date
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this ProcessInfoItem.

        HAProxy version release date  # noqa: E501

        :param release_date: The release_date of this ProcessInfoItem.  # noqa: E501
        :type: date
        """

        self._release_date = release_date

    @property
    def run_queue(self):
        """Gets the run_queue of this ProcessInfoItem.  # noqa: E501


        :return: The run_queue of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._run_queue

    @run_queue.setter
    def run_queue(self, run_queue):
        """Sets the run_queue of this ProcessInfoItem.


        :param run_queue: The run_queue of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._run_queue = run_queue

    @property
    def sess_rate(self):
        """Gets the sess_rate of this ProcessInfoItem.  # noqa: E501


        :return: The sess_rate of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._sess_rate

    @sess_rate.setter
    def sess_rate(self, sess_rate):
        """Sets the sess_rate of this ProcessInfoItem.


        :param sess_rate: The sess_rate of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._sess_rate = sess_rate

    @property
    def sess_rate_limit(self):
        """Gets the sess_rate_limit of this ProcessInfoItem.  # noqa: E501


        :return: The sess_rate_limit of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._sess_rate_limit

    @sess_rate_limit.setter
    def sess_rate_limit(self, sess_rate_limit):
        """Sets the sess_rate_limit of this ProcessInfoItem.


        :param sess_rate_limit: The sess_rate_limit of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._sess_rate_limit = sess_rate_limit

    @property
    def ssl_backend_key_rate(self):
        """Gets the ssl_backend_key_rate of this ProcessInfoItem.  # noqa: E501


        :return: The ssl_backend_key_rate of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._ssl_backend_key_rate

    @ssl_backend_key_rate.setter
    def ssl_backend_key_rate(self, ssl_backend_key_rate):
        """Sets the ssl_backend_key_rate of this ProcessInfoItem.


        :param ssl_backend_key_rate: The ssl_backend_key_rate of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._ssl_backend_key_rate = ssl_backend_key_rate

    @property
    def ssl_backend_max_key_rate(self):
        """Gets the ssl_backend_max_key_rate of this ProcessInfoItem.  # noqa: E501


        :return: The ssl_backend_max_key_rate of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._ssl_backend_max_key_rate

    @ssl_backend_max_key_rate.setter
    def ssl_backend_max_key_rate(self, ssl_backend_max_key_rate):
        """Sets the ssl_backend_max_key_rate of this ProcessInfoItem.


        :param ssl_backend_max_key_rate: The ssl_backend_max_key_rate of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._ssl_backend_max_key_rate = ssl_backend_max_key_rate

    @property
    def ssl_cache_lookups(self):
        """Gets the ssl_cache_lookups of this ProcessInfoItem.  # noqa: E501


        :return: The ssl_cache_lookups of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._ssl_cache_lookups

    @ssl_cache_lookups.setter
    def ssl_cache_lookups(self, ssl_cache_lookups):
        """Sets the ssl_cache_lookups of this ProcessInfoItem.


        :param ssl_cache_lookups: The ssl_cache_lookups of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._ssl_cache_lookups = ssl_cache_lookups

    @property
    def ssl_cache_misses(self):
        """Gets the ssl_cache_misses of this ProcessInfoItem.  # noqa: E501


        :return: The ssl_cache_misses of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._ssl_cache_misses

    @ssl_cache_misses.setter
    def ssl_cache_misses(self, ssl_cache_misses):
        """Sets the ssl_cache_misses of this ProcessInfoItem.


        :param ssl_cache_misses: The ssl_cache_misses of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._ssl_cache_misses = ssl_cache_misses

    @property
    def ssl_frontend_key_rate(self):
        """Gets the ssl_frontend_key_rate of this ProcessInfoItem.  # noqa: E501


        :return: The ssl_frontend_key_rate of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._ssl_frontend_key_rate

    @ssl_frontend_key_rate.setter
    def ssl_frontend_key_rate(self, ssl_frontend_key_rate):
        """Sets the ssl_frontend_key_rate of this ProcessInfoItem.


        :param ssl_frontend_key_rate: The ssl_frontend_key_rate of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._ssl_frontend_key_rate = ssl_frontend_key_rate

    @property
    def ssl_frontend_max_key_rate(self):
        """Gets the ssl_frontend_max_key_rate of this ProcessInfoItem.  # noqa: E501


        :return: The ssl_frontend_max_key_rate of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._ssl_frontend_max_key_rate

    @ssl_frontend_max_key_rate.setter
    def ssl_frontend_max_key_rate(self, ssl_frontend_max_key_rate):
        """Sets the ssl_frontend_max_key_rate of this ProcessInfoItem.


        :param ssl_frontend_max_key_rate: The ssl_frontend_max_key_rate of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._ssl_frontend_max_key_rate = ssl_frontend_max_key_rate

    @property
    def ssl_frontend_session_reuse(self):
        """Gets the ssl_frontend_session_reuse of this ProcessInfoItem.  # noqa: E501


        :return: The ssl_frontend_session_reuse of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._ssl_frontend_session_reuse

    @ssl_frontend_session_reuse.setter
    def ssl_frontend_session_reuse(self, ssl_frontend_session_reuse):
        """Sets the ssl_frontend_session_reuse of this ProcessInfoItem.


        :param ssl_frontend_session_reuse: The ssl_frontend_session_reuse of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._ssl_frontend_session_reuse = ssl_frontend_session_reuse

    @property
    def ssl_rate(self):
        """Gets the ssl_rate of this ProcessInfoItem.  # noqa: E501


        :return: The ssl_rate of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._ssl_rate

    @ssl_rate.setter
    def ssl_rate(self, ssl_rate):
        """Sets the ssl_rate of this ProcessInfoItem.


        :param ssl_rate: The ssl_rate of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._ssl_rate = ssl_rate

    @property
    def ssl_rate_limit(self):
        """Gets the ssl_rate_limit of this ProcessInfoItem.  # noqa: E501


        :return: The ssl_rate_limit of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._ssl_rate_limit

    @ssl_rate_limit.setter
    def ssl_rate_limit(self, ssl_rate_limit):
        """Sets the ssl_rate_limit of this ProcessInfoItem.


        :param ssl_rate_limit: The ssl_rate_limit of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._ssl_rate_limit = ssl_rate_limit

    @property
    def stopping(self):
        """Gets the stopping of this ProcessInfoItem.  # noqa: E501


        :return: The stopping of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._stopping

    @stopping.setter
    def stopping(self, stopping):
        """Sets the stopping of this ProcessInfoItem.


        :param stopping: The stopping of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._stopping = stopping

    @property
    def tasks(self):
        """Gets the tasks of this ProcessInfoItem.  # noqa: E501


        :return: The tasks of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this ProcessInfoItem.


        :param tasks: The tasks of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._tasks = tasks

    @property
    def total_bytes_out(self):
        """Gets the total_bytes_out of this ProcessInfoItem.  # noqa: E501


        :return: The total_bytes_out of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes_out

    @total_bytes_out.setter
    def total_bytes_out(self, total_bytes_out):
        """Sets the total_bytes_out of this ProcessInfoItem.


        :param total_bytes_out: The total_bytes_out of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._total_bytes_out = total_bytes_out

    @property
    def ulimit_n(self):
        """Gets the ulimit_n of this ProcessInfoItem.  # noqa: E501


        :return: The ulimit_n of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._ulimit_n

    @ulimit_n.setter
    def ulimit_n(self, ulimit_n):
        """Sets the ulimit_n of this ProcessInfoItem.


        :param ulimit_n: The ulimit_n of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._ulimit_n = ulimit_n

    @property
    def unstoppable(self):
        """Gets the unstoppable of this ProcessInfoItem.  # noqa: E501


        :return: The unstoppable of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._unstoppable

    @unstoppable.setter
    def unstoppable(self, unstoppable):
        """Sets the unstoppable of this ProcessInfoItem.


        :param unstoppable: The unstoppable of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._unstoppable = unstoppable

    @property
    def uptime(self):
        """Gets the uptime of this ProcessInfoItem.  # noqa: E501

        HAProxy uptime in s  # noqa: E501

        :return: The uptime of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this ProcessInfoItem.

        HAProxy uptime in s  # noqa: E501

        :param uptime: The uptime of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._uptime = uptime

    @property
    def version(self):
        """Gets the version of this ProcessInfoItem.  # noqa: E501

        HAProxy version string  # noqa: E501

        :return: The version of this ProcessInfoItem.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ProcessInfoItem.

        HAProxy version string  # noqa: E501

        :param version: The version of this ProcessInfoItem.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def zlib_mem_usage(self):
        """Gets the zlib_mem_usage of this ProcessInfoItem.  # noqa: E501


        :return: The zlib_mem_usage of this ProcessInfoItem.  # noqa: E501
        :rtype: int
        """
        return self._zlib_mem_usage

    @zlib_mem_usage.setter
    def zlib_mem_usage(self, zlib_mem_usage):
        """Sets the zlib_mem_usage of this ProcessInfoItem.


        :param zlib_mem_usage: The zlib_mem_usage of this ProcessInfoItem.  # noqa: E501
        :type: int
        """

        self._zlib_mem_usage = zlib_mem_usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessInfoItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessInfoItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
