# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Filter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_name': 'str',
        'bandwidth_limit_name': 'str',
        'cache_name': 'str',
        'default_limit': 'int',
        'default_period': 'int',
        'index': 'int',
        'key': 'str',
        'limit': 'int',
        'min_size': 'int',
        'spoe_config': 'str',
        'spoe_engine': 'str',
        'table': 'str',
        'trace_hexdump': 'bool',
        'trace_name': 'str',
        'trace_rnd_forwarding': 'bool',
        'trace_rnd_parsing': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'app_name': 'app_name',
        'bandwidth_limit_name': 'bandwidth_limit_name',
        'cache_name': 'cache_name',
        'default_limit': 'default_limit',
        'default_period': 'default_period',
        'index': 'index',
        'key': 'key',
        'limit': 'limit',
        'min_size': 'min_size',
        'spoe_config': 'spoe_config',
        'spoe_engine': 'spoe_engine',
        'table': 'table',
        'trace_hexdump': 'trace_hexdump',
        'trace_name': 'trace_name',
        'trace_rnd_forwarding': 'trace_rnd_forwarding',
        'trace_rnd_parsing': 'trace_rnd_parsing',
        'type': 'type'
    }

    def __init__(self, app_name=None, bandwidth_limit_name=None, cache_name=None, default_limit=None, default_period=None, index=None, key=None, limit=None, min_size=None, spoe_config=None, spoe_engine=None, table=None, trace_hexdump=None, trace_name=None, trace_rnd_forwarding=None, trace_rnd_parsing=None, type=None):  # noqa: E501
        """Filter - a model defined in Swagger"""  # noqa: E501
        self._app_name = None
        self._bandwidth_limit_name = None
        self._cache_name = None
        self._default_limit = None
        self._default_period = None
        self._index = None
        self._key = None
        self._limit = None
        self._min_size = None
        self._spoe_config = None
        self._spoe_engine = None
        self._table = None
        self._trace_hexdump = None
        self._trace_name = None
        self._trace_rnd_forwarding = None
        self._trace_rnd_parsing = None
        self._type = None
        self.discriminator = None
        if app_name is not None:
            self.app_name = app_name
        if bandwidth_limit_name is not None:
            self.bandwidth_limit_name = bandwidth_limit_name
        if cache_name is not None:
            self.cache_name = cache_name
        if default_limit is not None:
            self.default_limit = default_limit
        if default_period is not None:
            self.default_period = default_period
        self.index = index
        if key is not None:
            self.key = key
        if limit is not None:
            self.limit = limit
        if min_size is not None:
            self.min_size = min_size
        if spoe_config is not None:
            self.spoe_config = spoe_config
        if spoe_engine is not None:
            self.spoe_engine = spoe_engine
        if table is not None:
            self.table = table
        if trace_hexdump is not None:
            self.trace_hexdump = trace_hexdump
        if trace_name is not None:
            self.trace_name = trace_name
        if trace_rnd_forwarding is not None:
            self.trace_rnd_forwarding = trace_rnd_forwarding
        if trace_rnd_parsing is not None:
            self.trace_rnd_parsing = trace_rnd_parsing
        self.type = type

    @property
    def app_name(self):
        """Gets the app_name of this Filter.  # noqa: E501

        Name of the fcgi-app section this filter will use.  # noqa: E501

        :return: The app_name of this Filter.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this Filter.

        Name of the fcgi-app section this filter will use.  # noqa: E501

        :param app_name: The app_name of this Filter.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def bandwidth_limit_name(self):
        """Gets the bandwidth_limit_name of this Filter.  # noqa: E501

        Filter name that will be used by 'set-bandwidth-limit' actions to reference a specific bandwidth limitation filter  # noqa: E501

        :return: The bandwidth_limit_name of this Filter.  # noqa: E501
        :rtype: str
        """
        return self._bandwidth_limit_name

    @bandwidth_limit_name.setter
    def bandwidth_limit_name(self, bandwidth_limit_name):
        """Sets the bandwidth_limit_name of this Filter.

        Filter name that will be used by 'set-bandwidth-limit' actions to reference a specific bandwidth limitation filter  # noqa: E501

        :param bandwidth_limit_name: The bandwidth_limit_name of this Filter.  # noqa: E501
        :type: str
        """

        self._bandwidth_limit_name = bandwidth_limit_name

    @property
    def cache_name(self):
        """Gets the cache_name of this Filter.  # noqa: E501


        :return: The cache_name of this Filter.  # noqa: E501
        :rtype: str
        """
        return self._cache_name

    @cache_name.setter
    def cache_name(self, cache_name):
        """Sets the cache_name of this Filter.


        :param cache_name: The cache_name of this Filter.  # noqa: E501
        :type: str
        """

        self._cache_name = cache_name

    @property
    def default_limit(self):
        """Gets the default_limit of this Filter.  # noqa: E501

        The max number of bytes that can be forwarded over the period. The value must be specified for per-stream and shared bandwidth limitation filters. It follows the HAProxy size format and is expressed in bytes.  # noqa: E501

        :return: The default_limit of this Filter.  # noqa: E501
        :rtype: int
        """
        return self._default_limit

    @default_limit.setter
    def default_limit(self, default_limit):
        """Sets the default_limit of this Filter.

        The max number of bytes that can be forwarded over the period. The value must be specified for per-stream and shared bandwidth limitation filters. It follows the HAProxy size format and is expressed in bytes.  # noqa: E501

        :param default_limit: The default_limit of this Filter.  # noqa: E501
        :type: int
        """

        self._default_limit = default_limit

    @property
    def default_period(self):
        """Gets the default_period of this Filter.  # noqa: E501

        The default time period used to evaluate the bandwidth limitation rate. It can be specified for per-stream bandwidth limitation filters only. It follows the HAProxy time format and is expressed in milliseconds.  # noqa: E501

        :return: The default_period of this Filter.  # noqa: E501
        :rtype: int
        """
        return self._default_period

    @default_period.setter
    def default_period(self, default_period):
        """Sets the default_period of this Filter.

        The default time period used to evaluate the bandwidth limitation rate. It can be specified for per-stream bandwidth limitation filters only. It follows the HAProxy time format and is expressed in milliseconds.  # noqa: E501

        :param default_period: The default_period of this Filter.  # noqa: E501
        :type: int
        """

        self._default_period = default_period

    @property
    def index(self):
        """Gets the index of this Filter.  # noqa: E501


        :return: The index of this Filter.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Filter.


        :param index: The index of this Filter.  # noqa: E501
        :type: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def key(self):
        """Gets the key of this Filter.  # noqa: E501

        A sample expression rule. It describes what elements will be analyzed, extracted, combined, and used to select which table entry to update the counters. It must be specified for shared bandwidth limitation filters only.  # noqa: E501

        :return: The key of this Filter.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Filter.

        A sample expression rule. It describes what elements will be analyzed, extracted, combined, and used to select which table entry to update the counters. It must be specified for shared bandwidth limitation filters only.  # noqa: E501

        :param key: The key of this Filter.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def limit(self):
        """Gets the limit of this Filter.  # noqa: E501

        The max number of bytes that can be forwarded over the period. The value must be specified for per-stream and shared bandwidth limitation filters. It follows the HAProxy size format and is expressed in bytes.  # noqa: E501

        :return: The limit of this Filter.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Filter.

        The max number of bytes that can be forwarded over the period. The value must be specified for per-stream and shared bandwidth limitation filters. It follows the HAProxy size format and is expressed in bytes.  # noqa: E501

        :param limit: The limit of this Filter.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def min_size(self):
        """Gets the min_size of this Filter.  # noqa: E501

        The optional minimum number of bytes forwarded at a time by a stream excluding the last packet that may be smaller. This value can be specified for per-stream and shared bandwidth limitation filters. It follows the HAProxy size format and is expressed in bytes.  # noqa: E501

        :return: The min_size of this Filter.  # noqa: E501
        :rtype: int
        """
        return self._min_size

    @min_size.setter
    def min_size(self, min_size):
        """Sets the min_size of this Filter.

        The optional minimum number of bytes forwarded at a time by a stream excluding the last packet that may be smaller. This value can be specified for per-stream and shared bandwidth limitation filters. It follows the HAProxy size format and is expressed in bytes.  # noqa: E501

        :param min_size: The min_size of this Filter.  # noqa: E501
        :type: int
        """

        self._min_size = min_size

    @property
    def spoe_config(self):
        """Gets the spoe_config of this Filter.  # noqa: E501


        :return: The spoe_config of this Filter.  # noqa: E501
        :rtype: str
        """
        return self._spoe_config

    @spoe_config.setter
    def spoe_config(self, spoe_config):
        """Sets the spoe_config of this Filter.


        :param spoe_config: The spoe_config of this Filter.  # noqa: E501
        :type: str
        """

        self._spoe_config = spoe_config

    @property
    def spoe_engine(self):
        """Gets the spoe_engine of this Filter.  # noqa: E501


        :return: The spoe_engine of this Filter.  # noqa: E501
        :rtype: str
        """
        return self._spoe_engine

    @spoe_engine.setter
    def spoe_engine(self, spoe_engine):
        """Sets the spoe_engine of this Filter.


        :param spoe_engine: The spoe_engine of this Filter.  # noqa: E501
        :type: str
        """

        self._spoe_engine = spoe_engine

    @property
    def table(self):
        """Gets the table of this Filter.  # noqa: E501

        An optional table to be used instead of the default one, which is the stick-table declared in the current proxy. It can be specified for shared bandwidth limitation filters only.  # noqa: E501

        :return: The table of this Filter.  # noqa: E501
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this Filter.

        An optional table to be used instead of the default one, which is the stick-table declared in the current proxy. It can be specified for shared bandwidth limitation filters only.  # noqa: E501

        :param table: The table of this Filter.  # noqa: E501
        :type: str
        """

        self._table = table

    @property
    def trace_hexdump(self):
        """Gets the trace_hexdump of this Filter.  # noqa: E501


        :return: The trace_hexdump of this Filter.  # noqa: E501
        :rtype: bool
        """
        return self._trace_hexdump

    @trace_hexdump.setter
    def trace_hexdump(self, trace_hexdump):
        """Sets the trace_hexdump of this Filter.


        :param trace_hexdump: The trace_hexdump of this Filter.  # noqa: E501
        :type: bool
        """

        self._trace_hexdump = trace_hexdump

    @property
    def trace_name(self):
        """Gets the trace_name of this Filter.  # noqa: E501


        :return: The trace_name of this Filter.  # noqa: E501
        :rtype: str
        """
        return self._trace_name

    @trace_name.setter
    def trace_name(self, trace_name):
        """Sets the trace_name of this Filter.


        :param trace_name: The trace_name of this Filter.  # noqa: E501
        :type: str
        """

        self._trace_name = trace_name

    @property
    def trace_rnd_forwarding(self):
        """Gets the trace_rnd_forwarding of this Filter.  # noqa: E501


        :return: The trace_rnd_forwarding of this Filter.  # noqa: E501
        :rtype: bool
        """
        return self._trace_rnd_forwarding

    @trace_rnd_forwarding.setter
    def trace_rnd_forwarding(self, trace_rnd_forwarding):
        """Sets the trace_rnd_forwarding of this Filter.


        :param trace_rnd_forwarding: The trace_rnd_forwarding of this Filter.  # noqa: E501
        :type: bool
        """

        self._trace_rnd_forwarding = trace_rnd_forwarding

    @property
    def trace_rnd_parsing(self):
        """Gets the trace_rnd_parsing of this Filter.  # noqa: E501


        :return: The trace_rnd_parsing of this Filter.  # noqa: E501
        :rtype: bool
        """
        return self._trace_rnd_parsing

    @trace_rnd_parsing.setter
    def trace_rnd_parsing(self, trace_rnd_parsing):
        """Sets the trace_rnd_parsing of this Filter.


        :param trace_rnd_parsing: The trace_rnd_parsing of this Filter.  # noqa: E501
        :type: bool
        """

        self._trace_rnd_parsing = trace_rnd_parsing

    @property
    def type(self):
        """Gets the type of this Filter.  # noqa: E501


        :return: The type of this Filter.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Filter.


        :param type: The type of this Filter.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["trace", "compression", "spoe", "cache", "fcgi-app", "bwlim-in", "bwlim-out"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Filter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Filter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
