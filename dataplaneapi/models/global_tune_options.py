# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GlobalTuneOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'buffers_limit': 'int',
        'buffers_reserve': 'int',
        'bufsize': 'int',
        'comp_maxlevel': 'int',
        'fail_alloc': 'bool',
        'fd_edge_triggered': 'str',
        'h2_header_table_size': 'int',
        'h2_initial_window_size': 'int',
        'h2_max_concurrent_streams': 'int',
        'h2_max_frame_size': 'int',
        'http_cookielen': 'int',
        'http_logurilen': 'int',
        'http_maxhdr': 'int',
        'idle_pool_shared': 'str',
        'idletimer': 'int',
        'listener_multi_queue': 'str',
        'lua_forced_yield': 'int',
        'lua_maxmem': 'bool',
        'lua_service_timeout': 'int',
        'lua_session_timeout': 'int',
        'lua_task_timeout': 'int',
        'maxaccept': 'int',
        'maxpollevents': 'int',
        'maxrewrite': 'int',
        'pattern_cache_size': 'int',
        'peers_max_updates_at_once': 'int',
        'pipesize': 'int',
        'pool_high_fd_ratio': 'int',
        'pool_low_fd_ratio': 'int',
        'rcvbuf_client': 'int',
        'rcvbuf_server': 'int',
        'recv_enough': 'int',
        'runqueue_depth': 'int',
        'sched_low_latency': 'str',
        'sndbuf_client': 'int',
        'sndbuf_server': 'int',
        'ssl_cachesize': 'int',
        'ssl_capture_buffer_size': 'int',
        'ssl_ctx_cache_size': 'int',
        'ssl_default_dh_param': 'int',
        'ssl_force_private_cache': 'bool',
        'ssl_keylog': 'str',
        'ssl_lifetime': 'int',
        'ssl_maxrecord': 'int',
        'vars_global_max_size': 'int',
        'vars_proc_max_size': 'int',
        'vars_reqres_max_size': 'int',
        'vars_sess_max_size': 'int',
        'vars_txn_max_size': 'int',
        'zlib_memlevel': 'int',
        'zlib_windowsize': 'int'
    }

    attribute_map = {
        'buffers_limit': 'buffers_limit',
        'buffers_reserve': 'buffers_reserve',
        'bufsize': 'bufsize',
        'comp_maxlevel': 'comp_maxlevel',
        'fail_alloc': 'fail_alloc',
        'fd_edge_triggered': 'fd_edge_triggered',
        'h2_header_table_size': 'h2_header_table_size',
        'h2_initial_window_size': 'h2_initial_window_size',
        'h2_max_concurrent_streams': 'h2_max_concurrent_streams',
        'h2_max_frame_size': 'h2_max_frame_size',
        'http_cookielen': 'http_cookielen',
        'http_logurilen': 'http_logurilen',
        'http_maxhdr': 'http_maxhdr',
        'idle_pool_shared': 'idle_pool_shared',
        'idletimer': 'idletimer',
        'listener_multi_queue': 'listener_multi_queue',
        'lua_forced_yield': 'lua_forced_yield',
        'lua_maxmem': 'lua_maxmem',
        'lua_service_timeout': 'lua_service_timeout',
        'lua_session_timeout': 'lua_session_timeout',
        'lua_task_timeout': 'lua_task_timeout',
        'maxaccept': 'maxaccept',
        'maxpollevents': 'maxpollevents',
        'maxrewrite': 'maxrewrite',
        'pattern_cache_size': 'pattern_cache_size',
        'peers_max_updates_at_once': 'peers_max_updates_at_once',
        'pipesize': 'pipesize',
        'pool_high_fd_ratio': 'pool_high_fd_ratio',
        'pool_low_fd_ratio': 'pool_low_fd_ratio',
        'rcvbuf_client': 'rcvbuf_client',
        'rcvbuf_server': 'rcvbuf_server',
        'recv_enough': 'recv_enough',
        'runqueue_depth': 'runqueue_depth',
        'sched_low_latency': 'sched_low_latency',
        'sndbuf_client': 'sndbuf_client',
        'sndbuf_server': 'sndbuf_server',
        'ssl_cachesize': 'ssl_cachesize',
        'ssl_capture_buffer_size': 'ssl_capture_buffer_size',
        'ssl_ctx_cache_size': 'ssl_ctx_cache_size',
        'ssl_default_dh_param': 'ssl_default_dh_param',
        'ssl_force_private_cache': 'ssl_force_private_cache',
        'ssl_keylog': 'ssl_keylog',
        'ssl_lifetime': 'ssl_lifetime',
        'ssl_maxrecord': 'ssl_maxrecord',
        'vars_global_max_size': 'vars_global_max_size',
        'vars_proc_max_size': 'vars_proc_max_size',
        'vars_reqres_max_size': 'vars_reqres_max_size',
        'vars_sess_max_size': 'vars_sess_max_size',
        'vars_txn_max_size': 'vars_txn_max_size',
        'zlib_memlevel': 'zlib_memlevel',
        'zlib_windowsize': 'zlib_windowsize'
    }

    def __init__(self, buffers_limit=None, buffers_reserve=None, bufsize=None, comp_maxlevel=None, fail_alloc=None, fd_edge_triggered=None, h2_header_table_size=None, h2_initial_window_size=None, h2_max_concurrent_streams=None, h2_max_frame_size=None, http_cookielen=None, http_logurilen=None, http_maxhdr=None, idle_pool_shared=None, idletimer=None, listener_multi_queue=None, lua_forced_yield=None, lua_maxmem=None, lua_service_timeout=None, lua_session_timeout=None, lua_task_timeout=None, maxaccept=None, maxpollevents=None, maxrewrite=None, pattern_cache_size=None, peers_max_updates_at_once=None, pipesize=None, pool_high_fd_ratio=None, pool_low_fd_ratio=None, rcvbuf_client=None, rcvbuf_server=None, recv_enough=None, runqueue_depth=None, sched_low_latency=None, sndbuf_client=None, sndbuf_server=None, ssl_cachesize=None, ssl_capture_buffer_size=None, ssl_ctx_cache_size=None, ssl_default_dh_param=None, ssl_force_private_cache=None, ssl_keylog=None, ssl_lifetime=None, ssl_maxrecord=None, vars_global_max_size=None, vars_proc_max_size=None, vars_reqres_max_size=None, vars_sess_max_size=None, vars_txn_max_size=None, zlib_memlevel=None, zlib_windowsize=None):  # noqa: E501
        """GlobalTuneOptions - a model defined in Swagger"""  # noqa: E501
        self._buffers_limit = None
        self._buffers_reserve = None
        self._bufsize = None
        self._comp_maxlevel = None
        self._fail_alloc = None
        self._fd_edge_triggered = None
        self._h2_header_table_size = None
        self._h2_initial_window_size = None
        self._h2_max_concurrent_streams = None
        self._h2_max_frame_size = None
        self._http_cookielen = None
        self._http_logurilen = None
        self._http_maxhdr = None
        self._idle_pool_shared = None
        self._idletimer = None
        self._listener_multi_queue = None
        self._lua_forced_yield = None
        self._lua_maxmem = None
        self._lua_service_timeout = None
        self._lua_session_timeout = None
        self._lua_task_timeout = None
        self._maxaccept = None
        self._maxpollevents = None
        self._maxrewrite = None
        self._pattern_cache_size = None
        self._peers_max_updates_at_once = None
        self._pipesize = None
        self._pool_high_fd_ratio = None
        self._pool_low_fd_ratio = None
        self._rcvbuf_client = None
        self._rcvbuf_server = None
        self._recv_enough = None
        self._runqueue_depth = None
        self._sched_low_latency = None
        self._sndbuf_client = None
        self._sndbuf_server = None
        self._ssl_cachesize = None
        self._ssl_capture_buffer_size = None
        self._ssl_ctx_cache_size = None
        self._ssl_default_dh_param = None
        self._ssl_force_private_cache = None
        self._ssl_keylog = None
        self._ssl_lifetime = None
        self._ssl_maxrecord = None
        self._vars_global_max_size = None
        self._vars_proc_max_size = None
        self._vars_reqres_max_size = None
        self._vars_sess_max_size = None
        self._vars_txn_max_size = None
        self._zlib_memlevel = None
        self._zlib_windowsize = None
        self.discriminator = None
        if buffers_limit is not None:
            self.buffers_limit = buffers_limit
        if buffers_reserve is not None:
            self.buffers_reserve = buffers_reserve
        if bufsize is not None:
            self.bufsize = bufsize
        if comp_maxlevel is not None:
            self.comp_maxlevel = comp_maxlevel
        if fail_alloc is not None:
            self.fail_alloc = fail_alloc
        if fd_edge_triggered is not None:
            self.fd_edge_triggered = fd_edge_triggered
        if h2_header_table_size is not None:
            self.h2_header_table_size = h2_header_table_size
        if h2_initial_window_size is not None:
            self.h2_initial_window_size = h2_initial_window_size
        if h2_max_concurrent_streams is not None:
            self.h2_max_concurrent_streams = h2_max_concurrent_streams
        if h2_max_frame_size is not None:
            self.h2_max_frame_size = h2_max_frame_size
        if http_cookielen is not None:
            self.http_cookielen = http_cookielen
        if http_logurilen is not None:
            self.http_logurilen = http_logurilen
        if http_maxhdr is not None:
            self.http_maxhdr = http_maxhdr
        if idle_pool_shared is not None:
            self.idle_pool_shared = idle_pool_shared
        if idletimer is not None:
            self.idletimer = idletimer
        if listener_multi_queue is not None:
            self.listener_multi_queue = listener_multi_queue
        if lua_forced_yield is not None:
            self.lua_forced_yield = lua_forced_yield
        if lua_maxmem is not None:
            self.lua_maxmem = lua_maxmem
        if lua_service_timeout is not None:
            self.lua_service_timeout = lua_service_timeout
        if lua_session_timeout is not None:
            self.lua_session_timeout = lua_session_timeout
        if lua_task_timeout is not None:
            self.lua_task_timeout = lua_task_timeout
        if maxaccept is not None:
            self.maxaccept = maxaccept
        if maxpollevents is not None:
            self.maxpollevents = maxpollevents
        if maxrewrite is not None:
            self.maxrewrite = maxrewrite
        if pattern_cache_size is not None:
            self.pattern_cache_size = pattern_cache_size
        if peers_max_updates_at_once is not None:
            self.peers_max_updates_at_once = peers_max_updates_at_once
        if pipesize is not None:
            self.pipesize = pipesize
        if pool_high_fd_ratio is not None:
            self.pool_high_fd_ratio = pool_high_fd_ratio
        if pool_low_fd_ratio is not None:
            self.pool_low_fd_ratio = pool_low_fd_ratio
        if rcvbuf_client is not None:
            self.rcvbuf_client = rcvbuf_client
        if rcvbuf_server is not None:
            self.rcvbuf_server = rcvbuf_server
        if recv_enough is not None:
            self.recv_enough = recv_enough
        if runqueue_depth is not None:
            self.runqueue_depth = runqueue_depth
        if sched_low_latency is not None:
            self.sched_low_latency = sched_low_latency
        if sndbuf_client is not None:
            self.sndbuf_client = sndbuf_client
        if sndbuf_server is not None:
            self.sndbuf_server = sndbuf_server
        if ssl_cachesize is not None:
            self.ssl_cachesize = ssl_cachesize
        if ssl_capture_buffer_size is not None:
            self.ssl_capture_buffer_size = ssl_capture_buffer_size
        if ssl_ctx_cache_size is not None:
            self.ssl_ctx_cache_size = ssl_ctx_cache_size
        if ssl_default_dh_param is not None:
            self.ssl_default_dh_param = ssl_default_dh_param
        if ssl_force_private_cache is not None:
            self.ssl_force_private_cache = ssl_force_private_cache
        if ssl_keylog is not None:
            self.ssl_keylog = ssl_keylog
        if ssl_lifetime is not None:
            self.ssl_lifetime = ssl_lifetime
        if ssl_maxrecord is not None:
            self.ssl_maxrecord = ssl_maxrecord
        if vars_global_max_size is not None:
            self.vars_global_max_size = vars_global_max_size
        if vars_proc_max_size is not None:
            self.vars_proc_max_size = vars_proc_max_size
        if vars_reqres_max_size is not None:
            self.vars_reqres_max_size = vars_reqres_max_size
        if vars_sess_max_size is not None:
            self.vars_sess_max_size = vars_sess_max_size
        if vars_txn_max_size is not None:
            self.vars_txn_max_size = vars_txn_max_size
        if zlib_memlevel is not None:
            self.zlib_memlevel = zlib_memlevel
        if zlib_windowsize is not None:
            self.zlib_windowsize = zlib_windowsize

    @property
    def buffers_limit(self):
        """Gets the buffers_limit of this GlobalTuneOptions.  # noqa: E501


        :return: The buffers_limit of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._buffers_limit

    @buffers_limit.setter
    def buffers_limit(self, buffers_limit):
        """Sets the buffers_limit of this GlobalTuneOptions.


        :param buffers_limit: The buffers_limit of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._buffers_limit = buffers_limit

    @property
    def buffers_reserve(self):
        """Gets the buffers_reserve of this GlobalTuneOptions.  # noqa: E501


        :return: The buffers_reserve of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._buffers_reserve

    @buffers_reserve.setter
    def buffers_reserve(self, buffers_reserve):
        """Sets the buffers_reserve of this GlobalTuneOptions.


        :param buffers_reserve: The buffers_reserve of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._buffers_reserve = buffers_reserve

    @property
    def bufsize(self):
        """Gets the bufsize of this GlobalTuneOptions.  # noqa: E501


        :return: The bufsize of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._bufsize

    @bufsize.setter
    def bufsize(self, bufsize):
        """Sets the bufsize of this GlobalTuneOptions.


        :param bufsize: The bufsize of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._bufsize = bufsize

    @property
    def comp_maxlevel(self):
        """Gets the comp_maxlevel of this GlobalTuneOptions.  # noqa: E501


        :return: The comp_maxlevel of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._comp_maxlevel

    @comp_maxlevel.setter
    def comp_maxlevel(self, comp_maxlevel):
        """Sets the comp_maxlevel of this GlobalTuneOptions.


        :param comp_maxlevel: The comp_maxlevel of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._comp_maxlevel = comp_maxlevel

    @property
    def fail_alloc(self):
        """Gets the fail_alloc of this GlobalTuneOptions.  # noqa: E501


        :return: The fail_alloc of this GlobalTuneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._fail_alloc

    @fail_alloc.setter
    def fail_alloc(self, fail_alloc):
        """Sets the fail_alloc of this GlobalTuneOptions.


        :param fail_alloc: The fail_alloc of this GlobalTuneOptions.  # noqa: E501
        :type: bool
        """

        self._fail_alloc = fail_alloc

    @property
    def fd_edge_triggered(self):
        """Gets the fd_edge_triggered of this GlobalTuneOptions.  # noqa: E501


        :return: The fd_edge_triggered of this GlobalTuneOptions.  # noqa: E501
        :rtype: str
        """
        return self._fd_edge_triggered

    @fd_edge_triggered.setter
    def fd_edge_triggered(self, fd_edge_triggered):
        """Sets the fd_edge_triggered of this GlobalTuneOptions.


        :param fd_edge_triggered: The fd_edge_triggered of this GlobalTuneOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if fd_edge_triggered not in allowed_values:
            raise ValueError(
                "Invalid value for `fd_edge_triggered` ({0}), must be one of {1}"  # noqa: E501
                .format(fd_edge_triggered, allowed_values)
            )

        self._fd_edge_triggered = fd_edge_triggered

    @property
    def h2_header_table_size(self):
        """Gets the h2_header_table_size of this GlobalTuneOptions.  # noqa: E501


        :return: The h2_header_table_size of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._h2_header_table_size

    @h2_header_table_size.setter
    def h2_header_table_size(self, h2_header_table_size):
        """Sets the h2_header_table_size of this GlobalTuneOptions.


        :param h2_header_table_size: The h2_header_table_size of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._h2_header_table_size = h2_header_table_size

    @property
    def h2_initial_window_size(self):
        """Gets the h2_initial_window_size of this GlobalTuneOptions.  # noqa: E501


        :return: The h2_initial_window_size of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._h2_initial_window_size

    @h2_initial_window_size.setter
    def h2_initial_window_size(self, h2_initial_window_size):
        """Sets the h2_initial_window_size of this GlobalTuneOptions.


        :param h2_initial_window_size: The h2_initial_window_size of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._h2_initial_window_size = h2_initial_window_size

    @property
    def h2_max_concurrent_streams(self):
        """Gets the h2_max_concurrent_streams of this GlobalTuneOptions.  # noqa: E501


        :return: The h2_max_concurrent_streams of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._h2_max_concurrent_streams

    @h2_max_concurrent_streams.setter
    def h2_max_concurrent_streams(self, h2_max_concurrent_streams):
        """Sets the h2_max_concurrent_streams of this GlobalTuneOptions.


        :param h2_max_concurrent_streams: The h2_max_concurrent_streams of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._h2_max_concurrent_streams = h2_max_concurrent_streams

    @property
    def h2_max_frame_size(self):
        """Gets the h2_max_frame_size of this GlobalTuneOptions.  # noqa: E501


        :return: The h2_max_frame_size of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._h2_max_frame_size

    @h2_max_frame_size.setter
    def h2_max_frame_size(self, h2_max_frame_size):
        """Sets the h2_max_frame_size of this GlobalTuneOptions.


        :param h2_max_frame_size: The h2_max_frame_size of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._h2_max_frame_size = h2_max_frame_size

    @property
    def http_cookielen(self):
        """Gets the http_cookielen of this GlobalTuneOptions.  # noqa: E501


        :return: The http_cookielen of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._http_cookielen

    @http_cookielen.setter
    def http_cookielen(self, http_cookielen):
        """Sets the http_cookielen of this GlobalTuneOptions.


        :param http_cookielen: The http_cookielen of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._http_cookielen = http_cookielen

    @property
    def http_logurilen(self):
        """Gets the http_logurilen of this GlobalTuneOptions.  # noqa: E501


        :return: The http_logurilen of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._http_logurilen

    @http_logurilen.setter
    def http_logurilen(self, http_logurilen):
        """Sets the http_logurilen of this GlobalTuneOptions.


        :param http_logurilen: The http_logurilen of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._http_logurilen = http_logurilen

    @property
    def http_maxhdr(self):
        """Gets the http_maxhdr of this GlobalTuneOptions.  # noqa: E501


        :return: The http_maxhdr of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._http_maxhdr

    @http_maxhdr.setter
    def http_maxhdr(self, http_maxhdr):
        """Sets the http_maxhdr of this GlobalTuneOptions.


        :param http_maxhdr: The http_maxhdr of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._http_maxhdr = http_maxhdr

    @property
    def idle_pool_shared(self):
        """Gets the idle_pool_shared of this GlobalTuneOptions.  # noqa: E501


        :return: The idle_pool_shared of this GlobalTuneOptions.  # noqa: E501
        :rtype: str
        """
        return self._idle_pool_shared

    @idle_pool_shared.setter
    def idle_pool_shared(self, idle_pool_shared):
        """Sets the idle_pool_shared of this GlobalTuneOptions.


        :param idle_pool_shared: The idle_pool_shared of this GlobalTuneOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if idle_pool_shared not in allowed_values:
            raise ValueError(
                "Invalid value for `idle_pool_shared` ({0}), must be one of {1}"  # noqa: E501
                .format(idle_pool_shared, allowed_values)
            )

        self._idle_pool_shared = idle_pool_shared

    @property
    def idletimer(self):
        """Gets the idletimer of this GlobalTuneOptions.  # noqa: E501


        :return: The idletimer of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._idletimer

    @idletimer.setter
    def idletimer(self, idletimer):
        """Sets the idletimer of this GlobalTuneOptions.


        :param idletimer: The idletimer of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._idletimer = idletimer

    @property
    def listener_multi_queue(self):
        """Gets the listener_multi_queue of this GlobalTuneOptions.  # noqa: E501


        :return: The listener_multi_queue of this GlobalTuneOptions.  # noqa: E501
        :rtype: str
        """
        return self._listener_multi_queue

    @listener_multi_queue.setter
    def listener_multi_queue(self, listener_multi_queue):
        """Sets the listener_multi_queue of this GlobalTuneOptions.


        :param listener_multi_queue: The listener_multi_queue of this GlobalTuneOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if listener_multi_queue not in allowed_values:
            raise ValueError(
                "Invalid value for `listener_multi_queue` ({0}), must be one of {1}"  # noqa: E501
                .format(listener_multi_queue, allowed_values)
            )

        self._listener_multi_queue = listener_multi_queue

    @property
    def lua_forced_yield(self):
        """Gets the lua_forced_yield of this GlobalTuneOptions.  # noqa: E501


        :return: The lua_forced_yield of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._lua_forced_yield

    @lua_forced_yield.setter
    def lua_forced_yield(self, lua_forced_yield):
        """Sets the lua_forced_yield of this GlobalTuneOptions.


        :param lua_forced_yield: The lua_forced_yield of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._lua_forced_yield = lua_forced_yield

    @property
    def lua_maxmem(self):
        """Gets the lua_maxmem of this GlobalTuneOptions.  # noqa: E501


        :return: The lua_maxmem of this GlobalTuneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._lua_maxmem

    @lua_maxmem.setter
    def lua_maxmem(self, lua_maxmem):
        """Sets the lua_maxmem of this GlobalTuneOptions.


        :param lua_maxmem: The lua_maxmem of this GlobalTuneOptions.  # noqa: E501
        :type: bool
        """

        self._lua_maxmem = lua_maxmem

    @property
    def lua_service_timeout(self):
        """Gets the lua_service_timeout of this GlobalTuneOptions.  # noqa: E501


        :return: The lua_service_timeout of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._lua_service_timeout

    @lua_service_timeout.setter
    def lua_service_timeout(self, lua_service_timeout):
        """Sets the lua_service_timeout of this GlobalTuneOptions.


        :param lua_service_timeout: The lua_service_timeout of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._lua_service_timeout = lua_service_timeout

    @property
    def lua_session_timeout(self):
        """Gets the lua_session_timeout of this GlobalTuneOptions.  # noqa: E501


        :return: The lua_session_timeout of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._lua_session_timeout

    @lua_session_timeout.setter
    def lua_session_timeout(self, lua_session_timeout):
        """Sets the lua_session_timeout of this GlobalTuneOptions.


        :param lua_session_timeout: The lua_session_timeout of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._lua_session_timeout = lua_session_timeout

    @property
    def lua_task_timeout(self):
        """Gets the lua_task_timeout of this GlobalTuneOptions.  # noqa: E501


        :return: The lua_task_timeout of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._lua_task_timeout

    @lua_task_timeout.setter
    def lua_task_timeout(self, lua_task_timeout):
        """Sets the lua_task_timeout of this GlobalTuneOptions.


        :param lua_task_timeout: The lua_task_timeout of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._lua_task_timeout = lua_task_timeout

    @property
    def maxaccept(self):
        """Gets the maxaccept of this GlobalTuneOptions.  # noqa: E501


        :return: The maxaccept of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._maxaccept

    @maxaccept.setter
    def maxaccept(self, maxaccept):
        """Sets the maxaccept of this GlobalTuneOptions.


        :param maxaccept: The maxaccept of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._maxaccept = maxaccept

    @property
    def maxpollevents(self):
        """Gets the maxpollevents of this GlobalTuneOptions.  # noqa: E501


        :return: The maxpollevents of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._maxpollevents

    @maxpollevents.setter
    def maxpollevents(self, maxpollevents):
        """Sets the maxpollevents of this GlobalTuneOptions.


        :param maxpollevents: The maxpollevents of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._maxpollevents = maxpollevents

    @property
    def maxrewrite(self):
        """Gets the maxrewrite of this GlobalTuneOptions.  # noqa: E501


        :return: The maxrewrite of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._maxrewrite

    @maxrewrite.setter
    def maxrewrite(self, maxrewrite):
        """Sets the maxrewrite of this GlobalTuneOptions.


        :param maxrewrite: The maxrewrite of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._maxrewrite = maxrewrite

    @property
    def pattern_cache_size(self):
        """Gets the pattern_cache_size of this GlobalTuneOptions.  # noqa: E501


        :return: The pattern_cache_size of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._pattern_cache_size

    @pattern_cache_size.setter
    def pattern_cache_size(self, pattern_cache_size):
        """Sets the pattern_cache_size of this GlobalTuneOptions.


        :param pattern_cache_size: The pattern_cache_size of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._pattern_cache_size = pattern_cache_size

    @property
    def peers_max_updates_at_once(self):
        """Gets the peers_max_updates_at_once of this GlobalTuneOptions.  # noqa: E501


        :return: The peers_max_updates_at_once of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._peers_max_updates_at_once

    @peers_max_updates_at_once.setter
    def peers_max_updates_at_once(self, peers_max_updates_at_once):
        """Sets the peers_max_updates_at_once of this GlobalTuneOptions.


        :param peers_max_updates_at_once: The peers_max_updates_at_once of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._peers_max_updates_at_once = peers_max_updates_at_once

    @property
    def pipesize(self):
        """Gets the pipesize of this GlobalTuneOptions.  # noqa: E501


        :return: The pipesize of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._pipesize

    @pipesize.setter
    def pipesize(self, pipesize):
        """Sets the pipesize of this GlobalTuneOptions.


        :param pipesize: The pipesize of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._pipesize = pipesize

    @property
    def pool_high_fd_ratio(self):
        """Gets the pool_high_fd_ratio of this GlobalTuneOptions.  # noqa: E501


        :return: The pool_high_fd_ratio of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._pool_high_fd_ratio

    @pool_high_fd_ratio.setter
    def pool_high_fd_ratio(self, pool_high_fd_ratio):
        """Sets the pool_high_fd_ratio of this GlobalTuneOptions.


        :param pool_high_fd_ratio: The pool_high_fd_ratio of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._pool_high_fd_ratio = pool_high_fd_ratio

    @property
    def pool_low_fd_ratio(self):
        """Gets the pool_low_fd_ratio of this GlobalTuneOptions.  # noqa: E501


        :return: The pool_low_fd_ratio of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._pool_low_fd_ratio

    @pool_low_fd_ratio.setter
    def pool_low_fd_ratio(self, pool_low_fd_ratio):
        """Sets the pool_low_fd_ratio of this GlobalTuneOptions.


        :param pool_low_fd_ratio: The pool_low_fd_ratio of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._pool_low_fd_ratio = pool_low_fd_ratio

    @property
    def rcvbuf_client(self):
        """Gets the rcvbuf_client of this GlobalTuneOptions.  # noqa: E501


        :return: The rcvbuf_client of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._rcvbuf_client

    @rcvbuf_client.setter
    def rcvbuf_client(self, rcvbuf_client):
        """Sets the rcvbuf_client of this GlobalTuneOptions.


        :param rcvbuf_client: The rcvbuf_client of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._rcvbuf_client = rcvbuf_client

    @property
    def rcvbuf_server(self):
        """Gets the rcvbuf_server of this GlobalTuneOptions.  # noqa: E501


        :return: The rcvbuf_server of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._rcvbuf_server

    @rcvbuf_server.setter
    def rcvbuf_server(self, rcvbuf_server):
        """Sets the rcvbuf_server of this GlobalTuneOptions.


        :param rcvbuf_server: The rcvbuf_server of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._rcvbuf_server = rcvbuf_server

    @property
    def recv_enough(self):
        """Gets the recv_enough of this GlobalTuneOptions.  # noqa: E501


        :return: The recv_enough of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._recv_enough

    @recv_enough.setter
    def recv_enough(self, recv_enough):
        """Sets the recv_enough of this GlobalTuneOptions.


        :param recv_enough: The recv_enough of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._recv_enough = recv_enough

    @property
    def runqueue_depth(self):
        """Gets the runqueue_depth of this GlobalTuneOptions.  # noqa: E501


        :return: The runqueue_depth of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._runqueue_depth

    @runqueue_depth.setter
    def runqueue_depth(self, runqueue_depth):
        """Sets the runqueue_depth of this GlobalTuneOptions.


        :param runqueue_depth: The runqueue_depth of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._runqueue_depth = runqueue_depth

    @property
    def sched_low_latency(self):
        """Gets the sched_low_latency of this GlobalTuneOptions.  # noqa: E501


        :return: The sched_low_latency of this GlobalTuneOptions.  # noqa: E501
        :rtype: str
        """
        return self._sched_low_latency

    @sched_low_latency.setter
    def sched_low_latency(self, sched_low_latency):
        """Sets the sched_low_latency of this GlobalTuneOptions.


        :param sched_low_latency: The sched_low_latency of this GlobalTuneOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if sched_low_latency not in allowed_values:
            raise ValueError(
                "Invalid value for `sched_low_latency` ({0}), must be one of {1}"  # noqa: E501
                .format(sched_low_latency, allowed_values)
            )

        self._sched_low_latency = sched_low_latency

    @property
    def sndbuf_client(self):
        """Gets the sndbuf_client of this GlobalTuneOptions.  # noqa: E501


        :return: The sndbuf_client of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._sndbuf_client

    @sndbuf_client.setter
    def sndbuf_client(self, sndbuf_client):
        """Sets the sndbuf_client of this GlobalTuneOptions.


        :param sndbuf_client: The sndbuf_client of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._sndbuf_client = sndbuf_client

    @property
    def sndbuf_server(self):
        """Gets the sndbuf_server of this GlobalTuneOptions.  # noqa: E501


        :return: The sndbuf_server of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._sndbuf_server

    @sndbuf_server.setter
    def sndbuf_server(self, sndbuf_server):
        """Sets the sndbuf_server of this GlobalTuneOptions.


        :param sndbuf_server: The sndbuf_server of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._sndbuf_server = sndbuf_server

    @property
    def ssl_cachesize(self):
        """Gets the ssl_cachesize of this GlobalTuneOptions.  # noqa: E501


        :return: The ssl_cachesize of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._ssl_cachesize

    @ssl_cachesize.setter
    def ssl_cachesize(self, ssl_cachesize):
        """Sets the ssl_cachesize of this GlobalTuneOptions.


        :param ssl_cachesize: The ssl_cachesize of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._ssl_cachesize = ssl_cachesize

    @property
    def ssl_capture_buffer_size(self):
        """Gets the ssl_capture_buffer_size of this GlobalTuneOptions.  # noqa: E501


        :return: The ssl_capture_buffer_size of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._ssl_capture_buffer_size

    @ssl_capture_buffer_size.setter
    def ssl_capture_buffer_size(self, ssl_capture_buffer_size):
        """Sets the ssl_capture_buffer_size of this GlobalTuneOptions.


        :param ssl_capture_buffer_size: The ssl_capture_buffer_size of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._ssl_capture_buffer_size = ssl_capture_buffer_size

    @property
    def ssl_ctx_cache_size(self):
        """Gets the ssl_ctx_cache_size of this GlobalTuneOptions.  # noqa: E501


        :return: The ssl_ctx_cache_size of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._ssl_ctx_cache_size

    @ssl_ctx_cache_size.setter
    def ssl_ctx_cache_size(self, ssl_ctx_cache_size):
        """Sets the ssl_ctx_cache_size of this GlobalTuneOptions.


        :param ssl_ctx_cache_size: The ssl_ctx_cache_size of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._ssl_ctx_cache_size = ssl_ctx_cache_size

    @property
    def ssl_default_dh_param(self):
        """Gets the ssl_default_dh_param of this GlobalTuneOptions.  # noqa: E501


        :return: The ssl_default_dh_param of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._ssl_default_dh_param

    @ssl_default_dh_param.setter
    def ssl_default_dh_param(self, ssl_default_dh_param):
        """Sets the ssl_default_dh_param of this GlobalTuneOptions.


        :param ssl_default_dh_param: The ssl_default_dh_param of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._ssl_default_dh_param = ssl_default_dh_param

    @property
    def ssl_force_private_cache(self):
        """Gets the ssl_force_private_cache of this GlobalTuneOptions.  # noqa: E501


        :return: The ssl_force_private_cache of this GlobalTuneOptions.  # noqa: E501
        :rtype: bool
        """
        return self._ssl_force_private_cache

    @ssl_force_private_cache.setter
    def ssl_force_private_cache(self, ssl_force_private_cache):
        """Sets the ssl_force_private_cache of this GlobalTuneOptions.


        :param ssl_force_private_cache: The ssl_force_private_cache of this GlobalTuneOptions.  # noqa: E501
        :type: bool
        """

        self._ssl_force_private_cache = ssl_force_private_cache

    @property
    def ssl_keylog(self):
        """Gets the ssl_keylog of this GlobalTuneOptions.  # noqa: E501


        :return: The ssl_keylog of this GlobalTuneOptions.  # noqa: E501
        :rtype: str
        """
        return self._ssl_keylog

    @ssl_keylog.setter
    def ssl_keylog(self, ssl_keylog):
        """Sets the ssl_keylog of this GlobalTuneOptions.


        :param ssl_keylog: The ssl_keylog of this GlobalTuneOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if ssl_keylog not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_keylog` ({0}), must be one of {1}"  # noqa: E501
                .format(ssl_keylog, allowed_values)
            )

        self._ssl_keylog = ssl_keylog

    @property
    def ssl_lifetime(self):
        """Gets the ssl_lifetime of this GlobalTuneOptions.  # noqa: E501


        :return: The ssl_lifetime of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._ssl_lifetime

    @ssl_lifetime.setter
    def ssl_lifetime(self, ssl_lifetime):
        """Sets the ssl_lifetime of this GlobalTuneOptions.


        :param ssl_lifetime: The ssl_lifetime of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._ssl_lifetime = ssl_lifetime

    @property
    def ssl_maxrecord(self):
        """Gets the ssl_maxrecord of this GlobalTuneOptions.  # noqa: E501


        :return: The ssl_maxrecord of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._ssl_maxrecord

    @ssl_maxrecord.setter
    def ssl_maxrecord(self, ssl_maxrecord):
        """Sets the ssl_maxrecord of this GlobalTuneOptions.


        :param ssl_maxrecord: The ssl_maxrecord of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._ssl_maxrecord = ssl_maxrecord

    @property
    def vars_global_max_size(self):
        """Gets the vars_global_max_size of this GlobalTuneOptions.  # noqa: E501


        :return: The vars_global_max_size of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._vars_global_max_size

    @vars_global_max_size.setter
    def vars_global_max_size(self, vars_global_max_size):
        """Sets the vars_global_max_size of this GlobalTuneOptions.


        :param vars_global_max_size: The vars_global_max_size of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._vars_global_max_size = vars_global_max_size

    @property
    def vars_proc_max_size(self):
        """Gets the vars_proc_max_size of this GlobalTuneOptions.  # noqa: E501


        :return: The vars_proc_max_size of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._vars_proc_max_size

    @vars_proc_max_size.setter
    def vars_proc_max_size(self, vars_proc_max_size):
        """Sets the vars_proc_max_size of this GlobalTuneOptions.


        :param vars_proc_max_size: The vars_proc_max_size of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._vars_proc_max_size = vars_proc_max_size

    @property
    def vars_reqres_max_size(self):
        """Gets the vars_reqres_max_size of this GlobalTuneOptions.  # noqa: E501


        :return: The vars_reqres_max_size of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._vars_reqres_max_size

    @vars_reqres_max_size.setter
    def vars_reqres_max_size(self, vars_reqres_max_size):
        """Sets the vars_reqres_max_size of this GlobalTuneOptions.


        :param vars_reqres_max_size: The vars_reqres_max_size of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._vars_reqres_max_size = vars_reqres_max_size

    @property
    def vars_sess_max_size(self):
        """Gets the vars_sess_max_size of this GlobalTuneOptions.  # noqa: E501


        :return: The vars_sess_max_size of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._vars_sess_max_size

    @vars_sess_max_size.setter
    def vars_sess_max_size(self, vars_sess_max_size):
        """Sets the vars_sess_max_size of this GlobalTuneOptions.


        :param vars_sess_max_size: The vars_sess_max_size of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._vars_sess_max_size = vars_sess_max_size

    @property
    def vars_txn_max_size(self):
        """Gets the vars_txn_max_size of this GlobalTuneOptions.  # noqa: E501


        :return: The vars_txn_max_size of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._vars_txn_max_size

    @vars_txn_max_size.setter
    def vars_txn_max_size(self, vars_txn_max_size):
        """Sets the vars_txn_max_size of this GlobalTuneOptions.


        :param vars_txn_max_size: The vars_txn_max_size of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._vars_txn_max_size = vars_txn_max_size

    @property
    def zlib_memlevel(self):
        """Gets the zlib_memlevel of this GlobalTuneOptions.  # noqa: E501


        :return: The zlib_memlevel of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._zlib_memlevel

    @zlib_memlevel.setter
    def zlib_memlevel(self, zlib_memlevel):
        """Sets the zlib_memlevel of this GlobalTuneOptions.


        :param zlib_memlevel: The zlib_memlevel of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._zlib_memlevel = zlib_memlevel

    @property
    def zlib_windowsize(self):
        """Gets the zlib_windowsize of this GlobalTuneOptions.  # noqa: E501


        :return: The zlib_windowsize of this GlobalTuneOptions.  # noqa: E501
        :rtype: int
        """
        return self._zlib_windowsize

    @zlib_windowsize.setter
    def zlib_windowsize(self, zlib_windowsize):
        """Sets the zlib_windowsize of this GlobalTuneOptions.


        :param zlib_windowsize: The zlib_windowsize of this GlobalTuneOptions.  # noqa: E501
        :type: int
        """

        self._zlib_windowsize = zlib_windowsize

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GlobalTuneOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalTuneOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
