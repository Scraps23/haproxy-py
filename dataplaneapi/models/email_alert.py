# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmailAlert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'str',
        'level': 'str',
        'mailers': 'str',
        'myhostname': 'str',
        'to': 'str'
    }

    attribute_map = {
        '_from': 'from',
        'level': 'level',
        'mailers': 'mailers',
        'myhostname': 'myhostname',
        'to': 'to'
    }

    def __init__(self, _from=None, level=None, mailers=None, myhostname=None, to=None):  # noqa: E501
        """EmailAlert - a model defined in Swagger"""  # noqa: E501
        self.__from = None
        self._level = None
        self._mailers = None
        self._myhostname = None
        self._to = None
        self.discriminator = None
        self._from = _from
        if level is not None:
            self.level = level
        self.mailers = mailers
        if myhostname is not None:
            self.myhostname = myhostname
        self.to = to

    @property
    def _from(self):
        """Gets the _from of this EmailAlert.  # noqa: E501


        :return: The _from of this EmailAlert.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this EmailAlert.


        :param _from: The _from of this EmailAlert.  # noqa: E501
        :type: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def level(self):
        """Gets the level of this EmailAlert.  # noqa: E501


        :return: The level of this EmailAlert.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this EmailAlert.


        :param level: The level of this EmailAlert.  # noqa: E501
        :type: str
        """
        allowed_values = ["emerg", "alert", "crit", "err", "warning", "notice", "info", "debug"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def mailers(self):
        """Gets the mailers of this EmailAlert.  # noqa: E501


        :return: The mailers of this EmailAlert.  # noqa: E501
        :rtype: str
        """
        return self._mailers

    @mailers.setter
    def mailers(self, mailers):
        """Sets the mailers of this EmailAlert.


        :param mailers: The mailers of this EmailAlert.  # noqa: E501
        :type: str
        """
        if mailers is None:
            raise ValueError("Invalid value for `mailers`, must not be `None`")  # noqa: E501

        self._mailers = mailers

    @property
    def myhostname(self):
        """Gets the myhostname of this EmailAlert.  # noqa: E501


        :return: The myhostname of this EmailAlert.  # noqa: E501
        :rtype: str
        """
        return self._myhostname

    @myhostname.setter
    def myhostname(self, myhostname):
        """Sets the myhostname of this EmailAlert.


        :param myhostname: The myhostname of this EmailAlert.  # noqa: E501
        :type: str
        """

        self._myhostname = myhostname

    @property
    def to(self):
        """Gets the to of this EmailAlert.  # noqa: E501


        :return: The to of this EmailAlert.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this EmailAlert.


        :param to: The to of this EmailAlert.  # noqa: E501
        :type: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailAlert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailAlert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
