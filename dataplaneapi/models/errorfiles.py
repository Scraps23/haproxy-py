# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Errorfiles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'codes': 'list[int]',
        'name': 'str'
    }

    attribute_map = {
        'codes': 'codes',
        'name': 'name'
    }

    def __init__(self, codes=None, name=None):  # noqa: E501
        """Errorfiles - a model defined in Swagger"""  # noqa: E501
        self._codes = None
        self._name = None
        self.discriminator = None
        if codes is not None:
            self.codes = codes
        if name is not None:
            self.name = name

    @property
    def codes(self):
        """Gets the codes of this Errorfiles.  # noqa: E501


        :return: The codes of this Errorfiles.  # noqa: E501
        :rtype: list[int]
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this Errorfiles.


        :param codes: The codes of this Errorfiles.  # noqa: E501
        :type: list[int]
        """
        allowed_values = [200, 400, 401, 403, 404, 405, 407, 408, 410, 413, 425, 429, 500, 501, 502, 503, 504]  # noqa: E501
        if not set(codes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `codes` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(codes) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._codes = codes

    @property
    def name(self):
        """Gets the name of this Errorfiles.  # noqa: E501


        :return: The name of this Errorfiles.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Errorfiles.


        :param name: The name of this Errorfiles.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Errorfiles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Errorfiles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
