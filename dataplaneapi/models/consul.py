# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Consul(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'description': 'str',
        'enabled': 'bool',
        'id': 'str',
        'name': 'str',
        'namespace': 'str',
        'port': 'int',
        'retry_timeout': 'int',
        'server_slots_base': 'int',
        'server_slots_growth_increment': 'int',
        'server_slots_growth_type': 'str',
        'service_blacklist': 'list[str]',
        'service_whitelist': 'list[str]',
        'service_allowlist': 'list[str]',
        'service_denylist': 'list[str]',
        'token': 'str'
    }

    attribute_map = {
        'address': 'address',
        'description': 'description',
        'enabled': 'enabled',
        'id': 'id',
        'name': 'name',
        'namespace': 'namespace',
        'port': 'port',
        'retry_timeout': 'retry_timeout',
        'server_slots_base': 'server_slots_base',
        'server_slots_growth_increment': 'server_slots_growth_increment',
        'server_slots_growth_type': 'server_slots_growth_type',
        'service_blacklist': 'service-blacklist',
        'service_whitelist': 'service-whitelist',
        'service_allowlist': 'service_allowlist',
        'service_denylist': 'service_denylist',
        'token': 'token'
    }

    def __init__(self, address=None, description=None, enabled=None, id=None, name=None, namespace=None, port=None, retry_timeout=None, server_slots_base=10, server_slots_growth_increment=None, server_slots_growth_type='exponential', service_blacklist=None, service_whitelist=None, service_allowlist=None, service_denylist=None, token=None):  # noqa: E501
        """Consul - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._description = None
        self._enabled = None
        self._id = None
        self._name = None
        self._namespace = None
        self._port = None
        self._retry_timeout = None
        self._server_slots_base = None
        self._server_slots_growth_increment = None
        self._server_slots_growth_type = None
        self._service_blacklist = None
        self._service_whitelist = None
        self._service_allowlist = None
        self._service_denylist = None
        self._token = None
        self.discriminator = None
        self.address = address
        if description is not None:
            self.description = description
        self.enabled = enabled
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        self.port = port
        self.retry_timeout = retry_timeout
        if server_slots_base is not None:
            self.server_slots_base = server_slots_base
        if server_slots_growth_increment is not None:
            self.server_slots_growth_increment = server_slots_growth_increment
        if server_slots_growth_type is not None:
            self.server_slots_growth_type = server_slots_growth_type
        if service_blacklist is not None:
            self.service_blacklist = service_blacklist
        if service_whitelist is not None:
            self.service_whitelist = service_whitelist
        if service_allowlist is not None:
            self.service_allowlist = service_allowlist
        if service_denylist is not None:
            self.service_denylist = service_denylist
        if token is not None:
            self.token = token

    @property
    def address(self):
        """Gets the address of this Consul.  # noqa: E501


        :return: The address of this Consul.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Consul.


        :param address: The address of this Consul.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def description(self):
        """Gets the description of this Consul.  # noqa: E501


        :return: The description of this Consul.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Consul.


        :param description: The description of this Consul.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this Consul.  # noqa: E501


        :return: The enabled of this Consul.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Consul.


        :param enabled: The enabled of this Consul.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this Consul.  # noqa: E501

        Auto generated ID.  # noqa: E501

        :return: The id of this Consul.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Consul.

        Auto generated ID.  # noqa: E501

        :param id: The id of this Consul.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Consul.  # noqa: E501


        :return: The name of this Consul.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Consul.


        :param name: The name of this Consul.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this Consul.  # noqa: E501


        :return: The namespace of this Consul.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Consul.


        :param namespace: The namespace of this Consul.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def port(self):
        """Gets the port of this Consul.  # noqa: E501


        :return: The port of this Consul.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Consul.


        :param port: The port of this Consul.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def retry_timeout(self):
        """Gets the retry_timeout of this Consul.  # noqa: E501

        Duration in seconds in-between data pulling requests to the consul server  # noqa: E501

        :return: The retry_timeout of this Consul.  # noqa: E501
        :rtype: int
        """
        return self._retry_timeout

    @retry_timeout.setter
    def retry_timeout(self, retry_timeout):
        """Sets the retry_timeout of this Consul.

        Duration in seconds in-between data pulling requests to the consul server  # noqa: E501

        :param retry_timeout: The retry_timeout of this Consul.  # noqa: E501
        :type: int
        """
        if retry_timeout is None:
            raise ValueError("Invalid value for `retry_timeout`, must not be `None`")  # noqa: E501

        self._retry_timeout = retry_timeout

    @property
    def server_slots_base(self):
        """Gets the server_slots_base of this Consul.  # noqa: E501


        :return: The server_slots_base of this Consul.  # noqa: E501
        :rtype: int
        """
        return self._server_slots_base

    @server_slots_base.setter
    def server_slots_base(self, server_slots_base):
        """Sets the server_slots_base of this Consul.


        :param server_slots_base: The server_slots_base of this Consul.  # noqa: E501
        :type: int
        """

        self._server_slots_base = server_slots_base

    @property
    def server_slots_growth_increment(self):
        """Gets the server_slots_growth_increment of this Consul.  # noqa: E501


        :return: The server_slots_growth_increment of this Consul.  # noqa: E501
        :rtype: int
        """
        return self._server_slots_growth_increment

    @server_slots_growth_increment.setter
    def server_slots_growth_increment(self, server_slots_growth_increment):
        """Sets the server_slots_growth_increment of this Consul.


        :param server_slots_growth_increment: The server_slots_growth_increment of this Consul.  # noqa: E501
        :type: int
        """

        self._server_slots_growth_increment = server_slots_growth_increment

    @property
    def server_slots_growth_type(self):
        """Gets the server_slots_growth_type of this Consul.  # noqa: E501


        :return: The server_slots_growth_type of this Consul.  # noqa: E501
        :rtype: str
        """
        return self._server_slots_growth_type

    @server_slots_growth_type.setter
    def server_slots_growth_type(self, server_slots_growth_type):
        """Sets the server_slots_growth_type of this Consul.


        :param server_slots_growth_type: The server_slots_growth_type of this Consul.  # noqa: E501
        :type: str
        """
        allowed_values = ["linear", "exponential"]  # noqa: E501
        if server_slots_growth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `server_slots_growth_type` ({0}), must be one of {1}"  # noqa: E501
                .format(server_slots_growth_type, allowed_values)
            )

        self._server_slots_growth_type = server_slots_growth_type

    @property
    def service_blacklist(self):
        """Gets the service_blacklist of this Consul.  # noqa: E501

        deprecated, use service_denylist  # noqa: E501

        :return: The service_blacklist of this Consul.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_blacklist

    @service_blacklist.setter
    def service_blacklist(self, service_blacklist):
        """Sets the service_blacklist of this Consul.

        deprecated, use service_denylist  # noqa: E501

        :param service_blacklist: The service_blacklist of this Consul.  # noqa: E501
        :type: list[str]
        """

        self._service_blacklist = service_blacklist

    @property
    def service_whitelist(self):
        """Gets the service_whitelist of this Consul.  # noqa: E501

        deprecated, use service_allowlist  # noqa: E501

        :return: The service_whitelist of this Consul.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_whitelist

    @service_whitelist.setter
    def service_whitelist(self, service_whitelist):
        """Sets the service_whitelist of this Consul.

        deprecated, use service_allowlist  # noqa: E501

        :param service_whitelist: The service_whitelist of this Consul.  # noqa: E501
        :type: list[str]
        """

        self._service_whitelist = service_whitelist

    @property
    def service_allowlist(self):
        """Gets the service_allowlist of this Consul.  # noqa: E501


        :return: The service_allowlist of this Consul.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_allowlist

    @service_allowlist.setter
    def service_allowlist(self, service_allowlist):
        """Sets the service_allowlist of this Consul.


        :param service_allowlist: The service_allowlist of this Consul.  # noqa: E501
        :type: list[str]
        """

        self._service_allowlist = service_allowlist

    @property
    def service_denylist(self):
        """Gets the service_denylist of this Consul.  # noqa: E501


        :return: The service_denylist of this Consul.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_denylist

    @service_denylist.setter
    def service_denylist(self, service_denylist):
        """Sets the service_denylist of this Consul.


        :param service_denylist: The service_denylist of this Consul.  # noqa: E501
        :type: list[str]
        """

        self._service_denylist = service_denylist

    @property
    def token(self):
        """Gets the token of this Consul.  # noqa: E501


        :return: The token of this Consul.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Consul.


        :param token: The token of this Consul.  # noqa: E501
        :type: str
        """

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Consul, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Consul):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
