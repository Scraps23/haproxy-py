# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StickTableEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bytes_in_cnt': 'int',
        'bytes_in_rate': 'int',
        'bytes_out_cnt': 'int',
        'bytes_out_rate': 'int',
        'conn_cnt': 'int',
        'conn_cur': 'int',
        'conn_rate': 'int',
        'exp': 'int',
        'gpc0': 'int',
        'gpc0_rate': 'int',
        'gpc1': 'int',
        'gpc1_rate': 'int',
        'gpt0': 'int',
        'http_err_cnt': 'int',
        'http_err_rate': 'int',
        'http_req_cnt': 'int',
        'http_req_rate': 'int',
        'id': 'str',
        'key': 'str',
        'server_id': 'int',
        'sess_cnt': 'int',
        'sess_rate': 'int',
        'use': 'bool'
    }

    attribute_map = {
        'bytes_in_cnt': 'bytes_in_cnt',
        'bytes_in_rate': 'bytes_in_rate',
        'bytes_out_cnt': 'bytes_out_cnt',
        'bytes_out_rate': 'bytes_out_rate',
        'conn_cnt': 'conn_cnt',
        'conn_cur': 'conn_cur',
        'conn_rate': 'conn_rate',
        'exp': 'exp',
        'gpc0': 'gpc0',
        'gpc0_rate': 'gpc0_rate',
        'gpc1': 'gpc1',
        'gpc1_rate': 'gpc1_rate',
        'gpt0': 'gpt0',
        'http_err_cnt': 'http_err_cnt',
        'http_err_rate': 'http_err_rate',
        'http_req_cnt': 'http_req_cnt',
        'http_req_rate': 'http_req_rate',
        'id': 'id',
        'key': 'key',
        'server_id': 'server_id',
        'sess_cnt': 'sess_cnt',
        'sess_rate': 'sess_rate',
        'use': 'use'
    }

    def __init__(self, bytes_in_cnt=None, bytes_in_rate=None, bytes_out_cnt=None, bytes_out_rate=None, conn_cnt=None, conn_cur=None, conn_rate=None, exp=None, gpc0=None, gpc0_rate=None, gpc1=None, gpc1_rate=None, gpt0=None, http_err_cnt=None, http_err_rate=None, http_req_cnt=None, http_req_rate=None, id=None, key=None, server_id=None, sess_cnt=None, sess_rate=None, use=None):  # noqa: E501
        """StickTableEntry - a model defined in Swagger"""  # noqa: E501
        self._bytes_in_cnt = None
        self._bytes_in_rate = None
        self._bytes_out_cnt = None
        self._bytes_out_rate = None
        self._conn_cnt = None
        self._conn_cur = None
        self._conn_rate = None
        self._exp = None
        self._gpc0 = None
        self._gpc0_rate = None
        self._gpc1 = None
        self._gpc1_rate = None
        self._gpt0 = None
        self._http_err_cnt = None
        self._http_err_rate = None
        self._http_req_cnt = None
        self._http_req_rate = None
        self._id = None
        self._key = None
        self._server_id = None
        self._sess_cnt = None
        self._sess_rate = None
        self._use = None
        self.discriminator = None
        if bytes_in_cnt is not None:
            self.bytes_in_cnt = bytes_in_cnt
        if bytes_in_rate is not None:
            self.bytes_in_rate = bytes_in_rate
        if bytes_out_cnt is not None:
            self.bytes_out_cnt = bytes_out_cnt
        if bytes_out_rate is not None:
            self.bytes_out_rate = bytes_out_rate
        if conn_cnt is not None:
            self.conn_cnt = conn_cnt
        if conn_cur is not None:
            self.conn_cur = conn_cur
        if conn_rate is not None:
            self.conn_rate = conn_rate
        if exp is not None:
            self.exp = exp
        if gpc0 is not None:
            self.gpc0 = gpc0
        if gpc0_rate is not None:
            self.gpc0_rate = gpc0_rate
        if gpc1 is not None:
            self.gpc1 = gpc1
        if gpc1_rate is not None:
            self.gpc1_rate = gpc1_rate
        if gpt0 is not None:
            self.gpt0 = gpt0
        if http_err_cnt is not None:
            self.http_err_cnt = http_err_cnt
        if http_err_rate is not None:
            self.http_err_rate = http_err_rate
        if http_req_cnt is not None:
            self.http_req_cnt = http_req_cnt
        if http_req_rate is not None:
            self.http_req_rate = http_req_rate
        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if server_id is not None:
            self.server_id = server_id
        if sess_cnt is not None:
            self.sess_cnt = sess_cnt
        if sess_rate is not None:
            self.sess_rate = sess_rate
        if use is not None:
            self.use = use

    @property
    def bytes_in_cnt(self):
        """Gets the bytes_in_cnt of this StickTableEntry.  # noqa: E501


        :return: The bytes_in_cnt of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._bytes_in_cnt

    @bytes_in_cnt.setter
    def bytes_in_cnt(self, bytes_in_cnt):
        """Sets the bytes_in_cnt of this StickTableEntry.


        :param bytes_in_cnt: The bytes_in_cnt of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._bytes_in_cnt = bytes_in_cnt

    @property
    def bytes_in_rate(self):
        """Gets the bytes_in_rate of this StickTableEntry.  # noqa: E501


        :return: The bytes_in_rate of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._bytes_in_rate

    @bytes_in_rate.setter
    def bytes_in_rate(self, bytes_in_rate):
        """Sets the bytes_in_rate of this StickTableEntry.


        :param bytes_in_rate: The bytes_in_rate of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._bytes_in_rate = bytes_in_rate

    @property
    def bytes_out_cnt(self):
        """Gets the bytes_out_cnt of this StickTableEntry.  # noqa: E501


        :return: The bytes_out_cnt of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._bytes_out_cnt

    @bytes_out_cnt.setter
    def bytes_out_cnt(self, bytes_out_cnt):
        """Sets the bytes_out_cnt of this StickTableEntry.


        :param bytes_out_cnt: The bytes_out_cnt of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._bytes_out_cnt = bytes_out_cnt

    @property
    def bytes_out_rate(self):
        """Gets the bytes_out_rate of this StickTableEntry.  # noqa: E501


        :return: The bytes_out_rate of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._bytes_out_rate

    @bytes_out_rate.setter
    def bytes_out_rate(self, bytes_out_rate):
        """Sets the bytes_out_rate of this StickTableEntry.


        :param bytes_out_rate: The bytes_out_rate of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._bytes_out_rate = bytes_out_rate

    @property
    def conn_cnt(self):
        """Gets the conn_cnt of this StickTableEntry.  # noqa: E501


        :return: The conn_cnt of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._conn_cnt

    @conn_cnt.setter
    def conn_cnt(self, conn_cnt):
        """Sets the conn_cnt of this StickTableEntry.


        :param conn_cnt: The conn_cnt of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._conn_cnt = conn_cnt

    @property
    def conn_cur(self):
        """Gets the conn_cur of this StickTableEntry.  # noqa: E501


        :return: The conn_cur of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._conn_cur

    @conn_cur.setter
    def conn_cur(self, conn_cur):
        """Sets the conn_cur of this StickTableEntry.


        :param conn_cur: The conn_cur of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._conn_cur = conn_cur

    @property
    def conn_rate(self):
        """Gets the conn_rate of this StickTableEntry.  # noqa: E501


        :return: The conn_rate of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._conn_rate

    @conn_rate.setter
    def conn_rate(self, conn_rate):
        """Sets the conn_rate of this StickTableEntry.


        :param conn_rate: The conn_rate of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._conn_rate = conn_rate

    @property
    def exp(self):
        """Gets the exp of this StickTableEntry.  # noqa: E501


        :return: The exp of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._exp

    @exp.setter
    def exp(self, exp):
        """Sets the exp of this StickTableEntry.


        :param exp: The exp of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._exp = exp

    @property
    def gpc0(self):
        """Gets the gpc0 of this StickTableEntry.  # noqa: E501


        :return: The gpc0 of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._gpc0

    @gpc0.setter
    def gpc0(self, gpc0):
        """Sets the gpc0 of this StickTableEntry.


        :param gpc0: The gpc0 of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._gpc0 = gpc0

    @property
    def gpc0_rate(self):
        """Gets the gpc0_rate of this StickTableEntry.  # noqa: E501


        :return: The gpc0_rate of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._gpc0_rate

    @gpc0_rate.setter
    def gpc0_rate(self, gpc0_rate):
        """Sets the gpc0_rate of this StickTableEntry.


        :param gpc0_rate: The gpc0_rate of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._gpc0_rate = gpc0_rate

    @property
    def gpc1(self):
        """Gets the gpc1 of this StickTableEntry.  # noqa: E501


        :return: The gpc1 of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._gpc1

    @gpc1.setter
    def gpc1(self, gpc1):
        """Sets the gpc1 of this StickTableEntry.


        :param gpc1: The gpc1 of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._gpc1 = gpc1

    @property
    def gpc1_rate(self):
        """Gets the gpc1_rate of this StickTableEntry.  # noqa: E501


        :return: The gpc1_rate of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._gpc1_rate

    @gpc1_rate.setter
    def gpc1_rate(self, gpc1_rate):
        """Sets the gpc1_rate of this StickTableEntry.


        :param gpc1_rate: The gpc1_rate of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._gpc1_rate = gpc1_rate

    @property
    def gpt0(self):
        """Gets the gpt0 of this StickTableEntry.  # noqa: E501


        :return: The gpt0 of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._gpt0

    @gpt0.setter
    def gpt0(self, gpt0):
        """Sets the gpt0 of this StickTableEntry.


        :param gpt0: The gpt0 of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._gpt0 = gpt0

    @property
    def http_err_cnt(self):
        """Gets the http_err_cnt of this StickTableEntry.  # noqa: E501


        :return: The http_err_cnt of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._http_err_cnt

    @http_err_cnt.setter
    def http_err_cnt(self, http_err_cnt):
        """Sets the http_err_cnt of this StickTableEntry.


        :param http_err_cnt: The http_err_cnt of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._http_err_cnt = http_err_cnt

    @property
    def http_err_rate(self):
        """Gets the http_err_rate of this StickTableEntry.  # noqa: E501


        :return: The http_err_rate of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._http_err_rate

    @http_err_rate.setter
    def http_err_rate(self, http_err_rate):
        """Sets the http_err_rate of this StickTableEntry.


        :param http_err_rate: The http_err_rate of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._http_err_rate = http_err_rate

    @property
    def http_req_cnt(self):
        """Gets the http_req_cnt of this StickTableEntry.  # noqa: E501


        :return: The http_req_cnt of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._http_req_cnt

    @http_req_cnt.setter
    def http_req_cnt(self, http_req_cnt):
        """Sets the http_req_cnt of this StickTableEntry.


        :param http_req_cnt: The http_req_cnt of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._http_req_cnt = http_req_cnt

    @property
    def http_req_rate(self):
        """Gets the http_req_rate of this StickTableEntry.  # noqa: E501


        :return: The http_req_rate of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._http_req_rate

    @http_req_rate.setter
    def http_req_rate(self, http_req_rate):
        """Sets the http_req_rate of this StickTableEntry.


        :param http_req_rate: The http_req_rate of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._http_req_rate = http_req_rate

    @property
    def id(self):
        """Gets the id of this StickTableEntry.  # noqa: E501


        :return: The id of this StickTableEntry.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StickTableEntry.


        :param id: The id of this StickTableEntry.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this StickTableEntry.  # noqa: E501


        :return: The key of this StickTableEntry.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this StickTableEntry.


        :param key: The key of this StickTableEntry.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def server_id(self):
        """Gets the server_id of this StickTableEntry.  # noqa: E501


        :return: The server_id of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this StickTableEntry.


        :param server_id: The server_id of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._server_id = server_id

    @property
    def sess_cnt(self):
        """Gets the sess_cnt of this StickTableEntry.  # noqa: E501


        :return: The sess_cnt of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._sess_cnt

    @sess_cnt.setter
    def sess_cnt(self, sess_cnt):
        """Sets the sess_cnt of this StickTableEntry.


        :param sess_cnt: The sess_cnt of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._sess_cnt = sess_cnt

    @property
    def sess_rate(self):
        """Gets the sess_rate of this StickTableEntry.  # noqa: E501


        :return: The sess_rate of this StickTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._sess_rate

    @sess_rate.setter
    def sess_rate(self, sess_rate):
        """Sets the sess_rate of this StickTableEntry.


        :param sess_rate: The sess_rate of this StickTableEntry.  # noqa: E501
        :type: int
        """

        self._sess_rate = sess_rate

    @property
    def use(self):
        """Gets the use of this StickTableEntry.  # noqa: E501


        :return: The use of this StickTableEntry.  # noqa: E501
        :rtype: bool
        """
        return self._use

    @use.setter
    def use(self, use):
        """Sets the use of this StickTableEntry.


        :param use: The use of this StickTableEntry.  # noqa: E501
        :type: bool
        """

        self._use = use

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StickTableEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StickTableEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
