# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StickTable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fields': 'list[StickTableFields]',
        'name': 'str',
        'process': 'int',
        'size': 'int',
        'type': 'str',
        'used': 'int'
    }

    attribute_map = {
        'fields': 'fields',
        'name': 'name',
        'process': 'process',
        'size': 'size',
        'type': 'type',
        'used': 'used'
    }

    def __init__(self, fields=None, name=None, process=None, size=None, type=None, used=None):  # noqa: E501
        """StickTable - a model defined in Swagger"""  # noqa: E501
        self._fields = None
        self._name = None
        self._process = None
        self._size = None
        self._type = None
        self._used = None
        self.discriminator = None
        if fields is not None:
            self.fields = fields
        if name is not None:
            self.name = name
        if process is not None:
            self.process = process
        if size is not None:
            self.size = size
        if type is not None:
            self.type = type
        if used is not None:
            self.used = used

    @property
    def fields(self):
        """Gets the fields of this StickTable.  # noqa: E501


        :return: The fields of this StickTable.  # noqa: E501
        :rtype: list[StickTableFields]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this StickTable.


        :param fields: The fields of this StickTable.  # noqa: E501
        :type: list[StickTableFields]
        """

        self._fields = fields

    @property
    def name(self):
        """Gets the name of this StickTable.  # noqa: E501


        :return: The name of this StickTable.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StickTable.


        :param name: The name of this StickTable.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def process(self):
        """Gets the process of this StickTable.  # noqa: E501

        Process number if master-worker mode  # noqa: E501

        :return: The process of this StickTable.  # noqa: E501
        :rtype: int
        """
        return self._process

    @process.setter
    def process(self, process):
        """Sets the process of this StickTable.

        Process number if master-worker mode  # noqa: E501

        :param process: The process of this StickTable.  # noqa: E501
        :type: int
        """

        self._process = process

    @property
    def size(self):
        """Gets the size of this StickTable.  # noqa: E501


        :return: The size of this StickTable.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this StickTable.


        :param size: The size of this StickTable.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def type(self):
        """Gets the type of this StickTable.  # noqa: E501


        :return: The type of this StickTable.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StickTable.


        :param type: The type of this StickTable.  # noqa: E501
        :type: str
        """
        allowed_values = ["ip", "ipv6", "integer", "string", "binary"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def used(self):
        """Gets the used of this StickTable.  # noqa: E501


        :return: The used of this StickTable.  # noqa: E501
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this StickTable.


        :param used: The used of this StickTable.  # noqa: E501
        :type: int
        """

        self._used = used

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StickTable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StickTable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
