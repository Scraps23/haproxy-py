# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GlobalWurflOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cache_size': 'int',
        'data_file': 'str',
        'information_list': 'str',
        'information_list_separator': 'str',
        'patch_file': 'str'
    }

    attribute_map = {
        'cache_size': 'cache_size',
        'data_file': 'data_file',
        'information_list': 'information_list',
        'information_list_separator': 'information_list_separator',
        'patch_file': 'patch_file'
    }

    def __init__(self, cache_size=None, data_file=None, information_list=None, information_list_separator=None, patch_file=None):  # noqa: E501
        """GlobalWurflOptions - a model defined in Swagger"""  # noqa: E501
        self._cache_size = None
        self._data_file = None
        self._information_list = None
        self._information_list_separator = None
        self._patch_file = None
        self.discriminator = None
        if cache_size is not None:
            self.cache_size = cache_size
        if data_file is not None:
            self.data_file = data_file
        if information_list is not None:
            self.information_list = information_list
        if information_list_separator is not None:
            self.information_list_separator = information_list_separator
        if patch_file is not None:
            self.patch_file = patch_file

    @property
    def cache_size(self):
        """Gets the cache_size of this GlobalWurflOptions.  # noqa: E501


        :return: The cache_size of this GlobalWurflOptions.  # noqa: E501
        :rtype: int
        """
        return self._cache_size

    @cache_size.setter
    def cache_size(self, cache_size):
        """Sets the cache_size of this GlobalWurflOptions.


        :param cache_size: The cache_size of this GlobalWurflOptions.  # noqa: E501
        :type: int
        """

        self._cache_size = cache_size

    @property
    def data_file(self):
        """Gets the data_file of this GlobalWurflOptions.  # noqa: E501


        :return: The data_file of this GlobalWurflOptions.  # noqa: E501
        :rtype: str
        """
        return self._data_file

    @data_file.setter
    def data_file(self, data_file):
        """Sets the data_file of this GlobalWurflOptions.


        :param data_file: The data_file of this GlobalWurflOptions.  # noqa: E501
        :type: str
        """

        self._data_file = data_file

    @property
    def information_list(self):
        """Gets the information_list of this GlobalWurflOptions.  # noqa: E501


        :return: The information_list of this GlobalWurflOptions.  # noqa: E501
        :rtype: str
        """
        return self._information_list

    @information_list.setter
    def information_list(self, information_list):
        """Sets the information_list of this GlobalWurflOptions.


        :param information_list: The information_list of this GlobalWurflOptions.  # noqa: E501
        :type: str
        """

        self._information_list = information_list

    @property
    def information_list_separator(self):
        """Gets the information_list_separator of this GlobalWurflOptions.  # noqa: E501


        :return: The information_list_separator of this GlobalWurflOptions.  # noqa: E501
        :rtype: str
        """
        return self._information_list_separator

    @information_list_separator.setter
    def information_list_separator(self, information_list_separator):
        """Sets the information_list_separator of this GlobalWurflOptions.


        :param information_list_separator: The information_list_separator of this GlobalWurflOptions.  # noqa: E501
        :type: str
        """

        self._information_list_separator = information_list_separator

    @property
    def patch_file(self):
        """Gets the patch_file of this GlobalWurflOptions.  # noqa: E501


        :return: The patch_file of this GlobalWurflOptions.  # noqa: E501
        :rtype: str
        """
        return self._patch_file

    @patch_file.setter
    def patch_file(self, patch_file):
        """Sets the patch_file of this GlobalWurflOptions.


        :param patch_file: The patch_file of this GlobalWurflOptions.  # noqa: E501
        :type: str
        """

        self._patch_file = patch_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GlobalWurflOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalWurflOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
