# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from dataplaneapi.models.server_params import ServerParams  # noqa: F401,E501

class ServerTemplate(ServerParams):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fqdn': 'str',
        'id': 'int',
        'num_or_range': 'str',
        'port': 'int',
        'prefix': 'str'
    }
    if hasattr(ServerParams, "swagger_types"):
        swagger_types.update(ServerParams.swagger_types)

    attribute_map = {
        'fqdn': 'fqdn',
        'id': 'id',
        'num_or_range': 'num_or_range',
        'port': 'port',
        'prefix': 'prefix'
    }
    if hasattr(ServerParams, "attribute_map"):
        attribute_map.update(ServerParams.attribute_map)

    def __init__(self, fqdn=None, id=None, num_or_range=None, port=None, prefix=None, *args, **kwargs):  # noqa: E501
        """ServerTemplate - a model defined in Swagger"""  # noqa: E501
        self._fqdn = None
        self._id = None
        self._num_or_range = None
        self._port = None
        self._prefix = None
        self.discriminator = None
        self.fqdn = fqdn
        if id is not None:
            self.id = id
        self.num_or_range = num_or_range
        if port is not None:
            self.port = port
        self.prefix = prefix
        ServerParams.__init__(self, *args, **kwargs)

    @property
    def fqdn(self):
        """Gets the fqdn of this ServerTemplate.  # noqa: E501


        :return: The fqdn of this ServerTemplate.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this ServerTemplate.


        :param fqdn: The fqdn of this ServerTemplate.  # noqa: E501
        :type: str
        """
        if fqdn is None:
            raise ValueError("Invalid value for `fqdn`, must not be `None`")  # noqa: E501

        self._fqdn = fqdn

    @property
    def id(self):
        """Gets the id of this ServerTemplate.  # noqa: E501


        :return: The id of this ServerTemplate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServerTemplate.


        :param id: The id of this ServerTemplate.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def num_or_range(self):
        """Gets the num_or_range of this ServerTemplate.  # noqa: E501


        :return: The num_or_range of this ServerTemplate.  # noqa: E501
        :rtype: str
        """
        return self._num_or_range

    @num_or_range.setter
    def num_or_range(self, num_or_range):
        """Sets the num_or_range of this ServerTemplate.


        :param num_or_range: The num_or_range of this ServerTemplate.  # noqa: E501
        :type: str
        """
        if num_or_range is None:
            raise ValueError("Invalid value for `num_or_range`, must not be `None`")  # noqa: E501

        self._num_or_range = num_or_range

    @property
    def port(self):
        """Gets the port of this ServerTemplate.  # noqa: E501


        :return: The port of this ServerTemplate.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ServerTemplate.


        :param port: The port of this ServerTemplate.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def prefix(self):
        """Gets the prefix of this ServerTemplate.  # noqa: E501


        :return: The prefix of this ServerTemplate.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this ServerTemplate.


        :param prefix: The prefix of this ServerTemplate.  # noqa: E501
        :type: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")  # noqa: E501

        self._prefix = prefix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
