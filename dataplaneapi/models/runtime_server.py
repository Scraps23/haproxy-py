# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RuntimeServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'admin_state': 'str',
        'id': 'str',
        'name': 'str',
        'operational_state': 'str',
        'port': 'int'
    }

    attribute_map = {
        'address': 'address',
        'admin_state': 'admin_state',
        'id': 'id',
        'name': 'name',
        'operational_state': 'operational_state',
        'port': 'port'
    }

    def __init__(self, address=None, admin_state=None, id=None, name=None, operational_state=None, port=None):  # noqa: E501
        """RuntimeServer - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._admin_state = None
        self._id = None
        self._name = None
        self._operational_state = None
        self._port = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if admin_state is not None:
            self.admin_state = admin_state
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if operational_state is not None:
            self.operational_state = operational_state
        if port is not None:
            self.port = port

    @property
    def address(self):
        """Gets the address of this RuntimeServer.  # noqa: E501


        :return: The address of this RuntimeServer.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this RuntimeServer.


        :param address: The address of this RuntimeServer.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def admin_state(self):
        """Gets the admin_state of this RuntimeServer.  # noqa: E501


        :return: The admin_state of this RuntimeServer.  # noqa: E501
        :rtype: str
        """
        return self._admin_state

    @admin_state.setter
    def admin_state(self, admin_state):
        """Sets the admin_state of this RuntimeServer.


        :param admin_state: The admin_state of this RuntimeServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["ready", "maint", "drain"]  # noqa: E501
        if admin_state not in allowed_values:
            raise ValueError(
                "Invalid value for `admin_state` ({0}), must be one of {1}"  # noqa: E501
                .format(admin_state, allowed_values)
            )

        self._admin_state = admin_state

    @property
    def id(self):
        """Gets the id of this RuntimeServer.  # noqa: E501


        :return: The id of this RuntimeServer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RuntimeServer.


        :param id: The id of this RuntimeServer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RuntimeServer.  # noqa: E501


        :return: The name of this RuntimeServer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RuntimeServer.


        :param name: The name of this RuntimeServer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operational_state(self):
        """Gets the operational_state of this RuntimeServer.  # noqa: E501


        :return: The operational_state of this RuntimeServer.  # noqa: E501
        :rtype: str
        """
        return self._operational_state

    @operational_state.setter
    def operational_state(self, operational_state):
        """Sets the operational_state of this RuntimeServer.


        :param operational_state: The operational_state of this RuntimeServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["up", "down", "stopping"]  # noqa: E501
        if operational_state not in allowed_values:
            raise ValueError(
                "Invalid value for `operational_state` ({0}), must be one of {1}"  # noqa: E501
                .format(operational_state, allowed_values)
            )

        self._operational_state = operational_state

    @property
    def port(self):
        """Gets the port of this RuntimeServer.  # noqa: E501


        :return: The port of this RuntimeServer.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this RuntimeServer.


        :param port: The port of this RuntimeServer.  # noqa: E501
        :type: int
        """

        self._port = port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuntimeServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuntimeServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
