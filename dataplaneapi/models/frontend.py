# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Frontend(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accept_invalid_http_request': 'str',
        'backlog': 'int',
        'bind_process': 'str',
        'clflog': 'bool',
        'client_fin_timeout': 'int',
        'client_timeout': 'int',
        'clitcpka': 'str',
        'clitcpka_cnt': 'int',
        'clitcpka_idle': 'int',
        'clitcpka_intvl': 'int',
        'compression': 'Compression',
        'contstats': 'str',
        'default_backend': 'str',
        'description': 'str',
        'disable_h2_upgrade': 'str',
        'disabled': 'bool',
        'dontlog_normal': 'str',
        'dontlognull': 'str',
        'email_alert': 'EmailAlert',
        'enabled': 'bool',
        'error_files': 'list[Errorfile]',
        'error_log_format': 'str',
        'errorfiles_from_http_errors': 'list[Errorfiles]',
        'errorloc302': 'Errorloc',
        'errorloc303': 'Errorloc',
        'forwardfor': 'Forwardfor',
        '_from': 'str',
        'h1_case_adjust_bogus_client': 'str',
        'http_buffer_request': 'str',
        'http_use_htx': 'str',
        'http_connection_mode': 'str',
        'http_ignore_probes': 'str',
        'http_keep_alive_timeout': 'int',
        'http_no_delay': 'str',
        'http_request_timeout': 'int',
        'http_restrict_req_hdr_names': 'str',
        'http_use_proxy_header': 'str',
        'httplog': 'bool',
        'httpslog': 'str',
        'id': 'int',
        'idle_close_on_response': 'str',
        'independent_streams': 'str',
        'log_format': 'str',
        'log_format_sd': 'str',
        'log_separate_errors': 'str',
        'log_tag': 'str',
        'logasap': 'str',
        'maxconn': 'int',
        'mode': 'str',
        'monitor_fail': 'MonitorFail',
        'monitor_uri': 'MonitorUri',
        'name': 'str',
        'nolinger': 'str',
        'originalto': 'Originalto',
        'socket_stats': 'str',
        'splice_auto': 'str',
        'splice_request': 'str',
        'splice_response': 'str',
        'stats_options': 'StatsOptions',
        'stick_table': 'ConfigStickTable',
        'tarpit_timeout': 'int',
        'tcp_smart_accept': 'str',
        'tcpka': 'str',
        'tcplog': 'bool',
        'unique_id_format': 'str',
        'unique_id_header': 'str'
    }

    attribute_map = {
        'accept_invalid_http_request': 'accept_invalid_http_request',
        'backlog': 'backlog',
        'bind_process': 'bind_process',
        'clflog': 'clflog',
        'client_fin_timeout': 'client_fin_timeout',
        'client_timeout': 'client_timeout',
        'clitcpka': 'clitcpka',
        'clitcpka_cnt': 'clitcpka_cnt',
        'clitcpka_idle': 'clitcpka_idle',
        'clitcpka_intvl': 'clitcpka_intvl',
        'compression': 'compression',
        'contstats': 'contstats',
        'default_backend': 'default_backend',
        'description': 'description',
        'disable_h2_upgrade': 'disable_h2_upgrade',
        'disabled': 'disabled',
        'dontlog_normal': 'dontlog_normal',
        'dontlognull': 'dontlognull',
        'email_alert': 'email_alert',
        'enabled': 'enabled',
        'error_files': 'error_files',
        'error_log_format': 'error_log_format',
        'errorfiles_from_http_errors': 'errorfiles_from_http_errors',
        'errorloc302': 'errorloc302',
        'errorloc303': 'errorloc303',
        'forwardfor': 'forwardfor',
        '_from': 'from',
        'h1_case_adjust_bogus_client': 'h1_case_adjust_bogus_client',
        'http_buffer_request': 'http-buffer-request',
        'http_use_htx': 'http-use-htx',
        'http_connection_mode': 'http_connection_mode',
        'http_ignore_probes': 'http_ignore_probes',
        'http_keep_alive_timeout': 'http_keep_alive_timeout',
        'http_no_delay': 'http_no_delay',
        'http_request_timeout': 'http_request_timeout',
        'http_restrict_req_hdr_names': 'http_restrict_req_hdr_names',
        'http_use_proxy_header': 'http_use_proxy_header',
        'httplog': 'httplog',
        'httpslog': 'httpslog',
        'id': 'id',
        'idle_close_on_response': 'idle_close_on_response',
        'independent_streams': 'independent_streams',
        'log_format': 'log_format',
        'log_format_sd': 'log_format_sd',
        'log_separate_errors': 'log_separate_errors',
        'log_tag': 'log_tag',
        'logasap': 'logasap',
        'maxconn': 'maxconn',
        'mode': 'mode',
        'monitor_fail': 'monitor_fail',
        'monitor_uri': 'monitor_uri',
        'name': 'name',
        'nolinger': 'nolinger',
        'originalto': 'originalto',
        'socket_stats': 'socket_stats',
        'splice_auto': 'splice_auto',
        'splice_request': 'splice_request',
        'splice_response': 'splice_response',
        'stats_options': 'stats_options',
        'stick_table': 'stick_table',
        'tarpit_timeout': 'tarpit_timeout',
        'tcp_smart_accept': 'tcp_smart_accept',
        'tcpka': 'tcpka',
        'tcplog': 'tcplog',
        'unique_id_format': 'unique_id_format',
        'unique_id_header': 'unique_id_header'
    }

    def __init__(self, accept_invalid_http_request=None, backlog=None, bind_process=None, clflog=None, client_fin_timeout=None, client_timeout=None, clitcpka=None, clitcpka_cnt=None, clitcpka_idle=None, clitcpka_intvl=None, compression=None, contstats=None, default_backend=None, description=None, disable_h2_upgrade=None, disabled=None, dontlog_normal=None, dontlognull=None, email_alert=None, enabled=None, error_files=None, error_log_format=None, errorfiles_from_http_errors=None, errorloc302=None, errorloc303=None, forwardfor=None, _from=None, h1_case_adjust_bogus_client=None, http_buffer_request=None, http_use_htx=None, http_connection_mode=None, http_ignore_probes=None, http_keep_alive_timeout=None, http_no_delay=None, http_request_timeout=None, http_restrict_req_hdr_names=None, http_use_proxy_header=None, httplog=None, httpslog=None, id=None, idle_close_on_response=None, independent_streams=None, log_format=None, log_format_sd=None, log_separate_errors=None, log_tag=None, logasap=None, maxconn=None, mode=None, monitor_fail=None, monitor_uri=None, name=None, nolinger=None, originalto=None, socket_stats=None, splice_auto=None, splice_request=None, splice_response=None, stats_options=None, stick_table=None, tarpit_timeout=None, tcp_smart_accept=None, tcpka=None, tcplog=None, unique_id_format=None, unique_id_header=None):  # noqa: E501
        """Frontend - a model defined in Swagger"""  # noqa: E501
        self._accept_invalid_http_request = None
        self._backlog = None
        self._bind_process = None
        self._clflog = None
        self._client_fin_timeout = None
        self._client_timeout = None
        self._clitcpka = None
        self._clitcpka_cnt = None
        self._clitcpka_idle = None
        self._clitcpka_intvl = None
        self._compression = None
        self._contstats = None
        self._default_backend = None
        self._description = None
        self._disable_h2_upgrade = None
        self._disabled = None
        self._dontlog_normal = None
        self._dontlognull = None
        self._email_alert = None
        self._enabled = None
        self._error_files = None
        self._error_log_format = None
        self._errorfiles_from_http_errors = None
        self._errorloc302 = None
        self._errorloc303 = None
        self._forwardfor = None
        self.__from = None
        self._h1_case_adjust_bogus_client = None
        self._http_buffer_request = None
        self._http_use_htx = None
        self._http_connection_mode = None
        self._http_ignore_probes = None
        self._http_keep_alive_timeout = None
        self._http_no_delay = None
        self._http_request_timeout = None
        self._http_restrict_req_hdr_names = None
        self._http_use_proxy_header = None
        self._httplog = None
        self._httpslog = None
        self._id = None
        self._idle_close_on_response = None
        self._independent_streams = None
        self._log_format = None
        self._log_format_sd = None
        self._log_separate_errors = None
        self._log_tag = None
        self._logasap = None
        self._maxconn = None
        self._mode = None
        self._monitor_fail = None
        self._monitor_uri = None
        self._name = None
        self._nolinger = None
        self._originalto = None
        self._socket_stats = None
        self._splice_auto = None
        self._splice_request = None
        self._splice_response = None
        self._stats_options = None
        self._stick_table = None
        self._tarpit_timeout = None
        self._tcp_smart_accept = None
        self._tcpka = None
        self._tcplog = None
        self._unique_id_format = None
        self._unique_id_header = None
        self.discriminator = None
        if accept_invalid_http_request is not None:
            self.accept_invalid_http_request = accept_invalid_http_request
        if backlog is not None:
            self.backlog = backlog
        if bind_process is not None:
            self.bind_process = bind_process
        if clflog is not None:
            self.clflog = clflog
        if client_fin_timeout is not None:
            self.client_fin_timeout = client_fin_timeout
        if client_timeout is not None:
            self.client_timeout = client_timeout
        if clitcpka is not None:
            self.clitcpka = clitcpka
        if clitcpka_cnt is not None:
            self.clitcpka_cnt = clitcpka_cnt
        if clitcpka_idle is not None:
            self.clitcpka_idle = clitcpka_idle
        if clitcpka_intvl is not None:
            self.clitcpka_intvl = clitcpka_intvl
        if compression is not None:
            self.compression = compression
        if contstats is not None:
            self.contstats = contstats
        if default_backend is not None:
            self.default_backend = default_backend
        if description is not None:
            self.description = description
        if disable_h2_upgrade is not None:
            self.disable_h2_upgrade = disable_h2_upgrade
        if disabled is not None:
            self.disabled = disabled
        if dontlog_normal is not None:
            self.dontlog_normal = dontlog_normal
        if dontlognull is not None:
            self.dontlognull = dontlognull
        if email_alert is not None:
            self.email_alert = email_alert
        if enabled is not None:
            self.enabled = enabled
        if error_files is not None:
            self.error_files = error_files
        if error_log_format is not None:
            self.error_log_format = error_log_format
        if errorfiles_from_http_errors is not None:
            self.errorfiles_from_http_errors = errorfiles_from_http_errors
        if errorloc302 is not None:
            self.errorloc302 = errorloc302
        if errorloc303 is not None:
            self.errorloc303 = errorloc303
        if forwardfor is not None:
            self.forwardfor = forwardfor
        if _from is not None:
            self._from = _from
        if h1_case_adjust_bogus_client is not None:
            self.h1_case_adjust_bogus_client = h1_case_adjust_bogus_client
        if http_buffer_request is not None:
            self.http_buffer_request = http_buffer_request
        if http_use_htx is not None:
            self.http_use_htx = http_use_htx
        if http_connection_mode is not None:
            self.http_connection_mode = http_connection_mode
        if http_ignore_probes is not None:
            self.http_ignore_probes = http_ignore_probes
        if http_keep_alive_timeout is not None:
            self.http_keep_alive_timeout = http_keep_alive_timeout
        if http_no_delay is not None:
            self.http_no_delay = http_no_delay
        if http_request_timeout is not None:
            self.http_request_timeout = http_request_timeout
        if http_restrict_req_hdr_names is not None:
            self.http_restrict_req_hdr_names = http_restrict_req_hdr_names
        if http_use_proxy_header is not None:
            self.http_use_proxy_header = http_use_proxy_header
        if httplog is not None:
            self.httplog = httplog
        if httpslog is not None:
            self.httpslog = httpslog
        if id is not None:
            self.id = id
        if idle_close_on_response is not None:
            self.idle_close_on_response = idle_close_on_response
        if independent_streams is not None:
            self.independent_streams = independent_streams
        if log_format is not None:
            self.log_format = log_format
        if log_format_sd is not None:
            self.log_format_sd = log_format_sd
        if log_separate_errors is not None:
            self.log_separate_errors = log_separate_errors
        if log_tag is not None:
            self.log_tag = log_tag
        if logasap is not None:
            self.logasap = logasap
        if maxconn is not None:
            self.maxconn = maxconn
        if mode is not None:
            self.mode = mode
        if monitor_fail is not None:
            self.monitor_fail = monitor_fail
        if monitor_uri is not None:
            self.monitor_uri = monitor_uri
        self.name = name
        if nolinger is not None:
            self.nolinger = nolinger
        if originalto is not None:
            self.originalto = originalto
        if socket_stats is not None:
            self.socket_stats = socket_stats
        if splice_auto is not None:
            self.splice_auto = splice_auto
        if splice_request is not None:
            self.splice_request = splice_request
        if splice_response is not None:
            self.splice_response = splice_response
        if stats_options is not None:
            self.stats_options = stats_options
        if stick_table is not None:
            self.stick_table = stick_table
        if tarpit_timeout is not None:
            self.tarpit_timeout = tarpit_timeout
        if tcp_smart_accept is not None:
            self.tcp_smart_accept = tcp_smart_accept
        if tcpka is not None:
            self.tcpka = tcpka
        if tcplog is not None:
            self.tcplog = tcplog
        if unique_id_format is not None:
            self.unique_id_format = unique_id_format
        if unique_id_header is not None:
            self.unique_id_header = unique_id_header

    @property
    def accept_invalid_http_request(self):
        """Gets the accept_invalid_http_request of this Frontend.  # noqa: E501


        :return: The accept_invalid_http_request of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._accept_invalid_http_request

    @accept_invalid_http_request.setter
    def accept_invalid_http_request(self, accept_invalid_http_request):
        """Sets the accept_invalid_http_request of this Frontend.


        :param accept_invalid_http_request: The accept_invalid_http_request of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if accept_invalid_http_request not in allowed_values:
            raise ValueError(
                "Invalid value for `accept_invalid_http_request` ({0}), must be one of {1}"  # noqa: E501
                .format(accept_invalid_http_request, allowed_values)
            )

        self._accept_invalid_http_request = accept_invalid_http_request

    @property
    def backlog(self):
        """Gets the backlog of this Frontend.  # noqa: E501


        :return: The backlog of this Frontend.  # noqa: E501
        :rtype: int
        """
        return self._backlog

    @backlog.setter
    def backlog(self, backlog):
        """Sets the backlog of this Frontend.


        :param backlog: The backlog of this Frontend.  # noqa: E501
        :type: int
        """

        self._backlog = backlog

    @property
    def bind_process(self):
        """Gets the bind_process of this Frontend.  # noqa: E501


        :return: The bind_process of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._bind_process

    @bind_process.setter
    def bind_process(self, bind_process):
        """Sets the bind_process of this Frontend.


        :param bind_process: The bind_process of this Frontend.  # noqa: E501
        :type: str
        """

        self._bind_process = bind_process

    @property
    def clflog(self):
        """Gets the clflog of this Frontend.  # noqa: E501


        :return: The clflog of this Frontend.  # noqa: E501
        :rtype: bool
        """
        return self._clflog

    @clflog.setter
    def clflog(self, clflog):
        """Sets the clflog of this Frontend.


        :param clflog: The clflog of this Frontend.  # noqa: E501
        :type: bool
        """

        self._clflog = clflog

    @property
    def client_fin_timeout(self):
        """Gets the client_fin_timeout of this Frontend.  # noqa: E501


        :return: The client_fin_timeout of this Frontend.  # noqa: E501
        :rtype: int
        """
        return self._client_fin_timeout

    @client_fin_timeout.setter
    def client_fin_timeout(self, client_fin_timeout):
        """Sets the client_fin_timeout of this Frontend.


        :param client_fin_timeout: The client_fin_timeout of this Frontend.  # noqa: E501
        :type: int
        """

        self._client_fin_timeout = client_fin_timeout

    @property
    def client_timeout(self):
        """Gets the client_timeout of this Frontend.  # noqa: E501


        :return: The client_timeout of this Frontend.  # noqa: E501
        :rtype: int
        """
        return self._client_timeout

    @client_timeout.setter
    def client_timeout(self, client_timeout):
        """Sets the client_timeout of this Frontend.


        :param client_timeout: The client_timeout of this Frontend.  # noqa: E501
        :type: int
        """

        self._client_timeout = client_timeout

    @property
    def clitcpka(self):
        """Gets the clitcpka of this Frontend.  # noqa: E501


        :return: The clitcpka of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._clitcpka

    @clitcpka.setter
    def clitcpka(self, clitcpka):
        """Sets the clitcpka of this Frontend.


        :param clitcpka: The clitcpka of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if clitcpka not in allowed_values:
            raise ValueError(
                "Invalid value for `clitcpka` ({0}), must be one of {1}"  # noqa: E501
                .format(clitcpka, allowed_values)
            )

        self._clitcpka = clitcpka

    @property
    def clitcpka_cnt(self):
        """Gets the clitcpka_cnt of this Frontend.  # noqa: E501


        :return: The clitcpka_cnt of this Frontend.  # noqa: E501
        :rtype: int
        """
        return self._clitcpka_cnt

    @clitcpka_cnt.setter
    def clitcpka_cnt(self, clitcpka_cnt):
        """Sets the clitcpka_cnt of this Frontend.


        :param clitcpka_cnt: The clitcpka_cnt of this Frontend.  # noqa: E501
        :type: int
        """

        self._clitcpka_cnt = clitcpka_cnt

    @property
    def clitcpka_idle(self):
        """Gets the clitcpka_idle of this Frontend.  # noqa: E501


        :return: The clitcpka_idle of this Frontend.  # noqa: E501
        :rtype: int
        """
        return self._clitcpka_idle

    @clitcpka_idle.setter
    def clitcpka_idle(self, clitcpka_idle):
        """Sets the clitcpka_idle of this Frontend.


        :param clitcpka_idle: The clitcpka_idle of this Frontend.  # noqa: E501
        :type: int
        """

        self._clitcpka_idle = clitcpka_idle

    @property
    def clitcpka_intvl(self):
        """Gets the clitcpka_intvl of this Frontend.  # noqa: E501


        :return: The clitcpka_intvl of this Frontend.  # noqa: E501
        :rtype: int
        """
        return self._clitcpka_intvl

    @clitcpka_intvl.setter
    def clitcpka_intvl(self, clitcpka_intvl):
        """Sets the clitcpka_intvl of this Frontend.


        :param clitcpka_intvl: The clitcpka_intvl of this Frontend.  # noqa: E501
        :type: int
        """

        self._clitcpka_intvl = clitcpka_intvl

    @property
    def compression(self):
        """Gets the compression of this Frontend.  # noqa: E501


        :return: The compression of this Frontend.  # noqa: E501
        :rtype: Compression
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this Frontend.


        :param compression: The compression of this Frontend.  # noqa: E501
        :type: Compression
        """

        self._compression = compression

    @property
    def contstats(self):
        """Gets the contstats of this Frontend.  # noqa: E501


        :return: The contstats of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._contstats

    @contstats.setter
    def contstats(self, contstats):
        """Sets the contstats of this Frontend.


        :param contstats: The contstats of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled"]  # noqa: E501
        if contstats not in allowed_values:
            raise ValueError(
                "Invalid value for `contstats` ({0}), must be one of {1}"  # noqa: E501
                .format(contstats, allowed_values)
            )

        self._contstats = contstats

    @property
    def default_backend(self):
        """Gets the default_backend of this Frontend.  # noqa: E501


        :return: The default_backend of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._default_backend

    @default_backend.setter
    def default_backend(self, default_backend):
        """Sets the default_backend of this Frontend.


        :param default_backend: The default_backend of this Frontend.  # noqa: E501
        :type: str
        """

        self._default_backend = default_backend

    @property
    def description(self):
        """Gets the description of this Frontend.  # noqa: E501


        :return: The description of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Frontend.


        :param description: The description of this Frontend.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disable_h2_upgrade(self):
        """Gets the disable_h2_upgrade of this Frontend.  # noqa: E501


        :return: The disable_h2_upgrade of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._disable_h2_upgrade

    @disable_h2_upgrade.setter
    def disable_h2_upgrade(self, disable_h2_upgrade):
        """Sets the disable_h2_upgrade of this Frontend.


        :param disable_h2_upgrade: The disable_h2_upgrade of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if disable_h2_upgrade not in allowed_values:
            raise ValueError(
                "Invalid value for `disable_h2_upgrade` ({0}), must be one of {1}"  # noqa: E501
                .format(disable_h2_upgrade, allowed_values)
            )

        self._disable_h2_upgrade = disable_h2_upgrade

    @property
    def disabled(self):
        """Gets the disabled of this Frontend.  # noqa: E501


        :return: The disabled of this Frontend.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Frontend.


        :param disabled: The disabled of this Frontend.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def dontlog_normal(self):
        """Gets the dontlog_normal of this Frontend.  # noqa: E501


        :return: The dontlog_normal of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._dontlog_normal

    @dontlog_normal.setter
    def dontlog_normal(self, dontlog_normal):
        """Sets the dontlog_normal of this Frontend.


        :param dontlog_normal: The dontlog_normal of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if dontlog_normal not in allowed_values:
            raise ValueError(
                "Invalid value for `dontlog_normal` ({0}), must be one of {1}"  # noqa: E501
                .format(dontlog_normal, allowed_values)
            )

        self._dontlog_normal = dontlog_normal

    @property
    def dontlognull(self):
        """Gets the dontlognull of this Frontend.  # noqa: E501


        :return: The dontlognull of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._dontlognull

    @dontlognull.setter
    def dontlognull(self, dontlognull):
        """Sets the dontlognull of this Frontend.


        :param dontlognull: The dontlognull of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if dontlognull not in allowed_values:
            raise ValueError(
                "Invalid value for `dontlognull` ({0}), must be one of {1}"  # noqa: E501
                .format(dontlognull, allowed_values)
            )

        self._dontlognull = dontlognull

    @property
    def email_alert(self):
        """Gets the email_alert of this Frontend.  # noqa: E501


        :return: The email_alert of this Frontend.  # noqa: E501
        :rtype: EmailAlert
        """
        return self._email_alert

    @email_alert.setter
    def email_alert(self, email_alert):
        """Sets the email_alert of this Frontend.


        :param email_alert: The email_alert of this Frontend.  # noqa: E501
        :type: EmailAlert
        """

        self._email_alert = email_alert

    @property
    def enabled(self):
        """Gets the enabled of this Frontend.  # noqa: E501


        :return: The enabled of this Frontend.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Frontend.


        :param enabled: The enabled of this Frontend.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def error_files(self):
        """Gets the error_files of this Frontend.  # noqa: E501


        :return: The error_files of this Frontend.  # noqa: E501
        :rtype: list[Errorfile]
        """
        return self._error_files

    @error_files.setter
    def error_files(self, error_files):
        """Sets the error_files of this Frontend.


        :param error_files: The error_files of this Frontend.  # noqa: E501
        :type: list[Errorfile]
        """

        self._error_files = error_files

    @property
    def error_log_format(self):
        """Gets the error_log_format of this Frontend.  # noqa: E501


        :return: The error_log_format of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._error_log_format

    @error_log_format.setter
    def error_log_format(self, error_log_format):
        """Sets the error_log_format of this Frontend.


        :param error_log_format: The error_log_format of this Frontend.  # noqa: E501
        :type: str
        """

        self._error_log_format = error_log_format

    @property
    def errorfiles_from_http_errors(self):
        """Gets the errorfiles_from_http_errors of this Frontend.  # noqa: E501


        :return: The errorfiles_from_http_errors of this Frontend.  # noqa: E501
        :rtype: list[Errorfiles]
        """
        return self._errorfiles_from_http_errors

    @errorfiles_from_http_errors.setter
    def errorfiles_from_http_errors(self, errorfiles_from_http_errors):
        """Sets the errorfiles_from_http_errors of this Frontend.


        :param errorfiles_from_http_errors: The errorfiles_from_http_errors of this Frontend.  # noqa: E501
        :type: list[Errorfiles]
        """

        self._errorfiles_from_http_errors = errorfiles_from_http_errors

    @property
    def errorloc302(self):
        """Gets the errorloc302 of this Frontend.  # noqa: E501


        :return: The errorloc302 of this Frontend.  # noqa: E501
        :rtype: Errorloc
        """
        return self._errorloc302

    @errorloc302.setter
    def errorloc302(self, errorloc302):
        """Sets the errorloc302 of this Frontend.


        :param errorloc302: The errorloc302 of this Frontend.  # noqa: E501
        :type: Errorloc
        """

        self._errorloc302 = errorloc302

    @property
    def errorloc303(self):
        """Gets the errorloc303 of this Frontend.  # noqa: E501


        :return: The errorloc303 of this Frontend.  # noqa: E501
        :rtype: Errorloc
        """
        return self._errorloc303

    @errorloc303.setter
    def errorloc303(self, errorloc303):
        """Sets the errorloc303 of this Frontend.


        :param errorloc303: The errorloc303 of this Frontend.  # noqa: E501
        :type: Errorloc
        """

        self._errorloc303 = errorloc303

    @property
    def forwardfor(self):
        """Gets the forwardfor of this Frontend.  # noqa: E501


        :return: The forwardfor of this Frontend.  # noqa: E501
        :rtype: Forwardfor
        """
        return self._forwardfor

    @forwardfor.setter
    def forwardfor(self, forwardfor):
        """Sets the forwardfor of this Frontend.


        :param forwardfor: The forwardfor of this Frontend.  # noqa: E501
        :type: Forwardfor
        """

        self._forwardfor = forwardfor

    @property
    def _from(self):
        """Gets the _from of this Frontend.  # noqa: E501


        :return: The _from of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Frontend.


        :param _from: The _from of this Frontend.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def h1_case_adjust_bogus_client(self):
        """Gets the h1_case_adjust_bogus_client of this Frontend.  # noqa: E501


        :return: The h1_case_adjust_bogus_client of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._h1_case_adjust_bogus_client

    @h1_case_adjust_bogus_client.setter
    def h1_case_adjust_bogus_client(self, h1_case_adjust_bogus_client):
        """Sets the h1_case_adjust_bogus_client of this Frontend.


        :param h1_case_adjust_bogus_client: The h1_case_adjust_bogus_client of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if h1_case_adjust_bogus_client not in allowed_values:
            raise ValueError(
                "Invalid value for `h1_case_adjust_bogus_client` ({0}), must be one of {1}"  # noqa: E501
                .format(h1_case_adjust_bogus_client, allowed_values)
            )

        self._h1_case_adjust_bogus_client = h1_case_adjust_bogus_client

    @property
    def http_buffer_request(self):
        """Gets the http_buffer_request of this Frontend.  # noqa: E501


        :return: The http_buffer_request of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._http_buffer_request

    @http_buffer_request.setter
    def http_buffer_request(self, http_buffer_request):
        """Sets the http_buffer_request of this Frontend.


        :param http_buffer_request: The http_buffer_request of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if http_buffer_request not in allowed_values:
            raise ValueError(
                "Invalid value for `http_buffer_request` ({0}), must be one of {1}"  # noqa: E501
                .format(http_buffer_request, allowed_values)
            )

        self._http_buffer_request = http_buffer_request

    @property
    def http_use_htx(self):
        """Gets the http_use_htx of this Frontend.  # noqa: E501


        :return: The http_use_htx of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._http_use_htx

    @http_use_htx.setter
    def http_use_htx(self, http_use_htx):
        """Sets the http_use_htx of this Frontend.


        :param http_use_htx: The http_use_htx of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if http_use_htx not in allowed_values:
            raise ValueError(
                "Invalid value for `http_use_htx` ({0}), must be one of {1}"  # noqa: E501
                .format(http_use_htx, allowed_values)
            )

        self._http_use_htx = http_use_htx

    @property
    def http_connection_mode(self):
        """Gets the http_connection_mode of this Frontend.  # noqa: E501


        :return: The http_connection_mode of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._http_connection_mode

    @http_connection_mode.setter
    def http_connection_mode(self, http_connection_mode):
        """Sets the http_connection_mode of this Frontend.


        :param http_connection_mode: The http_connection_mode of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["httpclose", "http-server-close", "http-keep-alive"]  # noqa: E501
        if http_connection_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `http_connection_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(http_connection_mode, allowed_values)
            )

        self._http_connection_mode = http_connection_mode

    @property
    def http_ignore_probes(self):
        """Gets the http_ignore_probes of this Frontend.  # noqa: E501


        :return: The http_ignore_probes of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._http_ignore_probes

    @http_ignore_probes.setter
    def http_ignore_probes(self, http_ignore_probes):
        """Sets the http_ignore_probes of this Frontend.


        :param http_ignore_probes: The http_ignore_probes of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if http_ignore_probes not in allowed_values:
            raise ValueError(
                "Invalid value for `http_ignore_probes` ({0}), must be one of {1}"  # noqa: E501
                .format(http_ignore_probes, allowed_values)
            )

        self._http_ignore_probes = http_ignore_probes

    @property
    def http_keep_alive_timeout(self):
        """Gets the http_keep_alive_timeout of this Frontend.  # noqa: E501


        :return: The http_keep_alive_timeout of this Frontend.  # noqa: E501
        :rtype: int
        """
        return self._http_keep_alive_timeout

    @http_keep_alive_timeout.setter
    def http_keep_alive_timeout(self, http_keep_alive_timeout):
        """Sets the http_keep_alive_timeout of this Frontend.


        :param http_keep_alive_timeout: The http_keep_alive_timeout of this Frontend.  # noqa: E501
        :type: int
        """

        self._http_keep_alive_timeout = http_keep_alive_timeout

    @property
    def http_no_delay(self):
        """Gets the http_no_delay of this Frontend.  # noqa: E501


        :return: The http_no_delay of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._http_no_delay

    @http_no_delay.setter
    def http_no_delay(self, http_no_delay):
        """Sets the http_no_delay of this Frontend.


        :param http_no_delay: The http_no_delay of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if http_no_delay not in allowed_values:
            raise ValueError(
                "Invalid value for `http_no_delay` ({0}), must be one of {1}"  # noqa: E501
                .format(http_no_delay, allowed_values)
            )

        self._http_no_delay = http_no_delay

    @property
    def http_request_timeout(self):
        """Gets the http_request_timeout of this Frontend.  # noqa: E501


        :return: The http_request_timeout of this Frontend.  # noqa: E501
        :rtype: int
        """
        return self._http_request_timeout

    @http_request_timeout.setter
    def http_request_timeout(self, http_request_timeout):
        """Sets the http_request_timeout of this Frontend.


        :param http_request_timeout: The http_request_timeout of this Frontend.  # noqa: E501
        :type: int
        """

        self._http_request_timeout = http_request_timeout

    @property
    def http_restrict_req_hdr_names(self):
        """Gets the http_restrict_req_hdr_names of this Frontend.  # noqa: E501


        :return: The http_restrict_req_hdr_names of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._http_restrict_req_hdr_names

    @http_restrict_req_hdr_names.setter
    def http_restrict_req_hdr_names(self, http_restrict_req_hdr_names):
        """Sets the http_restrict_req_hdr_names of this Frontend.


        :param http_restrict_req_hdr_names: The http_restrict_req_hdr_names of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["preserve", "delete", "reject"]  # noqa: E501
        if http_restrict_req_hdr_names not in allowed_values:
            raise ValueError(
                "Invalid value for `http_restrict_req_hdr_names` ({0}), must be one of {1}"  # noqa: E501
                .format(http_restrict_req_hdr_names, allowed_values)
            )

        self._http_restrict_req_hdr_names = http_restrict_req_hdr_names

    @property
    def http_use_proxy_header(self):
        """Gets the http_use_proxy_header of this Frontend.  # noqa: E501


        :return: The http_use_proxy_header of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._http_use_proxy_header

    @http_use_proxy_header.setter
    def http_use_proxy_header(self, http_use_proxy_header):
        """Sets the http_use_proxy_header of this Frontend.


        :param http_use_proxy_header: The http_use_proxy_header of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if http_use_proxy_header not in allowed_values:
            raise ValueError(
                "Invalid value for `http_use_proxy_header` ({0}), must be one of {1}"  # noqa: E501
                .format(http_use_proxy_header, allowed_values)
            )

        self._http_use_proxy_header = http_use_proxy_header

    @property
    def httplog(self):
        """Gets the httplog of this Frontend.  # noqa: E501


        :return: The httplog of this Frontend.  # noqa: E501
        :rtype: bool
        """
        return self._httplog

    @httplog.setter
    def httplog(self, httplog):
        """Sets the httplog of this Frontend.


        :param httplog: The httplog of this Frontend.  # noqa: E501
        :type: bool
        """

        self._httplog = httplog

    @property
    def httpslog(self):
        """Gets the httpslog of this Frontend.  # noqa: E501


        :return: The httpslog of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._httpslog

    @httpslog.setter
    def httpslog(self, httpslog):
        """Sets the httpslog of this Frontend.


        :param httpslog: The httpslog of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if httpslog not in allowed_values:
            raise ValueError(
                "Invalid value for `httpslog` ({0}), must be one of {1}"  # noqa: E501
                .format(httpslog, allowed_values)
            )

        self._httpslog = httpslog

    @property
    def id(self):
        """Gets the id of this Frontend.  # noqa: E501


        :return: The id of this Frontend.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Frontend.


        :param id: The id of this Frontend.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def idle_close_on_response(self):
        """Gets the idle_close_on_response of this Frontend.  # noqa: E501


        :return: The idle_close_on_response of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._idle_close_on_response

    @idle_close_on_response.setter
    def idle_close_on_response(self, idle_close_on_response):
        """Sets the idle_close_on_response of this Frontend.


        :param idle_close_on_response: The idle_close_on_response of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if idle_close_on_response not in allowed_values:
            raise ValueError(
                "Invalid value for `idle_close_on_response` ({0}), must be one of {1}"  # noqa: E501
                .format(idle_close_on_response, allowed_values)
            )

        self._idle_close_on_response = idle_close_on_response

    @property
    def independent_streams(self):
        """Gets the independent_streams of this Frontend.  # noqa: E501


        :return: The independent_streams of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._independent_streams

    @independent_streams.setter
    def independent_streams(self, independent_streams):
        """Sets the independent_streams of this Frontend.


        :param independent_streams: The independent_streams of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if independent_streams not in allowed_values:
            raise ValueError(
                "Invalid value for `independent_streams` ({0}), must be one of {1}"  # noqa: E501
                .format(independent_streams, allowed_values)
            )

        self._independent_streams = independent_streams

    @property
    def log_format(self):
        """Gets the log_format of this Frontend.  # noqa: E501


        :return: The log_format of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._log_format

    @log_format.setter
    def log_format(self, log_format):
        """Sets the log_format of this Frontend.


        :param log_format: The log_format of this Frontend.  # noqa: E501
        :type: str
        """

        self._log_format = log_format

    @property
    def log_format_sd(self):
        """Gets the log_format_sd of this Frontend.  # noqa: E501


        :return: The log_format_sd of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._log_format_sd

    @log_format_sd.setter
    def log_format_sd(self, log_format_sd):
        """Sets the log_format_sd of this Frontend.


        :param log_format_sd: The log_format_sd of this Frontend.  # noqa: E501
        :type: str
        """

        self._log_format_sd = log_format_sd

    @property
    def log_separate_errors(self):
        """Gets the log_separate_errors of this Frontend.  # noqa: E501


        :return: The log_separate_errors of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._log_separate_errors

    @log_separate_errors.setter
    def log_separate_errors(self, log_separate_errors):
        """Sets the log_separate_errors of this Frontend.


        :param log_separate_errors: The log_separate_errors of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if log_separate_errors not in allowed_values:
            raise ValueError(
                "Invalid value for `log_separate_errors` ({0}), must be one of {1}"  # noqa: E501
                .format(log_separate_errors, allowed_values)
            )

        self._log_separate_errors = log_separate_errors

    @property
    def log_tag(self):
        """Gets the log_tag of this Frontend.  # noqa: E501


        :return: The log_tag of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._log_tag

    @log_tag.setter
    def log_tag(self, log_tag):
        """Sets the log_tag of this Frontend.


        :param log_tag: The log_tag of this Frontend.  # noqa: E501
        :type: str
        """

        self._log_tag = log_tag

    @property
    def logasap(self):
        """Gets the logasap of this Frontend.  # noqa: E501


        :return: The logasap of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._logasap

    @logasap.setter
    def logasap(self, logasap):
        """Sets the logasap of this Frontend.


        :param logasap: The logasap of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if logasap not in allowed_values:
            raise ValueError(
                "Invalid value for `logasap` ({0}), must be one of {1}"  # noqa: E501
                .format(logasap, allowed_values)
            )

        self._logasap = logasap

    @property
    def maxconn(self):
        """Gets the maxconn of this Frontend.  # noqa: E501


        :return: The maxconn of this Frontend.  # noqa: E501
        :rtype: int
        """
        return self._maxconn

    @maxconn.setter
    def maxconn(self, maxconn):
        """Sets the maxconn of this Frontend.


        :param maxconn: The maxconn of this Frontend.  # noqa: E501
        :type: int
        """

        self._maxconn = maxconn

    @property
    def mode(self):
        """Gets the mode of this Frontend.  # noqa: E501


        :return: The mode of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Frontend.


        :param mode: The mode of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["http", "tcp"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def monitor_fail(self):
        """Gets the monitor_fail of this Frontend.  # noqa: E501


        :return: The monitor_fail of this Frontend.  # noqa: E501
        :rtype: MonitorFail
        """
        return self._monitor_fail

    @monitor_fail.setter
    def monitor_fail(self, monitor_fail):
        """Sets the monitor_fail of this Frontend.


        :param monitor_fail: The monitor_fail of this Frontend.  # noqa: E501
        :type: MonitorFail
        """

        self._monitor_fail = monitor_fail

    @property
    def monitor_uri(self):
        """Gets the monitor_uri of this Frontend.  # noqa: E501


        :return: The monitor_uri of this Frontend.  # noqa: E501
        :rtype: MonitorUri
        """
        return self._monitor_uri

    @monitor_uri.setter
    def monitor_uri(self, monitor_uri):
        """Sets the monitor_uri of this Frontend.


        :param monitor_uri: The monitor_uri of this Frontend.  # noqa: E501
        :type: MonitorUri
        """

        self._monitor_uri = monitor_uri

    @property
    def name(self):
        """Gets the name of this Frontend.  # noqa: E501


        :return: The name of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Frontend.


        :param name: The name of this Frontend.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def nolinger(self):
        """Gets the nolinger of this Frontend.  # noqa: E501


        :return: The nolinger of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._nolinger

    @nolinger.setter
    def nolinger(self, nolinger):
        """Sets the nolinger of this Frontend.


        :param nolinger: The nolinger of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if nolinger not in allowed_values:
            raise ValueError(
                "Invalid value for `nolinger` ({0}), must be one of {1}"  # noqa: E501
                .format(nolinger, allowed_values)
            )

        self._nolinger = nolinger

    @property
    def originalto(self):
        """Gets the originalto of this Frontend.  # noqa: E501


        :return: The originalto of this Frontend.  # noqa: E501
        :rtype: Originalto
        """
        return self._originalto

    @originalto.setter
    def originalto(self, originalto):
        """Sets the originalto of this Frontend.


        :param originalto: The originalto of this Frontend.  # noqa: E501
        :type: Originalto
        """

        self._originalto = originalto

    @property
    def socket_stats(self):
        """Gets the socket_stats of this Frontend.  # noqa: E501


        :return: The socket_stats of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._socket_stats

    @socket_stats.setter
    def socket_stats(self, socket_stats):
        """Sets the socket_stats of this Frontend.


        :param socket_stats: The socket_stats of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if socket_stats not in allowed_values:
            raise ValueError(
                "Invalid value for `socket_stats` ({0}), must be one of {1}"  # noqa: E501
                .format(socket_stats, allowed_values)
            )

        self._socket_stats = socket_stats

    @property
    def splice_auto(self):
        """Gets the splice_auto of this Frontend.  # noqa: E501


        :return: The splice_auto of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._splice_auto

    @splice_auto.setter
    def splice_auto(self, splice_auto):
        """Sets the splice_auto of this Frontend.


        :param splice_auto: The splice_auto of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if splice_auto not in allowed_values:
            raise ValueError(
                "Invalid value for `splice_auto` ({0}), must be one of {1}"  # noqa: E501
                .format(splice_auto, allowed_values)
            )

        self._splice_auto = splice_auto

    @property
    def splice_request(self):
        """Gets the splice_request of this Frontend.  # noqa: E501


        :return: The splice_request of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._splice_request

    @splice_request.setter
    def splice_request(self, splice_request):
        """Sets the splice_request of this Frontend.


        :param splice_request: The splice_request of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if splice_request not in allowed_values:
            raise ValueError(
                "Invalid value for `splice_request` ({0}), must be one of {1}"  # noqa: E501
                .format(splice_request, allowed_values)
            )

        self._splice_request = splice_request

    @property
    def splice_response(self):
        """Gets the splice_response of this Frontend.  # noqa: E501


        :return: The splice_response of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._splice_response

    @splice_response.setter
    def splice_response(self, splice_response):
        """Sets the splice_response of this Frontend.


        :param splice_response: The splice_response of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if splice_response not in allowed_values:
            raise ValueError(
                "Invalid value for `splice_response` ({0}), must be one of {1}"  # noqa: E501
                .format(splice_response, allowed_values)
            )

        self._splice_response = splice_response

    @property
    def stats_options(self):
        """Gets the stats_options of this Frontend.  # noqa: E501


        :return: The stats_options of this Frontend.  # noqa: E501
        :rtype: StatsOptions
        """
        return self._stats_options

    @stats_options.setter
    def stats_options(self, stats_options):
        """Sets the stats_options of this Frontend.


        :param stats_options: The stats_options of this Frontend.  # noqa: E501
        :type: StatsOptions
        """

        self._stats_options = stats_options

    @property
    def stick_table(self):
        """Gets the stick_table of this Frontend.  # noqa: E501


        :return: The stick_table of this Frontend.  # noqa: E501
        :rtype: ConfigStickTable
        """
        return self._stick_table

    @stick_table.setter
    def stick_table(self, stick_table):
        """Sets the stick_table of this Frontend.


        :param stick_table: The stick_table of this Frontend.  # noqa: E501
        :type: ConfigStickTable
        """

        self._stick_table = stick_table

    @property
    def tarpit_timeout(self):
        """Gets the tarpit_timeout of this Frontend.  # noqa: E501


        :return: The tarpit_timeout of this Frontend.  # noqa: E501
        :rtype: int
        """
        return self._tarpit_timeout

    @tarpit_timeout.setter
    def tarpit_timeout(self, tarpit_timeout):
        """Sets the tarpit_timeout of this Frontend.


        :param tarpit_timeout: The tarpit_timeout of this Frontend.  # noqa: E501
        :type: int
        """

        self._tarpit_timeout = tarpit_timeout

    @property
    def tcp_smart_accept(self):
        """Gets the tcp_smart_accept of this Frontend.  # noqa: E501


        :return: The tcp_smart_accept of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._tcp_smart_accept

    @tcp_smart_accept.setter
    def tcp_smart_accept(self, tcp_smart_accept):
        """Sets the tcp_smart_accept of this Frontend.


        :param tcp_smart_accept: The tcp_smart_accept of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if tcp_smart_accept not in allowed_values:
            raise ValueError(
                "Invalid value for `tcp_smart_accept` ({0}), must be one of {1}"  # noqa: E501
                .format(tcp_smart_accept, allowed_values)
            )

        self._tcp_smart_accept = tcp_smart_accept

    @property
    def tcpka(self):
        """Gets the tcpka of this Frontend.  # noqa: E501


        :return: The tcpka of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._tcpka

    @tcpka.setter
    def tcpka(self, tcpka):
        """Sets the tcpka of this Frontend.


        :param tcpka: The tcpka of this Frontend.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if tcpka not in allowed_values:
            raise ValueError(
                "Invalid value for `tcpka` ({0}), must be one of {1}"  # noqa: E501
                .format(tcpka, allowed_values)
            )

        self._tcpka = tcpka

    @property
    def tcplog(self):
        """Gets the tcplog of this Frontend.  # noqa: E501


        :return: The tcplog of this Frontend.  # noqa: E501
        :rtype: bool
        """
        return self._tcplog

    @tcplog.setter
    def tcplog(self, tcplog):
        """Sets the tcplog of this Frontend.


        :param tcplog: The tcplog of this Frontend.  # noqa: E501
        :type: bool
        """

        self._tcplog = tcplog

    @property
    def unique_id_format(self):
        """Gets the unique_id_format of this Frontend.  # noqa: E501


        :return: The unique_id_format of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._unique_id_format

    @unique_id_format.setter
    def unique_id_format(self, unique_id_format):
        """Sets the unique_id_format of this Frontend.


        :param unique_id_format: The unique_id_format of this Frontend.  # noqa: E501
        :type: str
        """

        self._unique_id_format = unique_id_format

    @property
    def unique_id_header(self):
        """Gets the unique_id_header of this Frontend.  # noqa: E501


        :return: The unique_id_header of this Frontend.  # noqa: E501
        :rtype: str
        """
        return self._unique_id_header

    @unique_id_header.setter
    def unique_id_header(self, unique_id_header):
        """Sets the unique_id_header of this Frontend.


        :param unique_id_header: The unique_id_header of this Frontend.  # noqa: E501
        :type: str
        """

        self._unique_id_header = unique_id_header

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Frontend, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Frontend):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
