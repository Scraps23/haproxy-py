# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RuntimeAddServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'agent_addr': 'str',
        'agent_check': 'str',
        'agent_inter': 'int',
        'agent_port': 'int',
        'agent_send': 'str',
        'allow_0rtt': 'bool',
        'alpn': 'str',
        'backup': 'str',
        'check': 'str',
        'check_send_proxy': 'str',
        'check_sni': 'str',
        'check_ssl': 'str',
        'check_alpn': 'str',
        'check_proto': 'str',
        'check_via_socks4': 'str',
        'ciphers': 'str',
        'ciphersuites': 'str',
        'crl_file': 'str',
        'downinter': 'int',
        'error_limit': 'int',
        'fall': 'int',
        'fastinter': 'int',
        'force_sslv3': 'str',
        'force_tlsv10': 'str',
        'force_tlsv11': 'str',
        'force_tlsv12': 'str',
        'force_tlsv13': 'str',
        'health_check_address': 'str',
        'health_check_port': 'int',
        'id': 'str',
        'inter': 'int',
        'maintenance': 'str',
        'maxconn': 'int',
        'maxqueue': 'int',
        'minconn': 'int',
        'name': 'str',
        'no_sslv3': 'str',
        'no_tlsv10': 'str',
        'no_tlsv11': 'str',
        'no_tlsv12': 'str',
        'no_tlsv13': 'str',
        'npn': 'str',
        'observe': 'str',
        'on_error': 'str',
        'on_marked_down': 'str',
        'on_marked_up': 'str',
        'pool_low_conn': 'int',
        'pool_max_conn': 'int',
        'pool_purge_delay': 'int',
        'port': 'int',
        'proto': 'str',
        'proxy_v2_options': 'list[str]',
        'rise': 'int',
        'send_proxy': 'str',
        'send_proxy_v2': 'str',
        'send_proxy_v2_ssl': 'str',
        'send_proxy_v2_ssl_cn': 'str',
        'slowstart': 'int',
        'sni': 'str',
        'source': 'str',
        'ssl': 'str',
        'ssl_cafile': 'str',
        'ssl_certificate': 'str',
        'ssl_max_ver': 'str',
        'ssl_min_ver': 'str',
        'ssl_reuse': 'str',
        'tfo': 'str',
        'tls_tickets': 'str',
        'track': 'str',
        'verify': 'str',
        'verifyhost': 'str',
        'weight': 'int',
        'ws': 'str'
    }

    attribute_map = {
        'address': 'address',
        'agent_addr': 'agent-addr',
        'agent_check': 'agent-check',
        'agent_inter': 'agent-inter',
        'agent_port': 'agent-port',
        'agent_send': 'agent-send',
        'allow_0rtt': 'allow_0rtt',
        'alpn': 'alpn',
        'backup': 'backup',
        'check': 'check',
        'check_send_proxy': 'check-send-proxy',
        'check_sni': 'check-sni',
        'check_ssl': 'check-ssl',
        'check_alpn': 'check_alpn',
        'check_proto': 'check_proto',
        'check_via_socks4': 'check_via_socks4',
        'ciphers': 'ciphers',
        'ciphersuites': 'ciphersuites',
        'crl_file': 'crl_file',
        'downinter': 'downinter',
        'error_limit': 'error_limit',
        'fall': 'fall',
        'fastinter': 'fastinter',
        'force_sslv3': 'force_sslv3',
        'force_tlsv10': 'force_tlsv10',
        'force_tlsv11': 'force_tlsv11',
        'force_tlsv12': 'force_tlsv12',
        'force_tlsv13': 'force_tlsv13',
        'health_check_address': 'health_check_address',
        'health_check_port': 'health_check_port',
        'id': 'id',
        'inter': 'inter',
        'maintenance': 'maintenance',
        'maxconn': 'maxconn',
        'maxqueue': 'maxqueue',
        'minconn': 'minconn',
        'name': 'name',
        'no_sslv3': 'no_sslv3',
        'no_tlsv10': 'no_tlsv10',
        'no_tlsv11': 'no_tlsv11',
        'no_tlsv12': 'no_tlsv12',
        'no_tlsv13': 'no_tlsv13',
        'npn': 'npn',
        'observe': 'observe',
        'on_error': 'on-error',
        'on_marked_down': 'on-marked-down',
        'on_marked_up': 'on-marked-up',
        'pool_low_conn': 'pool_low_conn',
        'pool_max_conn': 'pool_max_conn',
        'pool_purge_delay': 'pool_purge_delay',
        'port': 'port',
        'proto': 'proto',
        'proxy_v2_options': 'proxy-v2-options',
        'rise': 'rise',
        'send_proxy': 'send-proxy',
        'send_proxy_v2': 'send-proxy-v2',
        'send_proxy_v2_ssl': 'send_proxy_v2_ssl',
        'send_proxy_v2_ssl_cn': 'send_proxy_v2_ssl_cn',
        'slowstart': 'slowstart',
        'sni': 'sni',
        'source': 'source',
        'ssl': 'ssl',
        'ssl_cafile': 'ssl_cafile',
        'ssl_certificate': 'ssl_certificate',
        'ssl_max_ver': 'ssl_max_ver',
        'ssl_min_ver': 'ssl_min_ver',
        'ssl_reuse': 'ssl_reuse',
        'tfo': 'tfo',
        'tls_tickets': 'tls_tickets',
        'track': 'track',
        'verify': 'verify',
        'verifyhost': 'verifyhost',
        'weight': 'weight',
        'ws': 'ws'
    }

    def __init__(self, address=None, agent_addr=None, agent_check=None, agent_inter=None, agent_port=None, agent_send=None, allow_0rtt=None, alpn=None, backup=None, check=None, check_send_proxy=None, check_sni=None, check_ssl=None, check_alpn=None, check_proto=None, check_via_socks4=None, ciphers=None, ciphersuites=None, crl_file=None, downinter=None, error_limit=None, fall=None, fastinter=None, force_sslv3=None, force_tlsv10=None, force_tlsv11=None, force_tlsv12=None, force_tlsv13=None, health_check_address=None, health_check_port=None, id=None, inter=None, maintenance=None, maxconn=None, maxqueue=None, minconn=None, name=None, no_sslv3=None, no_tlsv10=None, no_tlsv11=None, no_tlsv12=None, no_tlsv13=None, npn=None, observe=None, on_error=None, on_marked_down=None, on_marked_up=None, pool_low_conn=None, pool_max_conn=None, pool_purge_delay=None, port=None, proto=None, proxy_v2_options=None, rise=None, send_proxy=None, send_proxy_v2=None, send_proxy_v2_ssl=None, send_proxy_v2_ssl_cn=None, slowstart=None, sni=None, source=None, ssl=None, ssl_cafile=None, ssl_certificate=None, ssl_max_ver=None, ssl_min_ver=None, ssl_reuse=None, tfo=None, tls_tickets=None, track=None, verify=None, verifyhost=None, weight=None, ws=None):  # noqa: E501
        """RuntimeAddServer - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._agent_addr = None
        self._agent_check = None
        self._agent_inter = None
        self._agent_port = None
        self._agent_send = None
        self._allow_0rtt = None
        self._alpn = None
        self._backup = None
        self._check = None
        self._check_send_proxy = None
        self._check_sni = None
        self._check_ssl = None
        self._check_alpn = None
        self._check_proto = None
        self._check_via_socks4 = None
        self._ciphers = None
        self._ciphersuites = None
        self._crl_file = None
        self._downinter = None
        self._error_limit = None
        self._fall = None
        self._fastinter = None
        self._force_sslv3 = None
        self._force_tlsv10 = None
        self._force_tlsv11 = None
        self._force_tlsv12 = None
        self._force_tlsv13 = None
        self._health_check_address = None
        self._health_check_port = None
        self._id = None
        self._inter = None
        self._maintenance = None
        self._maxconn = None
        self._maxqueue = None
        self._minconn = None
        self._name = None
        self._no_sslv3 = None
        self._no_tlsv10 = None
        self._no_tlsv11 = None
        self._no_tlsv12 = None
        self._no_tlsv13 = None
        self._npn = None
        self._observe = None
        self._on_error = None
        self._on_marked_down = None
        self._on_marked_up = None
        self._pool_low_conn = None
        self._pool_max_conn = None
        self._pool_purge_delay = None
        self._port = None
        self._proto = None
        self._proxy_v2_options = None
        self._rise = None
        self._send_proxy = None
        self._send_proxy_v2 = None
        self._send_proxy_v2_ssl = None
        self._send_proxy_v2_ssl_cn = None
        self._slowstart = None
        self._sni = None
        self._source = None
        self._ssl = None
        self._ssl_cafile = None
        self._ssl_certificate = None
        self._ssl_max_ver = None
        self._ssl_min_ver = None
        self._ssl_reuse = None
        self._tfo = None
        self._tls_tickets = None
        self._track = None
        self._verify = None
        self._verifyhost = None
        self._weight = None
        self._ws = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if agent_addr is not None:
            self.agent_addr = agent_addr
        if agent_check is not None:
            self.agent_check = agent_check
        if agent_inter is not None:
            self.agent_inter = agent_inter
        if agent_port is not None:
            self.agent_port = agent_port
        if agent_send is not None:
            self.agent_send = agent_send
        if allow_0rtt is not None:
            self.allow_0rtt = allow_0rtt
        if alpn is not None:
            self.alpn = alpn
        if backup is not None:
            self.backup = backup
        if check is not None:
            self.check = check
        if check_send_proxy is not None:
            self.check_send_proxy = check_send_proxy
        if check_sni is not None:
            self.check_sni = check_sni
        if check_ssl is not None:
            self.check_ssl = check_ssl
        if check_alpn is not None:
            self.check_alpn = check_alpn
        if check_proto is not None:
            self.check_proto = check_proto
        if check_via_socks4 is not None:
            self.check_via_socks4 = check_via_socks4
        if ciphers is not None:
            self.ciphers = ciphers
        if ciphersuites is not None:
            self.ciphersuites = ciphersuites
        if crl_file is not None:
            self.crl_file = crl_file
        if downinter is not None:
            self.downinter = downinter
        if error_limit is not None:
            self.error_limit = error_limit
        if fall is not None:
            self.fall = fall
        if fastinter is not None:
            self.fastinter = fastinter
        if force_sslv3 is not None:
            self.force_sslv3 = force_sslv3
        if force_tlsv10 is not None:
            self.force_tlsv10 = force_tlsv10
        if force_tlsv11 is not None:
            self.force_tlsv11 = force_tlsv11
        if force_tlsv12 is not None:
            self.force_tlsv12 = force_tlsv12
        if force_tlsv13 is not None:
            self.force_tlsv13 = force_tlsv13
        if health_check_address is not None:
            self.health_check_address = health_check_address
        if health_check_port is not None:
            self.health_check_port = health_check_port
        if id is not None:
            self.id = id
        if inter is not None:
            self.inter = inter
        if maintenance is not None:
            self.maintenance = maintenance
        if maxconn is not None:
            self.maxconn = maxconn
        if maxqueue is not None:
            self.maxqueue = maxqueue
        if minconn is not None:
            self.minconn = minconn
        if name is not None:
            self.name = name
        if no_sslv3 is not None:
            self.no_sslv3 = no_sslv3
        if no_tlsv10 is not None:
            self.no_tlsv10 = no_tlsv10
        if no_tlsv11 is not None:
            self.no_tlsv11 = no_tlsv11
        if no_tlsv12 is not None:
            self.no_tlsv12 = no_tlsv12
        if no_tlsv13 is not None:
            self.no_tlsv13 = no_tlsv13
        if npn is not None:
            self.npn = npn
        if observe is not None:
            self.observe = observe
        if on_error is not None:
            self.on_error = on_error
        if on_marked_down is not None:
            self.on_marked_down = on_marked_down
        if on_marked_up is not None:
            self.on_marked_up = on_marked_up
        if pool_low_conn is not None:
            self.pool_low_conn = pool_low_conn
        if pool_max_conn is not None:
            self.pool_max_conn = pool_max_conn
        if pool_purge_delay is not None:
            self.pool_purge_delay = pool_purge_delay
        if port is not None:
            self.port = port
        if proto is not None:
            self.proto = proto
        if proxy_v2_options is not None:
            self.proxy_v2_options = proxy_v2_options
        if rise is not None:
            self.rise = rise
        if send_proxy is not None:
            self.send_proxy = send_proxy
        if send_proxy_v2 is not None:
            self.send_proxy_v2 = send_proxy_v2
        if send_proxy_v2_ssl is not None:
            self.send_proxy_v2_ssl = send_proxy_v2_ssl
        if send_proxy_v2_ssl_cn is not None:
            self.send_proxy_v2_ssl_cn = send_proxy_v2_ssl_cn
        if slowstart is not None:
            self.slowstart = slowstart
        if sni is not None:
            self.sni = sni
        if source is not None:
            self.source = source
        if ssl is not None:
            self.ssl = ssl
        if ssl_cafile is not None:
            self.ssl_cafile = ssl_cafile
        if ssl_certificate is not None:
            self.ssl_certificate = ssl_certificate
        if ssl_max_ver is not None:
            self.ssl_max_ver = ssl_max_ver
        if ssl_min_ver is not None:
            self.ssl_min_ver = ssl_min_ver
        if ssl_reuse is not None:
            self.ssl_reuse = ssl_reuse
        if tfo is not None:
            self.tfo = tfo
        if tls_tickets is not None:
            self.tls_tickets = tls_tickets
        if track is not None:
            self.track = track
        if verify is not None:
            self.verify = verify
        if verifyhost is not None:
            self.verifyhost = verifyhost
        if weight is not None:
            self.weight = weight
        if ws is not None:
            self.ws = ws

    @property
    def address(self):
        """Gets the address of this RuntimeAddServer.  # noqa: E501


        :return: The address of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this RuntimeAddServer.


        :param address: The address of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def agent_addr(self):
        """Gets the agent_addr of this RuntimeAddServer.  # noqa: E501


        :return: The agent_addr of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._agent_addr

    @agent_addr.setter
    def agent_addr(self, agent_addr):
        """Sets the agent_addr of this RuntimeAddServer.


        :param agent_addr: The agent_addr of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._agent_addr = agent_addr

    @property
    def agent_check(self):
        """Gets the agent_check of this RuntimeAddServer.  # noqa: E501


        :return: The agent_check of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._agent_check

    @agent_check.setter
    def agent_check(self, agent_check):
        """Sets the agent_check of this RuntimeAddServer.


        :param agent_check: The agent_check of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if agent_check not in allowed_values:
            raise ValueError(
                "Invalid value for `agent_check` ({0}), must be one of {1}"  # noqa: E501
                .format(agent_check, allowed_values)
            )

        self._agent_check = agent_check

    @property
    def agent_inter(self):
        """Gets the agent_inter of this RuntimeAddServer.  # noqa: E501


        :return: The agent_inter of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._agent_inter

    @agent_inter.setter
    def agent_inter(self, agent_inter):
        """Sets the agent_inter of this RuntimeAddServer.


        :param agent_inter: The agent_inter of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._agent_inter = agent_inter

    @property
    def agent_port(self):
        """Gets the agent_port of this RuntimeAddServer.  # noqa: E501


        :return: The agent_port of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._agent_port

    @agent_port.setter
    def agent_port(self, agent_port):
        """Sets the agent_port of this RuntimeAddServer.


        :param agent_port: The agent_port of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._agent_port = agent_port

    @property
    def agent_send(self):
        """Gets the agent_send of this RuntimeAddServer.  # noqa: E501


        :return: The agent_send of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._agent_send

    @agent_send.setter
    def agent_send(self, agent_send):
        """Sets the agent_send of this RuntimeAddServer.


        :param agent_send: The agent_send of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._agent_send = agent_send

    @property
    def allow_0rtt(self):
        """Gets the allow_0rtt of this RuntimeAddServer.  # noqa: E501


        :return: The allow_0rtt of this RuntimeAddServer.  # noqa: E501
        :rtype: bool
        """
        return self._allow_0rtt

    @allow_0rtt.setter
    def allow_0rtt(self, allow_0rtt):
        """Sets the allow_0rtt of this RuntimeAddServer.


        :param allow_0rtt: The allow_0rtt of this RuntimeAddServer.  # noqa: E501
        :type: bool
        """

        self._allow_0rtt = allow_0rtt

    @property
    def alpn(self):
        """Gets the alpn of this RuntimeAddServer.  # noqa: E501


        :return: The alpn of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._alpn

    @alpn.setter
    def alpn(self, alpn):
        """Sets the alpn of this RuntimeAddServer.


        :param alpn: The alpn of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._alpn = alpn

    @property
    def backup(self):
        """Gets the backup of this RuntimeAddServer.  # noqa: E501


        :return: The backup of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._backup

    @backup.setter
    def backup(self, backup):
        """Sets the backup of this RuntimeAddServer.


        :param backup: The backup of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if backup not in allowed_values:
            raise ValueError(
                "Invalid value for `backup` ({0}), must be one of {1}"  # noqa: E501
                .format(backup, allowed_values)
            )

        self._backup = backup

    @property
    def check(self):
        """Gets the check of this RuntimeAddServer.  # noqa: E501


        :return: The check of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._check

    @check.setter
    def check(self, check):
        """Sets the check of this RuntimeAddServer.


        :param check: The check of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if check not in allowed_values:
            raise ValueError(
                "Invalid value for `check` ({0}), must be one of {1}"  # noqa: E501
                .format(check, allowed_values)
            )

        self._check = check

    @property
    def check_send_proxy(self):
        """Gets the check_send_proxy of this RuntimeAddServer.  # noqa: E501


        :return: The check_send_proxy of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._check_send_proxy

    @check_send_proxy.setter
    def check_send_proxy(self, check_send_proxy):
        """Sets the check_send_proxy of this RuntimeAddServer.


        :param check_send_proxy: The check_send_proxy of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if check_send_proxy not in allowed_values:
            raise ValueError(
                "Invalid value for `check_send_proxy` ({0}), must be one of {1}"  # noqa: E501
                .format(check_send_proxy, allowed_values)
            )

        self._check_send_proxy = check_send_proxy

    @property
    def check_sni(self):
        """Gets the check_sni of this RuntimeAddServer.  # noqa: E501


        :return: The check_sni of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._check_sni

    @check_sni.setter
    def check_sni(self, check_sni):
        """Sets the check_sni of this RuntimeAddServer.


        :param check_sni: The check_sni of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._check_sni = check_sni

    @property
    def check_ssl(self):
        """Gets the check_ssl of this RuntimeAddServer.  # noqa: E501


        :return: The check_ssl of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._check_ssl

    @check_ssl.setter
    def check_ssl(self, check_ssl):
        """Sets the check_ssl of this RuntimeAddServer.


        :param check_ssl: The check_ssl of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if check_ssl not in allowed_values:
            raise ValueError(
                "Invalid value for `check_ssl` ({0}), must be one of {1}"  # noqa: E501
                .format(check_ssl, allowed_values)
            )

        self._check_ssl = check_ssl

    @property
    def check_alpn(self):
        """Gets the check_alpn of this RuntimeAddServer.  # noqa: E501


        :return: The check_alpn of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._check_alpn

    @check_alpn.setter
    def check_alpn(self, check_alpn):
        """Sets the check_alpn of this RuntimeAddServer.


        :param check_alpn: The check_alpn of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._check_alpn = check_alpn

    @property
    def check_proto(self):
        """Gets the check_proto of this RuntimeAddServer.  # noqa: E501


        :return: The check_proto of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._check_proto

    @check_proto.setter
    def check_proto(self, check_proto):
        """Sets the check_proto of this RuntimeAddServer.


        :param check_proto: The check_proto of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._check_proto = check_proto

    @property
    def check_via_socks4(self):
        """Gets the check_via_socks4 of this RuntimeAddServer.  # noqa: E501


        :return: The check_via_socks4 of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._check_via_socks4

    @check_via_socks4.setter
    def check_via_socks4(self, check_via_socks4):
        """Sets the check_via_socks4 of this RuntimeAddServer.


        :param check_via_socks4: The check_via_socks4 of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if check_via_socks4 not in allowed_values:
            raise ValueError(
                "Invalid value for `check_via_socks4` ({0}), must be one of {1}"  # noqa: E501
                .format(check_via_socks4, allowed_values)
            )

        self._check_via_socks4 = check_via_socks4

    @property
    def ciphers(self):
        """Gets the ciphers of this RuntimeAddServer.  # noqa: E501


        :return: The ciphers of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._ciphers

    @ciphers.setter
    def ciphers(self, ciphers):
        """Sets the ciphers of this RuntimeAddServer.


        :param ciphers: The ciphers of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._ciphers = ciphers

    @property
    def ciphersuites(self):
        """Gets the ciphersuites of this RuntimeAddServer.  # noqa: E501


        :return: The ciphersuites of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._ciphersuites

    @ciphersuites.setter
    def ciphersuites(self, ciphersuites):
        """Sets the ciphersuites of this RuntimeAddServer.


        :param ciphersuites: The ciphersuites of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._ciphersuites = ciphersuites

    @property
    def crl_file(self):
        """Gets the crl_file of this RuntimeAddServer.  # noqa: E501


        :return: The crl_file of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._crl_file

    @crl_file.setter
    def crl_file(self, crl_file):
        """Sets the crl_file of this RuntimeAddServer.


        :param crl_file: The crl_file of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._crl_file = crl_file

    @property
    def downinter(self):
        """Gets the downinter of this RuntimeAddServer.  # noqa: E501


        :return: The downinter of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._downinter

    @downinter.setter
    def downinter(self, downinter):
        """Sets the downinter of this RuntimeAddServer.


        :param downinter: The downinter of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._downinter = downinter

    @property
    def error_limit(self):
        """Gets the error_limit of this RuntimeAddServer.  # noqa: E501


        :return: The error_limit of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._error_limit

    @error_limit.setter
    def error_limit(self, error_limit):
        """Sets the error_limit of this RuntimeAddServer.


        :param error_limit: The error_limit of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._error_limit = error_limit

    @property
    def fall(self):
        """Gets the fall of this RuntimeAddServer.  # noqa: E501


        :return: The fall of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._fall

    @fall.setter
    def fall(self, fall):
        """Sets the fall of this RuntimeAddServer.


        :param fall: The fall of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._fall = fall

    @property
    def fastinter(self):
        """Gets the fastinter of this RuntimeAddServer.  # noqa: E501


        :return: The fastinter of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._fastinter

    @fastinter.setter
    def fastinter(self, fastinter):
        """Sets the fastinter of this RuntimeAddServer.


        :param fastinter: The fastinter of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._fastinter = fastinter

    @property
    def force_sslv3(self):
        """Gets the force_sslv3 of this RuntimeAddServer.  # noqa: E501


        :return: The force_sslv3 of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._force_sslv3

    @force_sslv3.setter
    def force_sslv3(self, force_sslv3):
        """Sets the force_sslv3 of this RuntimeAddServer.


        :param force_sslv3: The force_sslv3 of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if force_sslv3 not in allowed_values:
            raise ValueError(
                "Invalid value for `force_sslv3` ({0}), must be one of {1}"  # noqa: E501
                .format(force_sslv3, allowed_values)
            )

        self._force_sslv3 = force_sslv3

    @property
    def force_tlsv10(self):
        """Gets the force_tlsv10 of this RuntimeAddServer.  # noqa: E501


        :return: The force_tlsv10 of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._force_tlsv10

    @force_tlsv10.setter
    def force_tlsv10(self, force_tlsv10):
        """Sets the force_tlsv10 of this RuntimeAddServer.


        :param force_tlsv10: The force_tlsv10 of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if force_tlsv10 not in allowed_values:
            raise ValueError(
                "Invalid value for `force_tlsv10` ({0}), must be one of {1}"  # noqa: E501
                .format(force_tlsv10, allowed_values)
            )

        self._force_tlsv10 = force_tlsv10

    @property
    def force_tlsv11(self):
        """Gets the force_tlsv11 of this RuntimeAddServer.  # noqa: E501


        :return: The force_tlsv11 of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._force_tlsv11

    @force_tlsv11.setter
    def force_tlsv11(self, force_tlsv11):
        """Sets the force_tlsv11 of this RuntimeAddServer.


        :param force_tlsv11: The force_tlsv11 of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if force_tlsv11 not in allowed_values:
            raise ValueError(
                "Invalid value for `force_tlsv11` ({0}), must be one of {1}"  # noqa: E501
                .format(force_tlsv11, allowed_values)
            )

        self._force_tlsv11 = force_tlsv11

    @property
    def force_tlsv12(self):
        """Gets the force_tlsv12 of this RuntimeAddServer.  # noqa: E501


        :return: The force_tlsv12 of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._force_tlsv12

    @force_tlsv12.setter
    def force_tlsv12(self, force_tlsv12):
        """Sets the force_tlsv12 of this RuntimeAddServer.


        :param force_tlsv12: The force_tlsv12 of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if force_tlsv12 not in allowed_values:
            raise ValueError(
                "Invalid value for `force_tlsv12` ({0}), must be one of {1}"  # noqa: E501
                .format(force_tlsv12, allowed_values)
            )

        self._force_tlsv12 = force_tlsv12

    @property
    def force_tlsv13(self):
        """Gets the force_tlsv13 of this RuntimeAddServer.  # noqa: E501


        :return: The force_tlsv13 of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._force_tlsv13

    @force_tlsv13.setter
    def force_tlsv13(self, force_tlsv13):
        """Sets the force_tlsv13 of this RuntimeAddServer.


        :param force_tlsv13: The force_tlsv13 of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if force_tlsv13 not in allowed_values:
            raise ValueError(
                "Invalid value for `force_tlsv13` ({0}), must be one of {1}"  # noqa: E501
                .format(force_tlsv13, allowed_values)
            )

        self._force_tlsv13 = force_tlsv13

    @property
    def health_check_address(self):
        """Gets the health_check_address of this RuntimeAddServer.  # noqa: E501


        :return: The health_check_address of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._health_check_address

    @health_check_address.setter
    def health_check_address(self, health_check_address):
        """Sets the health_check_address of this RuntimeAddServer.


        :param health_check_address: The health_check_address of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._health_check_address = health_check_address

    @property
    def health_check_port(self):
        """Gets the health_check_port of this RuntimeAddServer.  # noqa: E501


        :return: The health_check_port of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._health_check_port

    @health_check_port.setter
    def health_check_port(self, health_check_port):
        """Sets the health_check_port of this RuntimeAddServer.


        :param health_check_port: The health_check_port of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._health_check_port = health_check_port

    @property
    def id(self):
        """Gets the id of this RuntimeAddServer.  # noqa: E501


        :return: The id of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RuntimeAddServer.


        :param id: The id of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def inter(self):
        """Gets the inter of this RuntimeAddServer.  # noqa: E501


        :return: The inter of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._inter

    @inter.setter
    def inter(self, inter):
        """Sets the inter of this RuntimeAddServer.


        :param inter: The inter of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._inter = inter

    @property
    def maintenance(self):
        """Gets the maintenance of this RuntimeAddServer.  # noqa: E501


        :return: The maintenance of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._maintenance

    @maintenance.setter
    def maintenance(self, maintenance):
        """Sets the maintenance of this RuntimeAddServer.


        :param maintenance: The maintenance of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if maintenance not in allowed_values:
            raise ValueError(
                "Invalid value for `maintenance` ({0}), must be one of {1}"  # noqa: E501
                .format(maintenance, allowed_values)
            )

        self._maintenance = maintenance

    @property
    def maxconn(self):
        """Gets the maxconn of this RuntimeAddServer.  # noqa: E501


        :return: The maxconn of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._maxconn

    @maxconn.setter
    def maxconn(self, maxconn):
        """Sets the maxconn of this RuntimeAddServer.


        :param maxconn: The maxconn of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._maxconn = maxconn

    @property
    def maxqueue(self):
        """Gets the maxqueue of this RuntimeAddServer.  # noqa: E501


        :return: The maxqueue of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._maxqueue

    @maxqueue.setter
    def maxqueue(self, maxqueue):
        """Sets the maxqueue of this RuntimeAddServer.


        :param maxqueue: The maxqueue of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._maxqueue = maxqueue

    @property
    def minconn(self):
        """Gets the minconn of this RuntimeAddServer.  # noqa: E501


        :return: The minconn of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._minconn

    @minconn.setter
    def minconn(self, minconn):
        """Sets the minconn of this RuntimeAddServer.


        :param minconn: The minconn of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._minconn = minconn

    @property
    def name(self):
        """Gets the name of this RuntimeAddServer.  # noqa: E501


        :return: The name of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RuntimeAddServer.


        :param name: The name of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def no_sslv3(self):
        """Gets the no_sslv3 of this RuntimeAddServer.  # noqa: E501


        :return: The no_sslv3 of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._no_sslv3

    @no_sslv3.setter
    def no_sslv3(self, no_sslv3):
        """Sets the no_sslv3 of this RuntimeAddServer.


        :param no_sslv3: The no_sslv3 of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if no_sslv3 not in allowed_values:
            raise ValueError(
                "Invalid value for `no_sslv3` ({0}), must be one of {1}"  # noqa: E501
                .format(no_sslv3, allowed_values)
            )

        self._no_sslv3 = no_sslv3

    @property
    def no_tlsv10(self):
        """Gets the no_tlsv10 of this RuntimeAddServer.  # noqa: E501


        :return: The no_tlsv10 of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._no_tlsv10

    @no_tlsv10.setter
    def no_tlsv10(self, no_tlsv10):
        """Sets the no_tlsv10 of this RuntimeAddServer.


        :param no_tlsv10: The no_tlsv10 of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if no_tlsv10 not in allowed_values:
            raise ValueError(
                "Invalid value for `no_tlsv10` ({0}), must be one of {1}"  # noqa: E501
                .format(no_tlsv10, allowed_values)
            )

        self._no_tlsv10 = no_tlsv10

    @property
    def no_tlsv11(self):
        """Gets the no_tlsv11 of this RuntimeAddServer.  # noqa: E501


        :return: The no_tlsv11 of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._no_tlsv11

    @no_tlsv11.setter
    def no_tlsv11(self, no_tlsv11):
        """Sets the no_tlsv11 of this RuntimeAddServer.


        :param no_tlsv11: The no_tlsv11 of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if no_tlsv11 not in allowed_values:
            raise ValueError(
                "Invalid value for `no_tlsv11` ({0}), must be one of {1}"  # noqa: E501
                .format(no_tlsv11, allowed_values)
            )

        self._no_tlsv11 = no_tlsv11

    @property
    def no_tlsv12(self):
        """Gets the no_tlsv12 of this RuntimeAddServer.  # noqa: E501


        :return: The no_tlsv12 of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._no_tlsv12

    @no_tlsv12.setter
    def no_tlsv12(self, no_tlsv12):
        """Sets the no_tlsv12 of this RuntimeAddServer.


        :param no_tlsv12: The no_tlsv12 of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if no_tlsv12 not in allowed_values:
            raise ValueError(
                "Invalid value for `no_tlsv12` ({0}), must be one of {1}"  # noqa: E501
                .format(no_tlsv12, allowed_values)
            )

        self._no_tlsv12 = no_tlsv12

    @property
    def no_tlsv13(self):
        """Gets the no_tlsv13 of this RuntimeAddServer.  # noqa: E501


        :return: The no_tlsv13 of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._no_tlsv13

    @no_tlsv13.setter
    def no_tlsv13(self, no_tlsv13):
        """Sets the no_tlsv13 of this RuntimeAddServer.


        :param no_tlsv13: The no_tlsv13 of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if no_tlsv13 not in allowed_values:
            raise ValueError(
                "Invalid value for `no_tlsv13` ({0}), must be one of {1}"  # noqa: E501
                .format(no_tlsv13, allowed_values)
            )

        self._no_tlsv13 = no_tlsv13

    @property
    def npn(self):
        """Gets the npn of this RuntimeAddServer.  # noqa: E501


        :return: The npn of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._npn

    @npn.setter
    def npn(self, npn):
        """Sets the npn of this RuntimeAddServer.


        :param npn: The npn of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._npn = npn

    @property
    def observe(self):
        """Gets the observe of this RuntimeAddServer.  # noqa: E501


        :return: The observe of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._observe

    @observe.setter
    def observe(self, observe):
        """Sets the observe of this RuntimeAddServer.


        :param observe: The observe of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["layer4", "layer7"]  # noqa: E501
        if observe not in allowed_values:
            raise ValueError(
                "Invalid value for `observe` ({0}), must be one of {1}"  # noqa: E501
                .format(observe, allowed_values)
            )

        self._observe = observe

    @property
    def on_error(self):
        """Gets the on_error of this RuntimeAddServer.  # noqa: E501


        :return: The on_error of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._on_error

    @on_error.setter
    def on_error(self, on_error):
        """Sets the on_error of this RuntimeAddServer.


        :param on_error: The on_error of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["fastinter", "fail-check", "sudden-death", "mark-down"]  # noqa: E501
        if on_error not in allowed_values:
            raise ValueError(
                "Invalid value for `on_error` ({0}), must be one of {1}"  # noqa: E501
                .format(on_error, allowed_values)
            )

        self._on_error = on_error

    @property
    def on_marked_down(self):
        """Gets the on_marked_down of this RuntimeAddServer.  # noqa: E501


        :return: The on_marked_down of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._on_marked_down

    @on_marked_down.setter
    def on_marked_down(self, on_marked_down):
        """Sets the on_marked_down of this RuntimeAddServer.


        :param on_marked_down: The on_marked_down of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["shutdown-sessions"]  # noqa: E501
        if on_marked_down not in allowed_values:
            raise ValueError(
                "Invalid value for `on_marked_down` ({0}), must be one of {1}"  # noqa: E501
                .format(on_marked_down, allowed_values)
            )

        self._on_marked_down = on_marked_down

    @property
    def on_marked_up(self):
        """Gets the on_marked_up of this RuntimeAddServer.  # noqa: E501


        :return: The on_marked_up of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._on_marked_up

    @on_marked_up.setter
    def on_marked_up(self, on_marked_up):
        """Sets the on_marked_up of this RuntimeAddServer.


        :param on_marked_up: The on_marked_up of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["shutdown-backup-sessions"]  # noqa: E501
        if on_marked_up not in allowed_values:
            raise ValueError(
                "Invalid value for `on_marked_up` ({0}), must be one of {1}"  # noqa: E501
                .format(on_marked_up, allowed_values)
            )

        self._on_marked_up = on_marked_up

    @property
    def pool_low_conn(self):
        """Gets the pool_low_conn of this RuntimeAddServer.  # noqa: E501


        :return: The pool_low_conn of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._pool_low_conn

    @pool_low_conn.setter
    def pool_low_conn(self, pool_low_conn):
        """Sets the pool_low_conn of this RuntimeAddServer.


        :param pool_low_conn: The pool_low_conn of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._pool_low_conn = pool_low_conn

    @property
    def pool_max_conn(self):
        """Gets the pool_max_conn of this RuntimeAddServer.  # noqa: E501


        :return: The pool_max_conn of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._pool_max_conn

    @pool_max_conn.setter
    def pool_max_conn(self, pool_max_conn):
        """Sets the pool_max_conn of this RuntimeAddServer.


        :param pool_max_conn: The pool_max_conn of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._pool_max_conn = pool_max_conn

    @property
    def pool_purge_delay(self):
        """Gets the pool_purge_delay of this RuntimeAddServer.  # noqa: E501


        :return: The pool_purge_delay of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._pool_purge_delay

    @pool_purge_delay.setter
    def pool_purge_delay(self, pool_purge_delay):
        """Sets the pool_purge_delay of this RuntimeAddServer.


        :param pool_purge_delay: The pool_purge_delay of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._pool_purge_delay = pool_purge_delay

    @property
    def port(self):
        """Gets the port of this RuntimeAddServer.  # noqa: E501


        :return: The port of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this RuntimeAddServer.


        :param port: The port of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def proto(self):
        """Gets the proto of this RuntimeAddServer.  # noqa: E501


        :return: The proto of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._proto

    @proto.setter
    def proto(self, proto):
        """Sets the proto of this RuntimeAddServer.


        :param proto: The proto of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._proto = proto

    @property
    def proxy_v2_options(self):
        """Gets the proxy_v2_options of this RuntimeAddServer.  # noqa: E501


        :return: The proxy_v2_options of this RuntimeAddServer.  # noqa: E501
        :rtype: list[str]
        """
        return self._proxy_v2_options

    @proxy_v2_options.setter
    def proxy_v2_options(self, proxy_v2_options):
        """Sets the proxy_v2_options of this RuntimeAddServer.


        :param proxy_v2_options: The proxy_v2_options of this RuntimeAddServer.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ssl", "cert-cn", "ssl-cipher", "cert-sig", "cert-key", "authority", "crc32c", "unique-id"]  # noqa: E501
        if not set(proxy_v2_options).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `proxy_v2_options` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(proxy_v2_options) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._proxy_v2_options = proxy_v2_options

    @property
    def rise(self):
        """Gets the rise of this RuntimeAddServer.  # noqa: E501


        :return: The rise of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._rise

    @rise.setter
    def rise(self, rise):
        """Sets the rise of this RuntimeAddServer.


        :param rise: The rise of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._rise = rise

    @property
    def send_proxy(self):
        """Gets the send_proxy of this RuntimeAddServer.  # noqa: E501


        :return: The send_proxy of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._send_proxy

    @send_proxy.setter
    def send_proxy(self, send_proxy):
        """Sets the send_proxy of this RuntimeAddServer.


        :param send_proxy: The send_proxy of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if send_proxy not in allowed_values:
            raise ValueError(
                "Invalid value for `send_proxy` ({0}), must be one of {1}"  # noqa: E501
                .format(send_proxy, allowed_values)
            )

        self._send_proxy = send_proxy

    @property
    def send_proxy_v2(self):
        """Gets the send_proxy_v2 of this RuntimeAddServer.  # noqa: E501


        :return: The send_proxy_v2 of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._send_proxy_v2

    @send_proxy_v2.setter
    def send_proxy_v2(self, send_proxy_v2):
        """Sets the send_proxy_v2 of this RuntimeAddServer.


        :param send_proxy_v2: The send_proxy_v2 of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if send_proxy_v2 not in allowed_values:
            raise ValueError(
                "Invalid value for `send_proxy_v2` ({0}), must be one of {1}"  # noqa: E501
                .format(send_proxy_v2, allowed_values)
            )

        self._send_proxy_v2 = send_proxy_v2

    @property
    def send_proxy_v2_ssl(self):
        """Gets the send_proxy_v2_ssl of this RuntimeAddServer.  # noqa: E501


        :return: The send_proxy_v2_ssl of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._send_proxy_v2_ssl

    @send_proxy_v2_ssl.setter
    def send_proxy_v2_ssl(self, send_proxy_v2_ssl):
        """Sets the send_proxy_v2_ssl of this RuntimeAddServer.


        :param send_proxy_v2_ssl: The send_proxy_v2_ssl of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if send_proxy_v2_ssl not in allowed_values:
            raise ValueError(
                "Invalid value for `send_proxy_v2_ssl` ({0}), must be one of {1}"  # noqa: E501
                .format(send_proxy_v2_ssl, allowed_values)
            )

        self._send_proxy_v2_ssl = send_proxy_v2_ssl

    @property
    def send_proxy_v2_ssl_cn(self):
        """Gets the send_proxy_v2_ssl_cn of this RuntimeAddServer.  # noqa: E501


        :return: The send_proxy_v2_ssl_cn of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._send_proxy_v2_ssl_cn

    @send_proxy_v2_ssl_cn.setter
    def send_proxy_v2_ssl_cn(self, send_proxy_v2_ssl_cn):
        """Sets the send_proxy_v2_ssl_cn of this RuntimeAddServer.


        :param send_proxy_v2_ssl_cn: The send_proxy_v2_ssl_cn of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if send_proxy_v2_ssl_cn not in allowed_values:
            raise ValueError(
                "Invalid value for `send_proxy_v2_ssl_cn` ({0}), must be one of {1}"  # noqa: E501
                .format(send_proxy_v2_ssl_cn, allowed_values)
            )

        self._send_proxy_v2_ssl_cn = send_proxy_v2_ssl_cn

    @property
    def slowstart(self):
        """Gets the slowstart of this RuntimeAddServer.  # noqa: E501


        :return: The slowstart of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._slowstart

    @slowstart.setter
    def slowstart(self, slowstart):
        """Sets the slowstart of this RuntimeAddServer.


        :param slowstart: The slowstart of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._slowstart = slowstart

    @property
    def sni(self):
        """Gets the sni of this RuntimeAddServer.  # noqa: E501


        :return: The sni of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._sni

    @sni.setter
    def sni(self, sni):
        """Sets the sni of this RuntimeAddServer.


        :param sni: The sni of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._sni = sni

    @property
    def source(self):
        """Gets the source of this RuntimeAddServer.  # noqa: E501


        :return: The source of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this RuntimeAddServer.


        :param source: The source of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def ssl(self):
        """Gets the ssl of this RuntimeAddServer.  # noqa: E501


        :return: The ssl of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this RuntimeAddServer.


        :param ssl: The ssl of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if ssl not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl` ({0}), must be one of {1}"  # noqa: E501
                .format(ssl, allowed_values)
            )

        self._ssl = ssl

    @property
    def ssl_cafile(self):
        """Gets the ssl_cafile of this RuntimeAddServer.  # noqa: E501


        :return: The ssl_cafile of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._ssl_cafile

    @ssl_cafile.setter
    def ssl_cafile(self, ssl_cafile):
        """Sets the ssl_cafile of this RuntimeAddServer.


        :param ssl_cafile: The ssl_cafile of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._ssl_cafile = ssl_cafile

    @property
    def ssl_certificate(self):
        """Gets the ssl_certificate of this RuntimeAddServer.  # noqa: E501


        :return: The ssl_certificate of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._ssl_certificate

    @ssl_certificate.setter
    def ssl_certificate(self, ssl_certificate):
        """Sets the ssl_certificate of this RuntimeAddServer.


        :param ssl_certificate: The ssl_certificate of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._ssl_certificate = ssl_certificate

    @property
    def ssl_max_ver(self):
        """Gets the ssl_max_ver of this RuntimeAddServer.  # noqa: E501


        :return: The ssl_max_ver of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._ssl_max_ver

    @ssl_max_ver.setter
    def ssl_max_ver(self, ssl_max_ver):
        """Sets the ssl_max_ver of this RuntimeAddServer.


        :param ssl_max_ver: The ssl_max_ver of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["SSLv3", "TLSv1.0", "TLSv1.1", "TLSv1.2", "TLSv1.3"]  # noqa: E501
        if ssl_max_ver not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_max_ver` ({0}), must be one of {1}"  # noqa: E501
                .format(ssl_max_ver, allowed_values)
            )

        self._ssl_max_ver = ssl_max_ver

    @property
    def ssl_min_ver(self):
        """Gets the ssl_min_ver of this RuntimeAddServer.  # noqa: E501


        :return: The ssl_min_ver of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._ssl_min_ver

    @ssl_min_ver.setter
    def ssl_min_ver(self, ssl_min_ver):
        """Sets the ssl_min_ver of this RuntimeAddServer.


        :param ssl_min_ver: The ssl_min_ver of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["SSLv3", "TLSv1.0", "TLSv1.1", "TLSv1.2", "TLSv1.3"]  # noqa: E501
        if ssl_min_ver not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_min_ver` ({0}), must be one of {1}"  # noqa: E501
                .format(ssl_min_ver, allowed_values)
            )

        self._ssl_min_ver = ssl_min_ver

    @property
    def ssl_reuse(self):
        """Gets the ssl_reuse of this RuntimeAddServer.  # noqa: E501


        :return: The ssl_reuse of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._ssl_reuse

    @ssl_reuse.setter
    def ssl_reuse(self, ssl_reuse):
        """Sets the ssl_reuse of this RuntimeAddServer.


        :param ssl_reuse: The ssl_reuse of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if ssl_reuse not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_reuse` ({0}), must be one of {1}"  # noqa: E501
                .format(ssl_reuse, allowed_values)
            )

        self._ssl_reuse = ssl_reuse

    @property
    def tfo(self):
        """Gets the tfo of this RuntimeAddServer.  # noqa: E501


        :return: The tfo of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._tfo

    @tfo.setter
    def tfo(self, tfo):
        """Sets the tfo of this RuntimeAddServer.


        :param tfo: The tfo of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if tfo not in allowed_values:
            raise ValueError(
                "Invalid value for `tfo` ({0}), must be one of {1}"  # noqa: E501
                .format(tfo, allowed_values)
            )

        self._tfo = tfo

    @property
    def tls_tickets(self):
        """Gets the tls_tickets of this RuntimeAddServer.  # noqa: E501


        :return: The tls_tickets of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._tls_tickets

    @tls_tickets.setter
    def tls_tickets(self, tls_tickets):
        """Sets the tls_tickets of this RuntimeAddServer.


        :param tls_tickets: The tls_tickets of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if tls_tickets not in allowed_values:
            raise ValueError(
                "Invalid value for `tls_tickets` ({0}), must be one of {1}"  # noqa: E501
                .format(tls_tickets, allowed_values)
            )

        self._tls_tickets = tls_tickets

    @property
    def track(self):
        """Gets the track of this RuntimeAddServer.  # noqa: E501


        :return: The track of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this RuntimeAddServer.


        :param track: The track of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._track = track

    @property
    def verify(self):
        """Gets the verify of this RuntimeAddServer.  # noqa: E501


        :return: The verify of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._verify

    @verify.setter
    def verify(self, verify):
        """Sets the verify of this RuntimeAddServer.


        :param verify: The verify of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "required"]  # noqa: E501
        if verify not in allowed_values:
            raise ValueError(
                "Invalid value for `verify` ({0}), must be one of {1}"  # noqa: E501
                .format(verify, allowed_values)
            )

        self._verify = verify

    @property
    def verifyhost(self):
        """Gets the verifyhost of this RuntimeAddServer.  # noqa: E501


        :return: The verifyhost of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._verifyhost

    @verifyhost.setter
    def verifyhost(self, verifyhost):
        """Sets the verifyhost of this RuntimeAddServer.


        :param verifyhost: The verifyhost of this RuntimeAddServer.  # noqa: E501
        :type: str
        """

        self._verifyhost = verifyhost

    @property
    def weight(self):
        """Gets the weight of this RuntimeAddServer.  # noqa: E501


        :return: The weight of this RuntimeAddServer.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this RuntimeAddServer.


        :param weight: The weight of this RuntimeAddServer.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def ws(self):
        """Gets the ws of this RuntimeAddServer.  # noqa: E501


        :return: The ws of this RuntimeAddServer.  # noqa: E501
        :rtype: str
        """
        return self._ws

    @ws.setter
    def ws(self, ws):
        """Sets the ws of this RuntimeAddServer.


        :param ws: The ws of this RuntimeAddServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["auto", "h1", "h2"]  # noqa: E501
        if ws not in allowed_values:
            raise ValueError(
                "Invalid value for `ws` ({0}), must be one of {1}"  # noqa: E501
                .format(ws, allowed_values)
            )

        self._ws = ws

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuntimeAddServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuntimeAddServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
