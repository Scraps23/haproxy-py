# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HttpAfterResponseRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cond': 'str',
        'cond_test': 'str',
        'hdr_format': 'str',
        'hdr_match': 'str',
        'hdr_method': 'str',
        'hdr_name': 'str',
        'index': 'int',
        'status': 'int',
        'status_reason': 'str',
        'strict_mode': 'str',
        'type': 'str',
        'var_expr': 'str',
        'var_name': 'str',
        'var_scope': 'str'
    }

    attribute_map = {
        'cond': 'cond',
        'cond_test': 'cond_test',
        'hdr_format': 'hdr_format',
        'hdr_match': 'hdr_match',
        'hdr_method': 'hdr_method',
        'hdr_name': 'hdr_name',
        'index': 'index',
        'status': 'status',
        'status_reason': 'status_reason',
        'strict_mode': 'strict_mode',
        'type': 'type',
        'var_expr': 'var_expr',
        'var_name': 'var_name',
        'var_scope': 'var_scope'
    }

    def __init__(self, cond=None, cond_test=None, hdr_format=None, hdr_match=None, hdr_method=None, hdr_name=None, index=None, status=None, status_reason=None, strict_mode=None, type=None, var_expr=None, var_name=None, var_scope=None):  # noqa: E501
        """HttpAfterResponseRule - a model defined in Swagger"""  # noqa: E501
        self._cond = None
        self._cond_test = None
        self._hdr_format = None
        self._hdr_match = None
        self._hdr_method = None
        self._hdr_name = None
        self._index = None
        self._status = None
        self._status_reason = None
        self._strict_mode = None
        self._type = None
        self._var_expr = None
        self._var_name = None
        self._var_scope = None
        self.discriminator = None
        if cond is not None:
            self.cond = cond
        if cond_test is not None:
            self.cond_test = cond_test
        if hdr_format is not None:
            self.hdr_format = hdr_format
        if hdr_match is not None:
            self.hdr_match = hdr_match
        if hdr_method is not None:
            self.hdr_method = hdr_method
        if hdr_name is not None:
            self.hdr_name = hdr_name
        self.index = index
        if status is not None:
            self.status = status
        if status_reason is not None:
            self.status_reason = status_reason
        if strict_mode is not None:
            self.strict_mode = strict_mode
        self.type = type
        if var_expr is not None:
            self.var_expr = var_expr
        if var_name is not None:
            self.var_name = var_name
        if var_scope is not None:
            self.var_scope = var_scope

    @property
    def cond(self):
        """Gets the cond of this HttpAfterResponseRule.  # noqa: E501


        :return: The cond of this HttpAfterResponseRule.  # noqa: E501
        :rtype: str
        """
        return self._cond

    @cond.setter
    def cond(self, cond):
        """Sets the cond of this HttpAfterResponseRule.


        :param cond: The cond of this HttpAfterResponseRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["if", "unless"]  # noqa: E501
        if cond not in allowed_values:
            raise ValueError(
                "Invalid value for `cond` ({0}), must be one of {1}"  # noqa: E501
                .format(cond, allowed_values)
            )

        self._cond = cond

    @property
    def cond_test(self):
        """Gets the cond_test of this HttpAfterResponseRule.  # noqa: E501


        :return: The cond_test of this HttpAfterResponseRule.  # noqa: E501
        :rtype: str
        """
        return self._cond_test

    @cond_test.setter
    def cond_test(self, cond_test):
        """Sets the cond_test of this HttpAfterResponseRule.


        :param cond_test: The cond_test of this HttpAfterResponseRule.  # noqa: E501
        :type: str
        """

        self._cond_test = cond_test

    @property
    def hdr_format(self):
        """Gets the hdr_format of this HttpAfterResponseRule.  # noqa: E501


        :return: The hdr_format of this HttpAfterResponseRule.  # noqa: E501
        :rtype: str
        """
        return self._hdr_format

    @hdr_format.setter
    def hdr_format(self, hdr_format):
        """Sets the hdr_format of this HttpAfterResponseRule.


        :param hdr_format: The hdr_format of this HttpAfterResponseRule.  # noqa: E501
        :type: str
        """

        self._hdr_format = hdr_format

    @property
    def hdr_match(self):
        """Gets the hdr_match of this HttpAfterResponseRule.  # noqa: E501


        :return: The hdr_match of this HttpAfterResponseRule.  # noqa: E501
        :rtype: str
        """
        return self._hdr_match

    @hdr_match.setter
    def hdr_match(self, hdr_match):
        """Sets the hdr_match of this HttpAfterResponseRule.


        :param hdr_match: The hdr_match of this HttpAfterResponseRule.  # noqa: E501
        :type: str
        """

        self._hdr_match = hdr_match

    @property
    def hdr_method(self):
        """Gets the hdr_method of this HttpAfterResponseRule.  # noqa: E501


        :return: The hdr_method of this HttpAfterResponseRule.  # noqa: E501
        :rtype: str
        """
        return self._hdr_method

    @hdr_method.setter
    def hdr_method(self, hdr_method):
        """Sets the hdr_method of this HttpAfterResponseRule.


        :param hdr_method: The hdr_method of this HttpAfterResponseRule.  # noqa: E501
        :type: str
        """

        self._hdr_method = hdr_method

    @property
    def hdr_name(self):
        """Gets the hdr_name of this HttpAfterResponseRule.  # noqa: E501


        :return: The hdr_name of this HttpAfterResponseRule.  # noqa: E501
        :rtype: str
        """
        return self._hdr_name

    @hdr_name.setter
    def hdr_name(self, hdr_name):
        """Sets the hdr_name of this HttpAfterResponseRule.


        :param hdr_name: The hdr_name of this HttpAfterResponseRule.  # noqa: E501
        :type: str
        """

        self._hdr_name = hdr_name

    @property
    def index(self):
        """Gets the index of this HttpAfterResponseRule.  # noqa: E501


        :return: The index of this HttpAfterResponseRule.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this HttpAfterResponseRule.


        :param index: The index of this HttpAfterResponseRule.  # noqa: E501
        :type: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def status(self):
        """Gets the status of this HttpAfterResponseRule.  # noqa: E501


        :return: The status of this HttpAfterResponseRule.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HttpAfterResponseRule.


        :param status: The status of this HttpAfterResponseRule.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def status_reason(self):
        """Gets the status_reason of this HttpAfterResponseRule.  # noqa: E501


        :return: The status_reason of this HttpAfterResponseRule.  # noqa: E501
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this HttpAfterResponseRule.


        :param status_reason: The status_reason of this HttpAfterResponseRule.  # noqa: E501
        :type: str
        """

        self._status_reason = status_reason

    @property
    def strict_mode(self):
        """Gets the strict_mode of this HttpAfterResponseRule.  # noqa: E501


        :return: The strict_mode of this HttpAfterResponseRule.  # noqa: E501
        :rtype: str
        """
        return self._strict_mode

    @strict_mode.setter
    def strict_mode(self, strict_mode):
        """Sets the strict_mode of this HttpAfterResponseRule.


        :param strict_mode: The strict_mode of this HttpAfterResponseRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["on", "off"]  # noqa: E501
        if strict_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `strict_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(strict_mode, allowed_values)
            )

        self._strict_mode = strict_mode

    @property
    def type(self):
        """Gets the type of this HttpAfterResponseRule.  # noqa: E501


        :return: The type of this HttpAfterResponseRule.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HttpAfterResponseRule.


        :param type: The type of this HttpAfterResponseRule.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["add-header", "allow", "del-header", "replace-header", "replace-value", "set-header", "set-status", "set-var", "strict-mode", "unset-var"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def var_expr(self):
        """Gets the var_expr of this HttpAfterResponseRule.  # noqa: E501


        :return: The var_expr of this HttpAfterResponseRule.  # noqa: E501
        :rtype: str
        """
        return self._var_expr

    @var_expr.setter
    def var_expr(self, var_expr):
        """Sets the var_expr of this HttpAfterResponseRule.


        :param var_expr: The var_expr of this HttpAfterResponseRule.  # noqa: E501
        :type: str
        """

        self._var_expr = var_expr

    @property
    def var_name(self):
        """Gets the var_name of this HttpAfterResponseRule.  # noqa: E501


        :return: The var_name of this HttpAfterResponseRule.  # noqa: E501
        :rtype: str
        """
        return self._var_name

    @var_name.setter
    def var_name(self, var_name):
        """Sets the var_name of this HttpAfterResponseRule.


        :param var_name: The var_name of this HttpAfterResponseRule.  # noqa: E501
        :type: str
        """

        self._var_name = var_name

    @property
    def var_scope(self):
        """Gets the var_scope of this HttpAfterResponseRule.  # noqa: E501


        :return: The var_scope of this HttpAfterResponseRule.  # noqa: E501
        :rtype: str
        """
        return self._var_scope

    @var_scope.setter
    def var_scope(self, var_scope):
        """Sets the var_scope of this HttpAfterResponseRule.


        :param var_scope: The var_scope of this HttpAfterResponseRule.  # noqa: E501
        :type: str
        """

        self._var_scope = var_scope

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HttpAfterResponseRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HttpAfterResponseRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
