# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Defaults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'abortonclose': 'str',
        'accept_invalid_http_request': 'str',
        'accept_invalid_http_response': 'str',
        'adv_check': 'str',
        'allbackups': 'str',
        'backlog': 'int',
        'balance': 'Balance',
        'bind_process': 'str',
        'check_timeout': 'int',
        'checkcache': 'str',
        'clflog': 'bool',
        'client_fin_timeout': 'int',
        'client_timeout': 'int',
        'clitcpka': 'str',
        'clitcpka_cnt': 'int',
        'clitcpka_idle': 'int',
        'clitcpka_intvl': 'int',
        'compression': 'Compression',
        'connect_timeout': 'int',
        'contstats': 'str',
        'cookie': 'Cookie',
        'default_backend': 'str',
        'default_server': 'DefaultServer',
        'disable_h2_upgrade': 'str',
        'disabled': 'bool',
        'dontlog_normal': 'str',
        'dontlognull': 'str',
        'dynamic_cookie_key': 'str',
        'email_alert': 'EmailAlert',
        'enabled': 'bool',
        'error_files': 'list[Errorfile]',
        'error_log_format': 'str',
        'errorfiles_from_http_errors': 'list[Errorfiles]',
        'errorloc302': 'Errorloc',
        'errorloc303': 'Errorloc',
        'external_check': 'str',
        'external_check_command': 'str',
        'external_check_path': 'str',
        'forwardfor': 'Forwardfor',
        '_from': 'str',
        'fullconn': 'int',
        'h1_case_adjust_bogus_client': 'str',
        'h1_case_adjust_bogus_server': 'str',
        'hash_type': 'HashType',
        'http_buffer_request': 'str',
        'http_check': 'HttpCheck',
        'http_use_htx': 'str',
        'http_connection_mode': 'str',
        'http_ignore_probes': 'str',
        'http_keep_alive_timeout': 'int',
        'http_no_delay': 'str',
        'http_pretend_keepalive': 'str',
        'http_request_timeout': 'int',
        'http_restrict_req_hdr_names': 'str',
        'http_reuse': 'str',
        'http_send_name_header': 'str',
        'http_use_proxy_header': 'str',
        'httpchk_params': 'HttpchkParams',
        'httplog': 'bool',
        'httpslog': 'str',
        'idle_close_on_response': 'str',
        'independent_streams': 'str',
        'load_server_state_from_file': 'str',
        'log_format': 'str',
        'log_format_sd': 'str',
        'log_health_checks': 'str',
        'log_separate_errors': 'str',
        'log_tag': 'str',
        'logasap': 'str',
        'max_keep_alive_queue': 'int',
        'maxconn': 'int',
        'mode': 'str',
        'monitor_uri': 'MonitorUri',
        'mysql_check_params': 'MysqlCheckParams',
        'name': 'str',
        'nolinger': 'str',
        'originalto': 'Originalto',
        'persist': 'str',
        'persist_rule': 'PersistRule',
        'pgsql_check_params': 'PgsqlCheckParams',
        'prefer_last_server': 'str',
        'queue_timeout': 'int',
        'redispatch': 'Redispatch',
        'retries': 'int',
        'retry_on': 'str',
        'server_fin_timeout': 'int',
        'server_timeout': 'int',
        'smtpchk_params': 'SmtpchkParams',
        'socket_stats': 'str',
        'source': 'Source',
        'splice_auto': 'str',
        'splice_request': 'str',
        'splice_response': 'str',
        'srvtcpka': 'str',
        'srvtcpka_cnt': 'int',
        'srvtcpka_idle': 'int',
        'srvtcpka_intvl': 'int',
        'stats_options': 'StatsOptions',
        'tarpit_timeout': 'int',
        'tcp_smart_accept': 'str',
        'tcp_smart_connect': 'str',
        'tcpka': 'str',
        'tcplog': 'bool',
        'transparent': 'str',
        'tunnel_timeout': 'int',
        'unique_id_format': 'str',
        'unique_id_header': 'str'
    }

    attribute_map = {
        'abortonclose': 'abortonclose',
        'accept_invalid_http_request': 'accept_invalid_http_request',
        'accept_invalid_http_response': 'accept_invalid_http_response',
        'adv_check': 'adv_check',
        'allbackups': 'allbackups',
        'backlog': 'backlog',
        'balance': 'balance',
        'bind_process': 'bind_process',
        'check_timeout': 'check_timeout',
        'checkcache': 'checkcache',
        'clflog': 'clflog',
        'client_fin_timeout': 'client_fin_timeout',
        'client_timeout': 'client_timeout',
        'clitcpka': 'clitcpka',
        'clitcpka_cnt': 'clitcpka_cnt',
        'clitcpka_idle': 'clitcpka_idle',
        'clitcpka_intvl': 'clitcpka_intvl',
        'compression': 'compression',
        'connect_timeout': 'connect_timeout',
        'contstats': 'contstats',
        'cookie': 'cookie',
        'default_backend': 'default_backend',
        'default_server': 'default_server',
        'disable_h2_upgrade': 'disable_h2_upgrade',
        'disabled': 'disabled',
        'dontlog_normal': 'dontlog_normal',
        'dontlognull': 'dontlognull',
        'dynamic_cookie_key': 'dynamic_cookie_key',
        'email_alert': 'email_alert',
        'enabled': 'enabled',
        'error_files': 'error_files',
        'error_log_format': 'error_log_format',
        'errorfiles_from_http_errors': 'errorfiles_from_http_errors',
        'errorloc302': 'errorloc302',
        'errorloc303': 'errorloc303',
        'external_check': 'external_check',
        'external_check_command': 'external_check_command',
        'external_check_path': 'external_check_path',
        'forwardfor': 'forwardfor',
        '_from': 'from',
        'fullconn': 'fullconn',
        'h1_case_adjust_bogus_client': 'h1_case_adjust_bogus_client',
        'h1_case_adjust_bogus_server': 'h1_case_adjust_bogus_server',
        'hash_type': 'hash_type',
        'http_buffer_request': 'http-buffer-request',
        'http_check': 'http-check',
        'http_use_htx': 'http-use-htx',
        'http_connection_mode': 'http_connection_mode',
        'http_ignore_probes': 'http_ignore_probes',
        'http_keep_alive_timeout': 'http_keep_alive_timeout',
        'http_no_delay': 'http_no_delay',
        'http_pretend_keepalive': 'http_pretend_keepalive',
        'http_request_timeout': 'http_request_timeout',
        'http_restrict_req_hdr_names': 'http_restrict_req_hdr_names',
        'http_reuse': 'http_reuse',
        'http_send_name_header': 'http_send_name_header',
        'http_use_proxy_header': 'http_use_proxy_header',
        'httpchk_params': 'httpchk_params',
        'httplog': 'httplog',
        'httpslog': 'httpslog',
        'idle_close_on_response': 'idle_close_on_response',
        'independent_streams': 'independent_streams',
        'load_server_state_from_file': 'load_server_state_from_file',
        'log_format': 'log_format',
        'log_format_sd': 'log_format_sd',
        'log_health_checks': 'log_health_checks',
        'log_separate_errors': 'log_separate_errors',
        'log_tag': 'log_tag',
        'logasap': 'logasap',
        'max_keep_alive_queue': 'max_keep_alive_queue',
        'maxconn': 'maxconn',
        'mode': 'mode',
        'monitor_uri': 'monitor_uri',
        'mysql_check_params': 'mysql_check_params',
        'name': 'name',
        'nolinger': 'nolinger',
        'originalto': 'originalto',
        'persist': 'persist',
        'persist_rule': 'persist_rule',
        'pgsql_check_params': 'pgsql_check_params',
        'prefer_last_server': 'prefer_last_server',
        'queue_timeout': 'queue_timeout',
        'redispatch': 'redispatch',
        'retries': 'retries',
        'retry_on': 'retry_on',
        'server_fin_timeout': 'server_fin_timeout',
        'server_timeout': 'server_timeout',
        'smtpchk_params': 'smtpchk_params',
        'socket_stats': 'socket_stats',
        'source': 'source',
        'splice_auto': 'splice_auto',
        'splice_request': 'splice_request',
        'splice_response': 'splice_response',
        'srvtcpka': 'srvtcpka',
        'srvtcpka_cnt': 'srvtcpka_cnt',
        'srvtcpka_idle': 'srvtcpka_idle',
        'srvtcpka_intvl': 'srvtcpka_intvl',
        'stats_options': 'stats_options',
        'tarpit_timeout': 'tarpit_timeout',
        'tcp_smart_accept': 'tcp_smart_accept',
        'tcp_smart_connect': 'tcp_smart_connect',
        'tcpka': 'tcpka',
        'tcplog': 'tcplog',
        'transparent': 'transparent',
        'tunnel_timeout': 'tunnel_timeout',
        'unique_id_format': 'unique_id_format',
        'unique_id_header': 'unique_id_header'
    }

    def __init__(self, abortonclose=None, accept_invalid_http_request=None, accept_invalid_http_response=None, adv_check=None, allbackups=None, backlog=None, balance=None, bind_process=None, check_timeout=None, checkcache=None, clflog=None, client_fin_timeout=None, client_timeout=None, clitcpka=None, clitcpka_cnt=None, clitcpka_idle=None, clitcpka_intvl=None, compression=None, connect_timeout=None, contstats=None, cookie=None, default_backend=None, default_server=None, disable_h2_upgrade=None, disabled=None, dontlog_normal=None, dontlognull=None, dynamic_cookie_key=None, email_alert=None, enabled=None, error_files=None, error_log_format=None, errorfiles_from_http_errors=None, errorloc302=None, errorloc303=None, external_check=None, external_check_command=None, external_check_path=None, forwardfor=None, _from=None, fullconn=None, h1_case_adjust_bogus_client=None, h1_case_adjust_bogus_server=None, hash_type=None, http_buffer_request=None, http_check=None, http_use_htx=None, http_connection_mode=None, http_ignore_probes=None, http_keep_alive_timeout=None, http_no_delay=None, http_pretend_keepalive=None, http_request_timeout=None, http_restrict_req_hdr_names=None, http_reuse=None, http_send_name_header=None, http_use_proxy_header=None, httpchk_params=None, httplog=None, httpslog=None, idle_close_on_response=None, independent_streams=None, load_server_state_from_file=None, log_format=None, log_format_sd=None, log_health_checks=None, log_separate_errors=None, log_tag=None, logasap=None, max_keep_alive_queue=None, maxconn=None, mode=None, monitor_uri=None, mysql_check_params=None, name=None, nolinger=None, originalto=None, persist=None, persist_rule=None, pgsql_check_params=None, prefer_last_server=None, queue_timeout=None, redispatch=None, retries=None, retry_on=None, server_fin_timeout=None, server_timeout=None, smtpchk_params=None, socket_stats=None, source=None, splice_auto=None, splice_request=None, splice_response=None, srvtcpka=None, srvtcpka_cnt=None, srvtcpka_idle=None, srvtcpka_intvl=None, stats_options=None, tarpit_timeout=None, tcp_smart_accept=None, tcp_smart_connect=None, tcpka=None, tcplog=None, transparent=None, tunnel_timeout=None, unique_id_format=None, unique_id_header=None):  # noqa: E501
        """Defaults - a model defined in Swagger"""  # noqa: E501
        self._abortonclose = None
        self._accept_invalid_http_request = None
        self._accept_invalid_http_response = None
        self._adv_check = None
        self._allbackups = None
        self._backlog = None
        self._balance = None
        self._bind_process = None
        self._check_timeout = None
        self._checkcache = None
        self._clflog = None
        self._client_fin_timeout = None
        self._client_timeout = None
        self._clitcpka = None
        self._clitcpka_cnt = None
        self._clitcpka_idle = None
        self._clitcpka_intvl = None
        self._compression = None
        self._connect_timeout = None
        self._contstats = None
        self._cookie = None
        self._default_backend = None
        self._default_server = None
        self._disable_h2_upgrade = None
        self._disabled = None
        self._dontlog_normal = None
        self._dontlognull = None
        self._dynamic_cookie_key = None
        self._email_alert = None
        self._enabled = None
        self._error_files = None
        self._error_log_format = None
        self._errorfiles_from_http_errors = None
        self._errorloc302 = None
        self._errorloc303 = None
        self._external_check = None
        self._external_check_command = None
        self._external_check_path = None
        self._forwardfor = None
        self.__from = None
        self._fullconn = None
        self._h1_case_adjust_bogus_client = None
        self._h1_case_adjust_bogus_server = None
        self._hash_type = None
        self._http_buffer_request = None
        self._http_check = None
        self._http_use_htx = None
        self._http_connection_mode = None
        self._http_ignore_probes = None
        self._http_keep_alive_timeout = None
        self._http_no_delay = None
        self._http_pretend_keepalive = None
        self._http_request_timeout = None
        self._http_restrict_req_hdr_names = None
        self._http_reuse = None
        self._http_send_name_header = None
        self._http_use_proxy_header = None
        self._httpchk_params = None
        self._httplog = None
        self._httpslog = None
        self._idle_close_on_response = None
        self._independent_streams = None
        self._load_server_state_from_file = None
        self._log_format = None
        self._log_format_sd = None
        self._log_health_checks = None
        self._log_separate_errors = None
        self._log_tag = None
        self._logasap = None
        self._max_keep_alive_queue = None
        self._maxconn = None
        self._mode = None
        self._monitor_uri = None
        self._mysql_check_params = None
        self._name = None
        self._nolinger = None
        self._originalto = None
        self._persist = None
        self._persist_rule = None
        self._pgsql_check_params = None
        self._prefer_last_server = None
        self._queue_timeout = None
        self._redispatch = None
        self._retries = None
        self._retry_on = None
        self._server_fin_timeout = None
        self._server_timeout = None
        self._smtpchk_params = None
        self._socket_stats = None
        self._source = None
        self._splice_auto = None
        self._splice_request = None
        self._splice_response = None
        self._srvtcpka = None
        self._srvtcpka_cnt = None
        self._srvtcpka_idle = None
        self._srvtcpka_intvl = None
        self._stats_options = None
        self._tarpit_timeout = None
        self._tcp_smart_accept = None
        self._tcp_smart_connect = None
        self._tcpka = None
        self._tcplog = None
        self._transparent = None
        self._tunnel_timeout = None
        self._unique_id_format = None
        self._unique_id_header = None
        self.discriminator = None
        if abortonclose is not None:
            self.abortonclose = abortonclose
        if accept_invalid_http_request is not None:
            self.accept_invalid_http_request = accept_invalid_http_request
        if accept_invalid_http_response is not None:
            self.accept_invalid_http_response = accept_invalid_http_response
        if adv_check is not None:
            self.adv_check = adv_check
        if allbackups is not None:
            self.allbackups = allbackups
        if backlog is not None:
            self.backlog = backlog
        if balance is not None:
            self.balance = balance
        if bind_process is not None:
            self.bind_process = bind_process
        if check_timeout is not None:
            self.check_timeout = check_timeout
        if checkcache is not None:
            self.checkcache = checkcache
        if clflog is not None:
            self.clflog = clflog
        if client_fin_timeout is not None:
            self.client_fin_timeout = client_fin_timeout
        if client_timeout is not None:
            self.client_timeout = client_timeout
        if clitcpka is not None:
            self.clitcpka = clitcpka
        if clitcpka_cnt is not None:
            self.clitcpka_cnt = clitcpka_cnt
        if clitcpka_idle is not None:
            self.clitcpka_idle = clitcpka_idle
        if clitcpka_intvl is not None:
            self.clitcpka_intvl = clitcpka_intvl
        if compression is not None:
            self.compression = compression
        if connect_timeout is not None:
            self.connect_timeout = connect_timeout
        if contstats is not None:
            self.contstats = contstats
        if cookie is not None:
            self.cookie = cookie
        if default_backend is not None:
            self.default_backend = default_backend
        if default_server is not None:
            self.default_server = default_server
        if disable_h2_upgrade is not None:
            self.disable_h2_upgrade = disable_h2_upgrade
        if disabled is not None:
            self.disabled = disabled
        if dontlog_normal is not None:
            self.dontlog_normal = dontlog_normal
        if dontlognull is not None:
            self.dontlognull = dontlognull
        if dynamic_cookie_key is not None:
            self.dynamic_cookie_key = dynamic_cookie_key
        if email_alert is not None:
            self.email_alert = email_alert
        if enabled is not None:
            self.enabled = enabled
        if error_files is not None:
            self.error_files = error_files
        if error_log_format is not None:
            self.error_log_format = error_log_format
        if errorfiles_from_http_errors is not None:
            self.errorfiles_from_http_errors = errorfiles_from_http_errors
        if errorloc302 is not None:
            self.errorloc302 = errorloc302
        if errorloc303 is not None:
            self.errorloc303 = errorloc303
        if external_check is not None:
            self.external_check = external_check
        if external_check_command is not None:
            self.external_check_command = external_check_command
        if external_check_path is not None:
            self.external_check_path = external_check_path
        if forwardfor is not None:
            self.forwardfor = forwardfor
        if _from is not None:
            self._from = _from
        if fullconn is not None:
            self.fullconn = fullconn
        if h1_case_adjust_bogus_client is not None:
            self.h1_case_adjust_bogus_client = h1_case_adjust_bogus_client
        if h1_case_adjust_bogus_server is not None:
            self.h1_case_adjust_bogus_server = h1_case_adjust_bogus_server
        if hash_type is not None:
            self.hash_type = hash_type
        if http_buffer_request is not None:
            self.http_buffer_request = http_buffer_request
        if http_check is not None:
            self.http_check = http_check
        if http_use_htx is not None:
            self.http_use_htx = http_use_htx
        if http_connection_mode is not None:
            self.http_connection_mode = http_connection_mode
        if http_ignore_probes is not None:
            self.http_ignore_probes = http_ignore_probes
        if http_keep_alive_timeout is not None:
            self.http_keep_alive_timeout = http_keep_alive_timeout
        if http_no_delay is not None:
            self.http_no_delay = http_no_delay
        if http_pretend_keepalive is not None:
            self.http_pretend_keepalive = http_pretend_keepalive
        if http_request_timeout is not None:
            self.http_request_timeout = http_request_timeout
        if http_restrict_req_hdr_names is not None:
            self.http_restrict_req_hdr_names = http_restrict_req_hdr_names
        if http_reuse is not None:
            self.http_reuse = http_reuse
        if http_send_name_header is not None:
            self.http_send_name_header = http_send_name_header
        if http_use_proxy_header is not None:
            self.http_use_proxy_header = http_use_proxy_header
        if httpchk_params is not None:
            self.httpchk_params = httpchk_params
        if httplog is not None:
            self.httplog = httplog
        if httpslog is not None:
            self.httpslog = httpslog
        if idle_close_on_response is not None:
            self.idle_close_on_response = idle_close_on_response
        if independent_streams is not None:
            self.independent_streams = independent_streams
        if load_server_state_from_file is not None:
            self.load_server_state_from_file = load_server_state_from_file
        if log_format is not None:
            self.log_format = log_format
        if log_format_sd is not None:
            self.log_format_sd = log_format_sd
        if log_health_checks is not None:
            self.log_health_checks = log_health_checks
        if log_separate_errors is not None:
            self.log_separate_errors = log_separate_errors
        if log_tag is not None:
            self.log_tag = log_tag
        if logasap is not None:
            self.logasap = logasap
        if max_keep_alive_queue is not None:
            self.max_keep_alive_queue = max_keep_alive_queue
        if maxconn is not None:
            self.maxconn = maxconn
        if mode is not None:
            self.mode = mode
        if monitor_uri is not None:
            self.monitor_uri = monitor_uri
        if mysql_check_params is not None:
            self.mysql_check_params = mysql_check_params
        if name is not None:
            self.name = name
        if nolinger is not None:
            self.nolinger = nolinger
        if originalto is not None:
            self.originalto = originalto
        if persist is not None:
            self.persist = persist
        if persist_rule is not None:
            self.persist_rule = persist_rule
        if pgsql_check_params is not None:
            self.pgsql_check_params = pgsql_check_params
        if prefer_last_server is not None:
            self.prefer_last_server = prefer_last_server
        if queue_timeout is not None:
            self.queue_timeout = queue_timeout
        if redispatch is not None:
            self.redispatch = redispatch
        if retries is not None:
            self.retries = retries
        if retry_on is not None:
            self.retry_on = retry_on
        if server_fin_timeout is not None:
            self.server_fin_timeout = server_fin_timeout
        if server_timeout is not None:
            self.server_timeout = server_timeout
        if smtpchk_params is not None:
            self.smtpchk_params = smtpchk_params
        if socket_stats is not None:
            self.socket_stats = socket_stats
        if source is not None:
            self.source = source
        if splice_auto is not None:
            self.splice_auto = splice_auto
        if splice_request is not None:
            self.splice_request = splice_request
        if splice_response is not None:
            self.splice_response = splice_response
        if srvtcpka is not None:
            self.srvtcpka = srvtcpka
        if srvtcpka_cnt is not None:
            self.srvtcpka_cnt = srvtcpka_cnt
        if srvtcpka_idle is not None:
            self.srvtcpka_idle = srvtcpka_idle
        if srvtcpka_intvl is not None:
            self.srvtcpka_intvl = srvtcpka_intvl
        if stats_options is not None:
            self.stats_options = stats_options
        if tarpit_timeout is not None:
            self.tarpit_timeout = tarpit_timeout
        if tcp_smart_accept is not None:
            self.tcp_smart_accept = tcp_smart_accept
        if tcp_smart_connect is not None:
            self.tcp_smart_connect = tcp_smart_connect
        if tcpka is not None:
            self.tcpka = tcpka
        if tcplog is not None:
            self.tcplog = tcplog
        if transparent is not None:
            self.transparent = transparent
        if tunnel_timeout is not None:
            self.tunnel_timeout = tunnel_timeout
        if unique_id_format is not None:
            self.unique_id_format = unique_id_format
        if unique_id_header is not None:
            self.unique_id_header = unique_id_header

    @property
    def abortonclose(self):
        """Gets the abortonclose of this Defaults.  # noqa: E501


        :return: The abortonclose of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._abortonclose

    @abortonclose.setter
    def abortonclose(self, abortonclose):
        """Sets the abortonclose of this Defaults.


        :param abortonclose: The abortonclose of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if abortonclose not in allowed_values:
            raise ValueError(
                "Invalid value for `abortonclose` ({0}), must be one of {1}"  # noqa: E501
                .format(abortonclose, allowed_values)
            )

        self._abortonclose = abortonclose

    @property
    def accept_invalid_http_request(self):
        """Gets the accept_invalid_http_request of this Defaults.  # noqa: E501


        :return: The accept_invalid_http_request of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._accept_invalid_http_request

    @accept_invalid_http_request.setter
    def accept_invalid_http_request(self, accept_invalid_http_request):
        """Sets the accept_invalid_http_request of this Defaults.


        :param accept_invalid_http_request: The accept_invalid_http_request of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if accept_invalid_http_request not in allowed_values:
            raise ValueError(
                "Invalid value for `accept_invalid_http_request` ({0}), must be one of {1}"  # noqa: E501
                .format(accept_invalid_http_request, allowed_values)
            )

        self._accept_invalid_http_request = accept_invalid_http_request

    @property
    def accept_invalid_http_response(self):
        """Gets the accept_invalid_http_response of this Defaults.  # noqa: E501


        :return: The accept_invalid_http_response of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._accept_invalid_http_response

    @accept_invalid_http_response.setter
    def accept_invalid_http_response(self, accept_invalid_http_response):
        """Sets the accept_invalid_http_response of this Defaults.


        :param accept_invalid_http_response: The accept_invalid_http_response of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if accept_invalid_http_response not in allowed_values:
            raise ValueError(
                "Invalid value for `accept_invalid_http_response` ({0}), must be one of {1}"  # noqa: E501
                .format(accept_invalid_http_response, allowed_values)
            )

        self._accept_invalid_http_response = accept_invalid_http_response

    @property
    def adv_check(self):
        """Gets the adv_check of this Defaults.  # noqa: E501


        :return: The adv_check of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._adv_check

    @adv_check.setter
    def adv_check(self, adv_check):
        """Sets the adv_check of this Defaults.


        :param adv_check: The adv_check of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["ssl-hello-chk", "smtpchk", "ldap-check", "mysql-check", "pgsql-check", "tcp-check", "redis-check", "httpchk"]  # noqa: E501
        if adv_check not in allowed_values:
            raise ValueError(
                "Invalid value for `adv_check` ({0}), must be one of {1}"  # noqa: E501
                .format(adv_check, allowed_values)
            )

        self._adv_check = adv_check

    @property
    def allbackups(self):
        """Gets the allbackups of this Defaults.  # noqa: E501


        :return: The allbackups of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._allbackups

    @allbackups.setter
    def allbackups(self, allbackups):
        """Sets the allbackups of this Defaults.


        :param allbackups: The allbackups of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if allbackups not in allowed_values:
            raise ValueError(
                "Invalid value for `allbackups` ({0}), must be one of {1}"  # noqa: E501
                .format(allbackups, allowed_values)
            )

        self._allbackups = allbackups

    @property
    def backlog(self):
        """Gets the backlog of this Defaults.  # noqa: E501


        :return: The backlog of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._backlog

    @backlog.setter
    def backlog(self, backlog):
        """Sets the backlog of this Defaults.


        :param backlog: The backlog of this Defaults.  # noqa: E501
        :type: int
        """

        self._backlog = backlog

    @property
    def balance(self):
        """Gets the balance of this Defaults.  # noqa: E501


        :return: The balance of this Defaults.  # noqa: E501
        :rtype: Balance
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Defaults.


        :param balance: The balance of this Defaults.  # noqa: E501
        :type: Balance
        """

        self._balance = balance

    @property
    def bind_process(self):
        """Gets the bind_process of this Defaults.  # noqa: E501


        :return: The bind_process of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._bind_process

    @bind_process.setter
    def bind_process(self, bind_process):
        """Sets the bind_process of this Defaults.


        :param bind_process: The bind_process of this Defaults.  # noqa: E501
        :type: str
        """

        self._bind_process = bind_process

    @property
    def check_timeout(self):
        """Gets the check_timeout of this Defaults.  # noqa: E501


        :return: The check_timeout of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._check_timeout

    @check_timeout.setter
    def check_timeout(self, check_timeout):
        """Sets the check_timeout of this Defaults.


        :param check_timeout: The check_timeout of this Defaults.  # noqa: E501
        :type: int
        """

        self._check_timeout = check_timeout

    @property
    def checkcache(self):
        """Gets the checkcache of this Defaults.  # noqa: E501


        :return: The checkcache of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._checkcache

    @checkcache.setter
    def checkcache(self, checkcache):
        """Sets the checkcache of this Defaults.


        :param checkcache: The checkcache of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if checkcache not in allowed_values:
            raise ValueError(
                "Invalid value for `checkcache` ({0}), must be one of {1}"  # noqa: E501
                .format(checkcache, allowed_values)
            )

        self._checkcache = checkcache

    @property
    def clflog(self):
        """Gets the clflog of this Defaults.  # noqa: E501


        :return: The clflog of this Defaults.  # noqa: E501
        :rtype: bool
        """
        return self._clflog

    @clflog.setter
    def clflog(self, clflog):
        """Sets the clflog of this Defaults.


        :param clflog: The clflog of this Defaults.  # noqa: E501
        :type: bool
        """

        self._clflog = clflog

    @property
    def client_fin_timeout(self):
        """Gets the client_fin_timeout of this Defaults.  # noqa: E501


        :return: The client_fin_timeout of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._client_fin_timeout

    @client_fin_timeout.setter
    def client_fin_timeout(self, client_fin_timeout):
        """Sets the client_fin_timeout of this Defaults.


        :param client_fin_timeout: The client_fin_timeout of this Defaults.  # noqa: E501
        :type: int
        """

        self._client_fin_timeout = client_fin_timeout

    @property
    def client_timeout(self):
        """Gets the client_timeout of this Defaults.  # noqa: E501


        :return: The client_timeout of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._client_timeout

    @client_timeout.setter
    def client_timeout(self, client_timeout):
        """Sets the client_timeout of this Defaults.


        :param client_timeout: The client_timeout of this Defaults.  # noqa: E501
        :type: int
        """

        self._client_timeout = client_timeout

    @property
    def clitcpka(self):
        """Gets the clitcpka of this Defaults.  # noqa: E501


        :return: The clitcpka of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._clitcpka

    @clitcpka.setter
    def clitcpka(self, clitcpka):
        """Sets the clitcpka of this Defaults.


        :param clitcpka: The clitcpka of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if clitcpka not in allowed_values:
            raise ValueError(
                "Invalid value for `clitcpka` ({0}), must be one of {1}"  # noqa: E501
                .format(clitcpka, allowed_values)
            )

        self._clitcpka = clitcpka

    @property
    def clitcpka_cnt(self):
        """Gets the clitcpka_cnt of this Defaults.  # noqa: E501


        :return: The clitcpka_cnt of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._clitcpka_cnt

    @clitcpka_cnt.setter
    def clitcpka_cnt(self, clitcpka_cnt):
        """Sets the clitcpka_cnt of this Defaults.


        :param clitcpka_cnt: The clitcpka_cnt of this Defaults.  # noqa: E501
        :type: int
        """

        self._clitcpka_cnt = clitcpka_cnt

    @property
    def clitcpka_idle(self):
        """Gets the clitcpka_idle of this Defaults.  # noqa: E501


        :return: The clitcpka_idle of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._clitcpka_idle

    @clitcpka_idle.setter
    def clitcpka_idle(self, clitcpka_idle):
        """Sets the clitcpka_idle of this Defaults.


        :param clitcpka_idle: The clitcpka_idle of this Defaults.  # noqa: E501
        :type: int
        """

        self._clitcpka_idle = clitcpka_idle

    @property
    def clitcpka_intvl(self):
        """Gets the clitcpka_intvl of this Defaults.  # noqa: E501


        :return: The clitcpka_intvl of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._clitcpka_intvl

    @clitcpka_intvl.setter
    def clitcpka_intvl(self, clitcpka_intvl):
        """Sets the clitcpka_intvl of this Defaults.


        :param clitcpka_intvl: The clitcpka_intvl of this Defaults.  # noqa: E501
        :type: int
        """

        self._clitcpka_intvl = clitcpka_intvl

    @property
    def compression(self):
        """Gets the compression of this Defaults.  # noqa: E501


        :return: The compression of this Defaults.  # noqa: E501
        :rtype: Compression
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this Defaults.


        :param compression: The compression of this Defaults.  # noqa: E501
        :type: Compression
        """

        self._compression = compression

    @property
    def connect_timeout(self):
        """Gets the connect_timeout of this Defaults.  # noqa: E501


        :return: The connect_timeout of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._connect_timeout

    @connect_timeout.setter
    def connect_timeout(self, connect_timeout):
        """Sets the connect_timeout of this Defaults.


        :param connect_timeout: The connect_timeout of this Defaults.  # noqa: E501
        :type: int
        """

        self._connect_timeout = connect_timeout

    @property
    def contstats(self):
        """Gets the contstats of this Defaults.  # noqa: E501


        :return: The contstats of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._contstats

    @contstats.setter
    def contstats(self, contstats):
        """Sets the contstats of this Defaults.


        :param contstats: The contstats of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled"]  # noqa: E501
        if contstats not in allowed_values:
            raise ValueError(
                "Invalid value for `contstats` ({0}), must be one of {1}"  # noqa: E501
                .format(contstats, allowed_values)
            )

        self._contstats = contstats

    @property
    def cookie(self):
        """Gets the cookie of this Defaults.  # noqa: E501


        :return: The cookie of this Defaults.  # noqa: E501
        :rtype: Cookie
        """
        return self._cookie

    @cookie.setter
    def cookie(self, cookie):
        """Sets the cookie of this Defaults.


        :param cookie: The cookie of this Defaults.  # noqa: E501
        :type: Cookie
        """

        self._cookie = cookie

    @property
    def default_backend(self):
        """Gets the default_backend of this Defaults.  # noqa: E501


        :return: The default_backend of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._default_backend

    @default_backend.setter
    def default_backend(self, default_backend):
        """Sets the default_backend of this Defaults.


        :param default_backend: The default_backend of this Defaults.  # noqa: E501
        :type: str
        """

        self._default_backend = default_backend

    @property
    def default_server(self):
        """Gets the default_server of this Defaults.  # noqa: E501


        :return: The default_server of this Defaults.  # noqa: E501
        :rtype: DefaultServer
        """
        return self._default_server

    @default_server.setter
    def default_server(self, default_server):
        """Sets the default_server of this Defaults.


        :param default_server: The default_server of this Defaults.  # noqa: E501
        :type: DefaultServer
        """

        self._default_server = default_server

    @property
    def disable_h2_upgrade(self):
        """Gets the disable_h2_upgrade of this Defaults.  # noqa: E501


        :return: The disable_h2_upgrade of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._disable_h2_upgrade

    @disable_h2_upgrade.setter
    def disable_h2_upgrade(self, disable_h2_upgrade):
        """Sets the disable_h2_upgrade of this Defaults.


        :param disable_h2_upgrade: The disable_h2_upgrade of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if disable_h2_upgrade not in allowed_values:
            raise ValueError(
                "Invalid value for `disable_h2_upgrade` ({0}), must be one of {1}"  # noqa: E501
                .format(disable_h2_upgrade, allowed_values)
            )

        self._disable_h2_upgrade = disable_h2_upgrade

    @property
    def disabled(self):
        """Gets the disabled of this Defaults.  # noqa: E501


        :return: The disabled of this Defaults.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Defaults.


        :param disabled: The disabled of this Defaults.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def dontlog_normal(self):
        """Gets the dontlog_normal of this Defaults.  # noqa: E501


        :return: The dontlog_normal of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._dontlog_normal

    @dontlog_normal.setter
    def dontlog_normal(self, dontlog_normal):
        """Sets the dontlog_normal of this Defaults.


        :param dontlog_normal: The dontlog_normal of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if dontlog_normal not in allowed_values:
            raise ValueError(
                "Invalid value for `dontlog_normal` ({0}), must be one of {1}"  # noqa: E501
                .format(dontlog_normal, allowed_values)
            )

        self._dontlog_normal = dontlog_normal

    @property
    def dontlognull(self):
        """Gets the dontlognull of this Defaults.  # noqa: E501


        :return: The dontlognull of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._dontlognull

    @dontlognull.setter
    def dontlognull(self, dontlognull):
        """Sets the dontlognull of this Defaults.


        :param dontlognull: The dontlognull of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if dontlognull not in allowed_values:
            raise ValueError(
                "Invalid value for `dontlognull` ({0}), must be one of {1}"  # noqa: E501
                .format(dontlognull, allowed_values)
            )

        self._dontlognull = dontlognull

    @property
    def dynamic_cookie_key(self):
        """Gets the dynamic_cookie_key of this Defaults.  # noqa: E501


        :return: The dynamic_cookie_key of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_cookie_key

    @dynamic_cookie_key.setter
    def dynamic_cookie_key(self, dynamic_cookie_key):
        """Sets the dynamic_cookie_key of this Defaults.


        :param dynamic_cookie_key: The dynamic_cookie_key of this Defaults.  # noqa: E501
        :type: str
        """

        self._dynamic_cookie_key = dynamic_cookie_key

    @property
    def email_alert(self):
        """Gets the email_alert of this Defaults.  # noqa: E501


        :return: The email_alert of this Defaults.  # noqa: E501
        :rtype: EmailAlert
        """
        return self._email_alert

    @email_alert.setter
    def email_alert(self, email_alert):
        """Sets the email_alert of this Defaults.


        :param email_alert: The email_alert of this Defaults.  # noqa: E501
        :type: EmailAlert
        """

        self._email_alert = email_alert

    @property
    def enabled(self):
        """Gets the enabled of this Defaults.  # noqa: E501


        :return: The enabled of this Defaults.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Defaults.


        :param enabled: The enabled of this Defaults.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def error_files(self):
        """Gets the error_files of this Defaults.  # noqa: E501


        :return: The error_files of this Defaults.  # noqa: E501
        :rtype: list[Errorfile]
        """
        return self._error_files

    @error_files.setter
    def error_files(self, error_files):
        """Sets the error_files of this Defaults.


        :param error_files: The error_files of this Defaults.  # noqa: E501
        :type: list[Errorfile]
        """

        self._error_files = error_files

    @property
    def error_log_format(self):
        """Gets the error_log_format of this Defaults.  # noqa: E501


        :return: The error_log_format of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._error_log_format

    @error_log_format.setter
    def error_log_format(self, error_log_format):
        """Sets the error_log_format of this Defaults.


        :param error_log_format: The error_log_format of this Defaults.  # noqa: E501
        :type: str
        """

        self._error_log_format = error_log_format

    @property
    def errorfiles_from_http_errors(self):
        """Gets the errorfiles_from_http_errors of this Defaults.  # noqa: E501


        :return: The errorfiles_from_http_errors of this Defaults.  # noqa: E501
        :rtype: list[Errorfiles]
        """
        return self._errorfiles_from_http_errors

    @errorfiles_from_http_errors.setter
    def errorfiles_from_http_errors(self, errorfiles_from_http_errors):
        """Sets the errorfiles_from_http_errors of this Defaults.


        :param errorfiles_from_http_errors: The errorfiles_from_http_errors of this Defaults.  # noqa: E501
        :type: list[Errorfiles]
        """

        self._errorfiles_from_http_errors = errorfiles_from_http_errors

    @property
    def errorloc302(self):
        """Gets the errorloc302 of this Defaults.  # noqa: E501


        :return: The errorloc302 of this Defaults.  # noqa: E501
        :rtype: Errorloc
        """
        return self._errorloc302

    @errorloc302.setter
    def errorloc302(self, errorloc302):
        """Sets the errorloc302 of this Defaults.


        :param errorloc302: The errorloc302 of this Defaults.  # noqa: E501
        :type: Errorloc
        """

        self._errorloc302 = errorloc302

    @property
    def errorloc303(self):
        """Gets the errorloc303 of this Defaults.  # noqa: E501


        :return: The errorloc303 of this Defaults.  # noqa: E501
        :rtype: Errorloc
        """
        return self._errorloc303

    @errorloc303.setter
    def errorloc303(self, errorloc303):
        """Sets the errorloc303 of this Defaults.


        :param errorloc303: The errorloc303 of this Defaults.  # noqa: E501
        :type: Errorloc
        """

        self._errorloc303 = errorloc303

    @property
    def external_check(self):
        """Gets the external_check of this Defaults.  # noqa: E501


        :return: The external_check of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._external_check

    @external_check.setter
    def external_check(self, external_check):
        """Sets the external_check of this Defaults.


        :param external_check: The external_check of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if external_check not in allowed_values:
            raise ValueError(
                "Invalid value for `external_check` ({0}), must be one of {1}"  # noqa: E501
                .format(external_check, allowed_values)
            )

        self._external_check = external_check

    @property
    def external_check_command(self):
        """Gets the external_check_command of this Defaults.  # noqa: E501


        :return: The external_check_command of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._external_check_command

    @external_check_command.setter
    def external_check_command(self, external_check_command):
        """Sets the external_check_command of this Defaults.


        :param external_check_command: The external_check_command of this Defaults.  # noqa: E501
        :type: str
        """

        self._external_check_command = external_check_command

    @property
    def external_check_path(self):
        """Gets the external_check_path of this Defaults.  # noqa: E501


        :return: The external_check_path of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._external_check_path

    @external_check_path.setter
    def external_check_path(self, external_check_path):
        """Sets the external_check_path of this Defaults.


        :param external_check_path: The external_check_path of this Defaults.  # noqa: E501
        :type: str
        """

        self._external_check_path = external_check_path

    @property
    def forwardfor(self):
        """Gets the forwardfor of this Defaults.  # noqa: E501


        :return: The forwardfor of this Defaults.  # noqa: E501
        :rtype: Forwardfor
        """
        return self._forwardfor

    @forwardfor.setter
    def forwardfor(self, forwardfor):
        """Sets the forwardfor of this Defaults.


        :param forwardfor: The forwardfor of this Defaults.  # noqa: E501
        :type: Forwardfor
        """

        self._forwardfor = forwardfor

    @property
    def _from(self):
        """Gets the _from of this Defaults.  # noqa: E501


        :return: The _from of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Defaults.


        :param _from: The _from of this Defaults.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def fullconn(self):
        """Gets the fullconn of this Defaults.  # noqa: E501


        :return: The fullconn of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._fullconn

    @fullconn.setter
    def fullconn(self, fullconn):
        """Sets the fullconn of this Defaults.


        :param fullconn: The fullconn of this Defaults.  # noqa: E501
        :type: int
        """

        self._fullconn = fullconn

    @property
    def h1_case_adjust_bogus_client(self):
        """Gets the h1_case_adjust_bogus_client of this Defaults.  # noqa: E501


        :return: The h1_case_adjust_bogus_client of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._h1_case_adjust_bogus_client

    @h1_case_adjust_bogus_client.setter
    def h1_case_adjust_bogus_client(self, h1_case_adjust_bogus_client):
        """Sets the h1_case_adjust_bogus_client of this Defaults.


        :param h1_case_adjust_bogus_client: The h1_case_adjust_bogus_client of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if h1_case_adjust_bogus_client not in allowed_values:
            raise ValueError(
                "Invalid value for `h1_case_adjust_bogus_client` ({0}), must be one of {1}"  # noqa: E501
                .format(h1_case_adjust_bogus_client, allowed_values)
            )

        self._h1_case_adjust_bogus_client = h1_case_adjust_bogus_client

    @property
    def h1_case_adjust_bogus_server(self):
        """Gets the h1_case_adjust_bogus_server of this Defaults.  # noqa: E501


        :return: The h1_case_adjust_bogus_server of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._h1_case_adjust_bogus_server

    @h1_case_adjust_bogus_server.setter
    def h1_case_adjust_bogus_server(self, h1_case_adjust_bogus_server):
        """Sets the h1_case_adjust_bogus_server of this Defaults.


        :param h1_case_adjust_bogus_server: The h1_case_adjust_bogus_server of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if h1_case_adjust_bogus_server not in allowed_values:
            raise ValueError(
                "Invalid value for `h1_case_adjust_bogus_server` ({0}), must be one of {1}"  # noqa: E501
                .format(h1_case_adjust_bogus_server, allowed_values)
            )

        self._h1_case_adjust_bogus_server = h1_case_adjust_bogus_server

    @property
    def hash_type(self):
        """Gets the hash_type of this Defaults.  # noqa: E501


        :return: The hash_type of this Defaults.  # noqa: E501
        :rtype: HashType
        """
        return self._hash_type

    @hash_type.setter
    def hash_type(self, hash_type):
        """Sets the hash_type of this Defaults.


        :param hash_type: The hash_type of this Defaults.  # noqa: E501
        :type: HashType
        """

        self._hash_type = hash_type

    @property
    def http_buffer_request(self):
        """Gets the http_buffer_request of this Defaults.  # noqa: E501


        :return: The http_buffer_request of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._http_buffer_request

    @http_buffer_request.setter
    def http_buffer_request(self, http_buffer_request):
        """Sets the http_buffer_request of this Defaults.


        :param http_buffer_request: The http_buffer_request of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if http_buffer_request not in allowed_values:
            raise ValueError(
                "Invalid value for `http_buffer_request` ({0}), must be one of {1}"  # noqa: E501
                .format(http_buffer_request, allowed_values)
            )

        self._http_buffer_request = http_buffer_request

    @property
    def http_check(self):
        """Gets the http_check of this Defaults.  # noqa: E501


        :return: The http_check of this Defaults.  # noqa: E501
        :rtype: HttpCheck
        """
        return self._http_check

    @http_check.setter
    def http_check(self, http_check):
        """Sets the http_check of this Defaults.


        :param http_check: The http_check of this Defaults.  # noqa: E501
        :type: HttpCheck
        """

        self._http_check = http_check

    @property
    def http_use_htx(self):
        """Gets the http_use_htx of this Defaults.  # noqa: E501


        :return: The http_use_htx of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._http_use_htx

    @http_use_htx.setter
    def http_use_htx(self, http_use_htx):
        """Sets the http_use_htx of this Defaults.


        :param http_use_htx: The http_use_htx of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if http_use_htx not in allowed_values:
            raise ValueError(
                "Invalid value for `http_use_htx` ({0}), must be one of {1}"  # noqa: E501
                .format(http_use_htx, allowed_values)
            )

        self._http_use_htx = http_use_htx

    @property
    def http_connection_mode(self):
        """Gets the http_connection_mode of this Defaults.  # noqa: E501


        :return: The http_connection_mode of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._http_connection_mode

    @http_connection_mode.setter
    def http_connection_mode(self, http_connection_mode):
        """Sets the http_connection_mode of this Defaults.


        :param http_connection_mode: The http_connection_mode of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["httpclose", "http-server-close", "http-keep-alive"]  # noqa: E501
        if http_connection_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `http_connection_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(http_connection_mode, allowed_values)
            )

        self._http_connection_mode = http_connection_mode

    @property
    def http_ignore_probes(self):
        """Gets the http_ignore_probes of this Defaults.  # noqa: E501


        :return: The http_ignore_probes of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._http_ignore_probes

    @http_ignore_probes.setter
    def http_ignore_probes(self, http_ignore_probes):
        """Sets the http_ignore_probes of this Defaults.


        :param http_ignore_probes: The http_ignore_probes of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if http_ignore_probes not in allowed_values:
            raise ValueError(
                "Invalid value for `http_ignore_probes` ({0}), must be one of {1}"  # noqa: E501
                .format(http_ignore_probes, allowed_values)
            )

        self._http_ignore_probes = http_ignore_probes

    @property
    def http_keep_alive_timeout(self):
        """Gets the http_keep_alive_timeout of this Defaults.  # noqa: E501


        :return: The http_keep_alive_timeout of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._http_keep_alive_timeout

    @http_keep_alive_timeout.setter
    def http_keep_alive_timeout(self, http_keep_alive_timeout):
        """Sets the http_keep_alive_timeout of this Defaults.


        :param http_keep_alive_timeout: The http_keep_alive_timeout of this Defaults.  # noqa: E501
        :type: int
        """

        self._http_keep_alive_timeout = http_keep_alive_timeout

    @property
    def http_no_delay(self):
        """Gets the http_no_delay of this Defaults.  # noqa: E501


        :return: The http_no_delay of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._http_no_delay

    @http_no_delay.setter
    def http_no_delay(self, http_no_delay):
        """Sets the http_no_delay of this Defaults.


        :param http_no_delay: The http_no_delay of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if http_no_delay not in allowed_values:
            raise ValueError(
                "Invalid value for `http_no_delay` ({0}), must be one of {1}"  # noqa: E501
                .format(http_no_delay, allowed_values)
            )

        self._http_no_delay = http_no_delay

    @property
    def http_pretend_keepalive(self):
        """Gets the http_pretend_keepalive of this Defaults.  # noqa: E501


        :return: The http_pretend_keepalive of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._http_pretend_keepalive

    @http_pretend_keepalive.setter
    def http_pretend_keepalive(self, http_pretend_keepalive):
        """Sets the http_pretend_keepalive of this Defaults.


        :param http_pretend_keepalive: The http_pretend_keepalive of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if http_pretend_keepalive not in allowed_values:
            raise ValueError(
                "Invalid value for `http_pretend_keepalive` ({0}), must be one of {1}"  # noqa: E501
                .format(http_pretend_keepalive, allowed_values)
            )

        self._http_pretend_keepalive = http_pretend_keepalive

    @property
    def http_request_timeout(self):
        """Gets the http_request_timeout of this Defaults.  # noqa: E501


        :return: The http_request_timeout of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._http_request_timeout

    @http_request_timeout.setter
    def http_request_timeout(self, http_request_timeout):
        """Sets the http_request_timeout of this Defaults.


        :param http_request_timeout: The http_request_timeout of this Defaults.  # noqa: E501
        :type: int
        """

        self._http_request_timeout = http_request_timeout

    @property
    def http_restrict_req_hdr_names(self):
        """Gets the http_restrict_req_hdr_names of this Defaults.  # noqa: E501


        :return: The http_restrict_req_hdr_names of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._http_restrict_req_hdr_names

    @http_restrict_req_hdr_names.setter
    def http_restrict_req_hdr_names(self, http_restrict_req_hdr_names):
        """Sets the http_restrict_req_hdr_names of this Defaults.


        :param http_restrict_req_hdr_names: The http_restrict_req_hdr_names of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["preserve", "delete", "reject"]  # noqa: E501
        if http_restrict_req_hdr_names not in allowed_values:
            raise ValueError(
                "Invalid value for `http_restrict_req_hdr_names` ({0}), must be one of {1}"  # noqa: E501
                .format(http_restrict_req_hdr_names, allowed_values)
            )

        self._http_restrict_req_hdr_names = http_restrict_req_hdr_names

    @property
    def http_reuse(self):
        """Gets the http_reuse of this Defaults.  # noqa: E501


        :return: The http_reuse of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._http_reuse

    @http_reuse.setter
    def http_reuse(self, http_reuse):
        """Sets the http_reuse of this Defaults.


        :param http_reuse: The http_reuse of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["aggressive", "always", "never", "safe"]  # noqa: E501
        if http_reuse not in allowed_values:
            raise ValueError(
                "Invalid value for `http_reuse` ({0}), must be one of {1}"  # noqa: E501
                .format(http_reuse, allowed_values)
            )

        self._http_reuse = http_reuse

    @property
    def http_send_name_header(self):
        """Gets the http_send_name_header of this Defaults.  # noqa: E501


        :return: The http_send_name_header of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._http_send_name_header

    @http_send_name_header.setter
    def http_send_name_header(self, http_send_name_header):
        """Sets the http_send_name_header of this Defaults.


        :param http_send_name_header: The http_send_name_header of this Defaults.  # noqa: E501
        :type: str
        """

        self._http_send_name_header = http_send_name_header

    @property
    def http_use_proxy_header(self):
        """Gets the http_use_proxy_header of this Defaults.  # noqa: E501


        :return: The http_use_proxy_header of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._http_use_proxy_header

    @http_use_proxy_header.setter
    def http_use_proxy_header(self, http_use_proxy_header):
        """Sets the http_use_proxy_header of this Defaults.


        :param http_use_proxy_header: The http_use_proxy_header of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if http_use_proxy_header not in allowed_values:
            raise ValueError(
                "Invalid value for `http_use_proxy_header` ({0}), must be one of {1}"  # noqa: E501
                .format(http_use_proxy_header, allowed_values)
            )

        self._http_use_proxy_header = http_use_proxy_header

    @property
    def httpchk_params(self):
        """Gets the httpchk_params of this Defaults.  # noqa: E501


        :return: The httpchk_params of this Defaults.  # noqa: E501
        :rtype: HttpchkParams
        """
        return self._httpchk_params

    @httpchk_params.setter
    def httpchk_params(self, httpchk_params):
        """Sets the httpchk_params of this Defaults.


        :param httpchk_params: The httpchk_params of this Defaults.  # noqa: E501
        :type: HttpchkParams
        """

        self._httpchk_params = httpchk_params

    @property
    def httplog(self):
        """Gets the httplog of this Defaults.  # noqa: E501


        :return: The httplog of this Defaults.  # noqa: E501
        :rtype: bool
        """
        return self._httplog

    @httplog.setter
    def httplog(self, httplog):
        """Sets the httplog of this Defaults.


        :param httplog: The httplog of this Defaults.  # noqa: E501
        :type: bool
        """

        self._httplog = httplog

    @property
    def httpslog(self):
        """Gets the httpslog of this Defaults.  # noqa: E501


        :return: The httpslog of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._httpslog

    @httpslog.setter
    def httpslog(self, httpslog):
        """Sets the httpslog of this Defaults.


        :param httpslog: The httpslog of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if httpslog not in allowed_values:
            raise ValueError(
                "Invalid value for `httpslog` ({0}), must be one of {1}"  # noqa: E501
                .format(httpslog, allowed_values)
            )

        self._httpslog = httpslog

    @property
    def idle_close_on_response(self):
        """Gets the idle_close_on_response of this Defaults.  # noqa: E501


        :return: The idle_close_on_response of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._idle_close_on_response

    @idle_close_on_response.setter
    def idle_close_on_response(self, idle_close_on_response):
        """Sets the idle_close_on_response of this Defaults.


        :param idle_close_on_response: The idle_close_on_response of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if idle_close_on_response not in allowed_values:
            raise ValueError(
                "Invalid value for `idle_close_on_response` ({0}), must be one of {1}"  # noqa: E501
                .format(idle_close_on_response, allowed_values)
            )

        self._idle_close_on_response = idle_close_on_response

    @property
    def independent_streams(self):
        """Gets the independent_streams of this Defaults.  # noqa: E501


        :return: The independent_streams of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._independent_streams

    @independent_streams.setter
    def independent_streams(self, independent_streams):
        """Sets the independent_streams of this Defaults.


        :param independent_streams: The independent_streams of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if independent_streams not in allowed_values:
            raise ValueError(
                "Invalid value for `independent_streams` ({0}), must be one of {1}"  # noqa: E501
                .format(independent_streams, allowed_values)
            )

        self._independent_streams = independent_streams

    @property
    def load_server_state_from_file(self):
        """Gets the load_server_state_from_file of this Defaults.  # noqa: E501


        :return: The load_server_state_from_file of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._load_server_state_from_file

    @load_server_state_from_file.setter
    def load_server_state_from_file(self, load_server_state_from_file):
        """Sets the load_server_state_from_file of this Defaults.


        :param load_server_state_from_file: The load_server_state_from_file of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["global", "local", "none"]  # noqa: E501
        if load_server_state_from_file not in allowed_values:
            raise ValueError(
                "Invalid value for `load_server_state_from_file` ({0}), must be one of {1}"  # noqa: E501
                .format(load_server_state_from_file, allowed_values)
            )

        self._load_server_state_from_file = load_server_state_from_file

    @property
    def log_format(self):
        """Gets the log_format of this Defaults.  # noqa: E501


        :return: The log_format of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._log_format

    @log_format.setter
    def log_format(self, log_format):
        """Sets the log_format of this Defaults.


        :param log_format: The log_format of this Defaults.  # noqa: E501
        :type: str
        """

        self._log_format = log_format

    @property
    def log_format_sd(self):
        """Gets the log_format_sd of this Defaults.  # noqa: E501


        :return: The log_format_sd of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._log_format_sd

    @log_format_sd.setter
    def log_format_sd(self, log_format_sd):
        """Sets the log_format_sd of this Defaults.


        :param log_format_sd: The log_format_sd of this Defaults.  # noqa: E501
        :type: str
        """

        self._log_format_sd = log_format_sd

    @property
    def log_health_checks(self):
        """Gets the log_health_checks of this Defaults.  # noqa: E501


        :return: The log_health_checks of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._log_health_checks

    @log_health_checks.setter
    def log_health_checks(self, log_health_checks):
        """Sets the log_health_checks of this Defaults.


        :param log_health_checks: The log_health_checks of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if log_health_checks not in allowed_values:
            raise ValueError(
                "Invalid value for `log_health_checks` ({0}), must be one of {1}"  # noqa: E501
                .format(log_health_checks, allowed_values)
            )

        self._log_health_checks = log_health_checks

    @property
    def log_separate_errors(self):
        """Gets the log_separate_errors of this Defaults.  # noqa: E501


        :return: The log_separate_errors of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._log_separate_errors

    @log_separate_errors.setter
    def log_separate_errors(self, log_separate_errors):
        """Sets the log_separate_errors of this Defaults.


        :param log_separate_errors: The log_separate_errors of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if log_separate_errors not in allowed_values:
            raise ValueError(
                "Invalid value for `log_separate_errors` ({0}), must be one of {1}"  # noqa: E501
                .format(log_separate_errors, allowed_values)
            )

        self._log_separate_errors = log_separate_errors

    @property
    def log_tag(self):
        """Gets the log_tag of this Defaults.  # noqa: E501


        :return: The log_tag of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._log_tag

    @log_tag.setter
    def log_tag(self, log_tag):
        """Sets the log_tag of this Defaults.


        :param log_tag: The log_tag of this Defaults.  # noqa: E501
        :type: str
        """

        self._log_tag = log_tag

    @property
    def logasap(self):
        """Gets the logasap of this Defaults.  # noqa: E501


        :return: The logasap of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._logasap

    @logasap.setter
    def logasap(self, logasap):
        """Sets the logasap of this Defaults.


        :param logasap: The logasap of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if logasap not in allowed_values:
            raise ValueError(
                "Invalid value for `logasap` ({0}), must be one of {1}"  # noqa: E501
                .format(logasap, allowed_values)
            )

        self._logasap = logasap

    @property
    def max_keep_alive_queue(self):
        """Gets the max_keep_alive_queue of this Defaults.  # noqa: E501


        :return: The max_keep_alive_queue of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._max_keep_alive_queue

    @max_keep_alive_queue.setter
    def max_keep_alive_queue(self, max_keep_alive_queue):
        """Sets the max_keep_alive_queue of this Defaults.


        :param max_keep_alive_queue: The max_keep_alive_queue of this Defaults.  # noqa: E501
        :type: int
        """

        self._max_keep_alive_queue = max_keep_alive_queue

    @property
    def maxconn(self):
        """Gets the maxconn of this Defaults.  # noqa: E501


        :return: The maxconn of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._maxconn

    @maxconn.setter
    def maxconn(self, maxconn):
        """Sets the maxconn of this Defaults.


        :param maxconn: The maxconn of this Defaults.  # noqa: E501
        :type: int
        """

        self._maxconn = maxconn

    @property
    def mode(self):
        """Gets the mode of this Defaults.  # noqa: E501


        :return: The mode of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Defaults.


        :param mode: The mode of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["tcp", "http"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def monitor_uri(self):
        """Gets the monitor_uri of this Defaults.  # noqa: E501


        :return: The monitor_uri of this Defaults.  # noqa: E501
        :rtype: MonitorUri
        """
        return self._monitor_uri

    @monitor_uri.setter
    def monitor_uri(self, monitor_uri):
        """Sets the monitor_uri of this Defaults.


        :param monitor_uri: The monitor_uri of this Defaults.  # noqa: E501
        :type: MonitorUri
        """

        self._monitor_uri = monitor_uri

    @property
    def mysql_check_params(self):
        """Gets the mysql_check_params of this Defaults.  # noqa: E501


        :return: The mysql_check_params of this Defaults.  # noqa: E501
        :rtype: MysqlCheckParams
        """
        return self._mysql_check_params

    @mysql_check_params.setter
    def mysql_check_params(self, mysql_check_params):
        """Sets the mysql_check_params of this Defaults.


        :param mysql_check_params: The mysql_check_params of this Defaults.  # noqa: E501
        :type: MysqlCheckParams
        """

        self._mysql_check_params = mysql_check_params

    @property
    def name(self):
        """Gets the name of this Defaults.  # noqa: E501


        :return: The name of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Defaults.


        :param name: The name of this Defaults.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nolinger(self):
        """Gets the nolinger of this Defaults.  # noqa: E501


        :return: The nolinger of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._nolinger

    @nolinger.setter
    def nolinger(self, nolinger):
        """Sets the nolinger of this Defaults.


        :param nolinger: The nolinger of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if nolinger not in allowed_values:
            raise ValueError(
                "Invalid value for `nolinger` ({0}), must be one of {1}"  # noqa: E501
                .format(nolinger, allowed_values)
            )

        self._nolinger = nolinger

    @property
    def originalto(self):
        """Gets the originalto of this Defaults.  # noqa: E501


        :return: The originalto of this Defaults.  # noqa: E501
        :rtype: Originalto
        """
        return self._originalto

    @originalto.setter
    def originalto(self, originalto):
        """Sets the originalto of this Defaults.


        :param originalto: The originalto of this Defaults.  # noqa: E501
        :type: Originalto
        """

        self._originalto = originalto

    @property
    def persist(self):
        """Gets the persist of this Defaults.  # noqa: E501


        :return: The persist of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._persist

    @persist.setter
    def persist(self, persist):
        """Sets the persist of this Defaults.


        :param persist: The persist of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if persist not in allowed_values:
            raise ValueError(
                "Invalid value for `persist` ({0}), must be one of {1}"  # noqa: E501
                .format(persist, allowed_values)
            )

        self._persist = persist

    @property
    def persist_rule(self):
        """Gets the persist_rule of this Defaults.  # noqa: E501


        :return: The persist_rule of this Defaults.  # noqa: E501
        :rtype: PersistRule
        """
        return self._persist_rule

    @persist_rule.setter
    def persist_rule(self, persist_rule):
        """Sets the persist_rule of this Defaults.


        :param persist_rule: The persist_rule of this Defaults.  # noqa: E501
        :type: PersistRule
        """

        self._persist_rule = persist_rule

    @property
    def pgsql_check_params(self):
        """Gets the pgsql_check_params of this Defaults.  # noqa: E501


        :return: The pgsql_check_params of this Defaults.  # noqa: E501
        :rtype: PgsqlCheckParams
        """
        return self._pgsql_check_params

    @pgsql_check_params.setter
    def pgsql_check_params(self, pgsql_check_params):
        """Sets the pgsql_check_params of this Defaults.


        :param pgsql_check_params: The pgsql_check_params of this Defaults.  # noqa: E501
        :type: PgsqlCheckParams
        """

        self._pgsql_check_params = pgsql_check_params

    @property
    def prefer_last_server(self):
        """Gets the prefer_last_server of this Defaults.  # noqa: E501


        :return: The prefer_last_server of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._prefer_last_server

    @prefer_last_server.setter
    def prefer_last_server(self, prefer_last_server):
        """Sets the prefer_last_server of this Defaults.


        :param prefer_last_server: The prefer_last_server of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if prefer_last_server not in allowed_values:
            raise ValueError(
                "Invalid value for `prefer_last_server` ({0}), must be one of {1}"  # noqa: E501
                .format(prefer_last_server, allowed_values)
            )

        self._prefer_last_server = prefer_last_server

    @property
    def queue_timeout(self):
        """Gets the queue_timeout of this Defaults.  # noqa: E501


        :return: The queue_timeout of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._queue_timeout

    @queue_timeout.setter
    def queue_timeout(self, queue_timeout):
        """Sets the queue_timeout of this Defaults.


        :param queue_timeout: The queue_timeout of this Defaults.  # noqa: E501
        :type: int
        """

        self._queue_timeout = queue_timeout

    @property
    def redispatch(self):
        """Gets the redispatch of this Defaults.  # noqa: E501


        :return: The redispatch of this Defaults.  # noqa: E501
        :rtype: Redispatch
        """
        return self._redispatch

    @redispatch.setter
    def redispatch(self, redispatch):
        """Sets the redispatch of this Defaults.


        :param redispatch: The redispatch of this Defaults.  # noqa: E501
        :type: Redispatch
        """

        self._redispatch = redispatch

    @property
    def retries(self):
        """Gets the retries of this Defaults.  # noqa: E501


        :return: The retries of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this Defaults.


        :param retries: The retries of this Defaults.  # noqa: E501
        :type: int
        """

        self._retries = retries

    @property
    def retry_on(self):
        """Gets the retry_on of this Defaults.  # noqa: E501


        :return: The retry_on of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._retry_on

    @retry_on.setter
    def retry_on(self, retry_on):
        """Sets the retry_on of this Defaults.


        :param retry_on: The retry_on of this Defaults.  # noqa: E501
        :type: str
        """

        self._retry_on = retry_on

    @property
    def server_fin_timeout(self):
        """Gets the server_fin_timeout of this Defaults.  # noqa: E501


        :return: The server_fin_timeout of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._server_fin_timeout

    @server_fin_timeout.setter
    def server_fin_timeout(self, server_fin_timeout):
        """Sets the server_fin_timeout of this Defaults.


        :param server_fin_timeout: The server_fin_timeout of this Defaults.  # noqa: E501
        :type: int
        """

        self._server_fin_timeout = server_fin_timeout

    @property
    def server_timeout(self):
        """Gets the server_timeout of this Defaults.  # noqa: E501


        :return: The server_timeout of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._server_timeout

    @server_timeout.setter
    def server_timeout(self, server_timeout):
        """Sets the server_timeout of this Defaults.


        :param server_timeout: The server_timeout of this Defaults.  # noqa: E501
        :type: int
        """

        self._server_timeout = server_timeout

    @property
    def smtpchk_params(self):
        """Gets the smtpchk_params of this Defaults.  # noqa: E501


        :return: The smtpchk_params of this Defaults.  # noqa: E501
        :rtype: SmtpchkParams
        """
        return self._smtpchk_params

    @smtpchk_params.setter
    def smtpchk_params(self, smtpchk_params):
        """Sets the smtpchk_params of this Defaults.


        :param smtpchk_params: The smtpchk_params of this Defaults.  # noqa: E501
        :type: SmtpchkParams
        """

        self._smtpchk_params = smtpchk_params

    @property
    def socket_stats(self):
        """Gets the socket_stats of this Defaults.  # noqa: E501


        :return: The socket_stats of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._socket_stats

    @socket_stats.setter
    def socket_stats(self, socket_stats):
        """Sets the socket_stats of this Defaults.


        :param socket_stats: The socket_stats of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if socket_stats not in allowed_values:
            raise ValueError(
                "Invalid value for `socket_stats` ({0}), must be one of {1}"  # noqa: E501
                .format(socket_stats, allowed_values)
            )

        self._socket_stats = socket_stats

    @property
    def source(self):
        """Gets the source of this Defaults.  # noqa: E501


        :return: The source of this Defaults.  # noqa: E501
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Defaults.


        :param source: The source of this Defaults.  # noqa: E501
        :type: Source
        """

        self._source = source

    @property
    def splice_auto(self):
        """Gets the splice_auto of this Defaults.  # noqa: E501


        :return: The splice_auto of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._splice_auto

    @splice_auto.setter
    def splice_auto(self, splice_auto):
        """Sets the splice_auto of this Defaults.


        :param splice_auto: The splice_auto of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if splice_auto not in allowed_values:
            raise ValueError(
                "Invalid value for `splice_auto` ({0}), must be one of {1}"  # noqa: E501
                .format(splice_auto, allowed_values)
            )

        self._splice_auto = splice_auto

    @property
    def splice_request(self):
        """Gets the splice_request of this Defaults.  # noqa: E501


        :return: The splice_request of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._splice_request

    @splice_request.setter
    def splice_request(self, splice_request):
        """Sets the splice_request of this Defaults.


        :param splice_request: The splice_request of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if splice_request not in allowed_values:
            raise ValueError(
                "Invalid value for `splice_request` ({0}), must be one of {1}"  # noqa: E501
                .format(splice_request, allowed_values)
            )

        self._splice_request = splice_request

    @property
    def splice_response(self):
        """Gets the splice_response of this Defaults.  # noqa: E501


        :return: The splice_response of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._splice_response

    @splice_response.setter
    def splice_response(self, splice_response):
        """Sets the splice_response of this Defaults.


        :param splice_response: The splice_response of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if splice_response not in allowed_values:
            raise ValueError(
                "Invalid value for `splice_response` ({0}), must be one of {1}"  # noqa: E501
                .format(splice_response, allowed_values)
            )

        self._splice_response = splice_response

    @property
    def srvtcpka(self):
        """Gets the srvtcpka of this Defaults.  # noqa: E501


        :return: The srvtcpka of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._srvtcpka

    @srvtcpka.setter
    def srvtcpka(self, srvtcpka):
        """Sets the srvtcpka of this Defaults.


        :param srvtcpka: The srvtcpka of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if srvtcpka not in allowed_values:
            raise ValueError(
                "Invalid value for `srvtcpka` ({0}), must be one of {1}"  # noqa: E501
                .format(srvtcpka, allowed_values)
            )

        self._srvtcpka = srvtcpka

    @property
    def srvtcpka_cnt(self):
        """Gets the srvtcpka_cnt of this Defaults.  # noqa: E501


        :return: The srvtcpka_cnt of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._srvtcpka_cnt

    @srvtcpka_cnt.setter
    def srvtcpka_cnt(self, srvtcpka_cnt):
        """Sets the srvtcpka_cnt of this Defaults.


        :param srvtcpka_cnt: The srvtcpka_cnt of this Defaults.  # noqa: E501
        :type: int
        """

        self._srvtcpka_cnt = srvtcpka_cnt

    @property
    def srvtcpka_idle(self):
        """Gets the srvtcpka_idle of this Defaults.  # noqa: E501


        :return: The srvtcpka_idle of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._srvtcpka_idle

    @srvtcpka_idle.setter
    def srvtcpka_idle(self, srvtcpka_idle):
        """Sets the srvtcpka_idle of this Defaults.


        :param srvtcpka_idle: The srvtcpka_idle of this Defaults.  # noqa: E501
        :type: int
        """

        self._srvtcpka_idle = srvtcpka_idle

    @property
    def srvtcpka_intvl(self):
        """Gets the srvtcpka_intvl of this Defaults.  # noqa: E501


        :return: The srvtcpka_intvl of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._srvtcpka_intvl

    @srvtcpka_intvl.setter
    def srvtcpka_intvl(self, srvtcpka_intvl):
        """Sets the srvtcpka_intvl of this Defaults.


        :param srvtcpka_intvl: The srvtcpka_intvl of this Defaults.  # noqa: E501
        :type: int
        """

        self._srvtcpka_intvl = srvtcpka_intvl

    @property
    def stats_options(self):
        """Gets the stats_options of this Defaults.  # noqa: E501


        :return: The stats_options of this Defaults.  # noqa: E501
        :rtype: StatsOptions
        """
        return self._stats_options

    @stats_options.setter
    def stats_options(self, stats_options):
        """Sets the stats_options of this Defaults.


        :param stats_options: The stats_options of this Defaults.  # noqa: E501
        :type: StatsOptions
        """

        self._stats_options = stats_options

    @property
    def tarpit_timeout(self):
        """Gets the tarpit_timeout of this Defaults.  # noqa: E501


        :return: The tarpit_timeout of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._tarpit_timeout

    @tarpit_timeout.setter
    def tarpit_timeout(self, tarpit_timeout):
        """Sets the tarpit_timeout of this Defaults.


        :param tarpit_timeout: The tarpit_timeout of this Defaults.  # noqa: E501
        :type: int
        """

        self._tarpit_timeout = tarpit_timeout

    @property
    def tcp_smart_accept(self):
        """Gets the tcp_smart_accept of this Defaults.  # noqa: E501


        :return: The tcp_smart_accept of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._tcp_smart_accept

    @tcp_smart_accept.setter
    def tcp_smart_accept(self, tcp_smart_accept):
        """Sets the tcp_smart_accept of this Defaults.


        :param tcp_smart_accept: The tcp_smart_accept of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if tcp_smart_accept not in allowed_values:
            raise ValueError(
                "Invalid value for `tcp_smart_accept` ({0}), must be one of {1}"  # noqa: E501
                .format(tcp_smart_accept, allowed_values)
            )

        self._tcp_smart_accept = tcp_smart_accept

    @property
    def tcp_smart_connect(self):
        """Gets the tcp_smart_connect of this Defaults.  # noqa: E501


        :return: The tcp_smart_connect of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._tcp_smart_connect

    @tcp_smart_connect.setter
    def tcp_smart_connect(self, tcp_smart_connect):
        """Sets the tcp_smart_connect of this Defaults.


        :param tcp_smart_connect: The tcp_smart_connect of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if tcp_smart_connect not in allowed_values:
            raise ValueError(
                "Invalid value for `tcp_smart_connect` ({0}), must be one of {1}"  # noqa: E501
                .format(tcp_smart_connect, allowed_values)
            )

        self._tcp_smart_connect = tcp_smart_connect

    @property
    def tcpka(self):
        """Gets the tcpka of this Defaults.  # noqa: E501


        :return: The tcpka of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._tcpka

    @tcpka.setter
    def tcpka(self, tcpka):
        """Sets the tcpka of this Defaults.


        :param tcpka: The tcpka of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if tcpka not in allowed_values:
            raise ValueError(
                "Invalid value for `tcpka` ({0}), must be one of {1}"  # noqa: E501
                .format(tcpka, allowed_values)
            )

        self._tcpka = tcpka

    @property
    def tcplog(self):
        """Gets the tcplog of this Defaults.  # noqa: E501


        :return: The tcplog of this Defaults.  # noqa: E501
        :rtype: bool
        """
        return self._tcplog

    @tcplog.setter
    def tcplog(self, tcplog):
        """Sets the tcplog of this Defaults.


        :param tcplog: The tcplog of this Defaults.  # noqa: E501
        :type: bool
        """

        self._tcplog = tcplog

    @property
    def transparent(self):
        """Gets the transparent of this Defaults.  # noqa: E501


        :return: The transparent of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._transparent

    @transparent.setter
    def transparent(self, transparent):
        """Sets the transparent of this Defaults.


        :param transparent: The transparent of this Defaults.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if transparent not in allowed_values:
            raise ValueError(
                "Invalid value for `transparent` ({0}), must be one of {1}"  # noqa: E501
                .format(transparent, allowed_values)
            )

        self._transparent = transparent

    @property
    def tunnel_timeout(self):
        """Gets the tunnel_timeout of this Defaults.  # noqa: E501


        :return: The tunnel_timeout of this Defaults.  # noqa: E501
        :rtype: int
        """
        return self._tunnel_timeout

    @tunnel_timeout.setter
    def tunnel_timeout(self, tunnel_timeout):
        """Sets the tunnel_timeout of this Defaults.


        :param tunnel_timeout: The tunnel_timeout of this Defaults.  # noqa: E501
        :type: int
        """

        self._tunnel_timeout = tunnel_timeout

    @property
    def unique_id_format(self):
        """Gets the unique_id_format of this Defaults.  # noqa: E501


        :return: The unique_id_format of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._unique_id_format

    @unique_id_format.setter
    def unique_id_format(self, unique_id_format):
        """Sets the unique_id_format of this Defaults.


        :param unique_id_format: The unique_id_format of this Defaults.  # noqa: E501
        :type: str
        """

        self._unique_id_format = unique_id_format

    @property
    def unique_id_header(self):
        """Gets the unique_id_header of this Defaults.  # noqa: E501


        :return: The unique_id_header of this Defaults.  # noqa: E501
        :rtype: str
        """
        return self._unique_id_header

    @unique_id_header.setter
    def unique_id_header(self, unique_id_header):
        """Sets the unique_id_header of this Defaults.


        :param unique_id_header: The unique_id_header of this Defaults.  # noqa: E501
        :type: str
        """

        self._unique_id_header = unique_id_header

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Defaults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Defaults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
