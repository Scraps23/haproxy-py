# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PeerSection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_bind': 'DefaultBind',
        'default_server': 'DefaultServer',
        'disabled': 'bool',
        'enabled': 'bool',
        'name': 'str',
        'shards': 'int',
        'stick_table': 'ConfigStickTable'
    }

    attribute_map = {
        'default_bind': 'default_bind',
        'default_server': 'default_server',
        'disabled': 'disabled',
        'enabled': 'enabled',
        'name': 'name',
        'shards': 'shards',
        'stick_table': 'stick_table'
    }

    def __init__(self, default_bind=None, default_server=None, disabled=None, enabled=None, name=None, shards=None, stick_table=None):  # noqa: E501
        """PeerSection - a model defined in Swagger"""  # noqa: E501
        self._default_bind = None
        self._default_server = None
        self._disabled = None
        self._enabled = None
        self._name = None
        self._shards = None
        self._stick_table = None
        self.discriminator = None
        if default_bind is not None:
            self.default_bind = default_bind
        if default_server is not None:
            self.default_server = default_server
        if disabled is not None:
            self.disabled = disabled
        if enabled is not None:
            self.enabled = enabled
        self.name = name
        if shards is not None:
            self.shards = shards
        if stick_table is not None:
            self.stick_table = stick_table

    @property
    def default_bind(self):
        """Gets the default_bind of this PeerSection.  # noqa: E501


        :return: The default_bind of this PeerSection.  # noqa: E501
        :rtype: DefaultBind
        """
        return self._default_bind

    @default_bind.setter
    def default_bind(self, default_bind):
        """Sets the default_bind of this PeerSection.


        :param default_bind: The default_bind of this PeerSection.  # noqa: E501
        :type: DefaultBind
        """

        self._default_bind = default_bind

    @property
    def default_server(self):
        """Gets the default_server of this PeerSection.  # noqa: E501


        :return: The default_server of this PeerSection.  # noqa: E501
        :rtype: DefaultServer
        """
        return self._default_server

    @default_server.setter
    def default_server(self, default_server):
        """Sets the default_server of this PeerSection.


        :param default_server: The default_server of this PeerSection.  # noqa: E501
        :type: DefaultServer
        """

        self._default_server = default_server

    @property
    def disabled(self):
        """Gets the disabled of this PeerSection.  # noqa: E501


        :return: The disabled of this PeerSection.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this PeerSection.


        :param disabled: The disabled of this PeerSection.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def enabled(self):
        """Gets the enabled of this PeerSection.  # noqa: E501


        :return: The enabled of this PeerSection.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PeerSection.


        :param enabled: The enabled of this PeerSection.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this PeerSection.  # noqa: E501


        :return: The name of this PeerSection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PeerSection.


        :param name: The name of this PeerSection.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def shards(self):
        """Gets the shards of this PeerSection.  # noqa: E501

        In some configurations, one would like to distribute the stick-table contents to some peers in place of sending all the stick-table contents to each peer declared in the \"peers\" section. In such cases, \"shards\" specifies the number of peer involved in this stick-table contents distribution.  # noqa: E501

        :return: The shards of this PeerSection.  # noqa: E501
        :rtype: int
        """
        return self._shards

    @shards.setter
    def shards(self, shards):
        """Sets the shards of this PeerSection.

        In some configurations, one would like to distribute the stick-table contents to some peers in place of sending all the stick-table contents to each peer declared in the \"peers\" section. In such cases, \"shards\" specifies the number of peer involved in this stick-table contents distribution.  # noqa: E501

        :param shards: The shards of this PeerSection.  # noqa: E501
        :type: int
        """

        self._shards = shards

    @property
    def stick_table(self):
        """Gets the stick_table of this PeerSection.  # noqa: E501


        :return: The stick_table of this PeerSection.  # noqa: E501
        :rtype: ConfigStickTable
        """
        return self._stick_table

    @stick_table.setter
    def stick_table(self, stick_table):
        """Sets the stick_table of this PeerSection.


        :param stick_table: The stick_table of this PeerSection.  # noqa: E501
        :type: ConfigStickTable
        """

        self._stick_table = stick_table

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PeerSection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeerSection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
