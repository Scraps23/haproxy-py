# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Compression(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'algorithms': 'list[str]',
        'offload': 'bool',
        'types': 'list[str]'
    }

    attribute_map = {
        'algorithms': 'algorithms',
        'offload': 'offload',
        'types': 'types'
    }

    def __init__(self, algorithms=None, offload=None, types=None):  # noqa: E501
        """Compression - a model defined in Swagger"""  # noqa: E501
        self._algorithms = None
        self._offload = None
        self._types = None
        self.discriminator = None
        if algorithms is not None:
            self.algorithms = algorithms
        if offload is not None:
            self.offload = offload
        if types is not None:
            self.types = types

    @property
    def algorithms(self):
        """Gets the algorithms of this Compression.  # noqa: E501


        :return: The algorithms of this Compression.  # noqa: E501
        :rtype: list[str]
        """
        return self._algorithms

    @algorithms.setter
    def algorithms(self, algorithms):
        """Sets the algorithms of this Compression.


        :param algorithms: The algorithms of this Compression.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["identity", "gzip", "deflate", "raw-deflate"]  # noqa: E501
        if not set(algorithms).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `algorithms` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(algorithms) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._algorithms = algorithms

    @property
    def offload(self):
        """Gets the offload of this Compression.  # noqa: E501


        :return: The offload of this Compression.  # noqa: E501
        :rtype: bool
        """
        return self._offload

    @offload.setter
    def offload(self, offload):
        """Sets the offload of this Compression.


        :param offload: The offload of this Compression.  # noqa: E501
        :type: bool
        """

        self._offload = offload

    @property
    def types(self):
        """Gets the types of this Compression.  # noqa: E501


        :return: The types of this Compression.  # noqa: E501
        :rtype: list[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this Compression.


        :param types: The types of this Compression.  # noqa: E501
        :type: list[str]
        """

        self._types = types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Compression, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Compression):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
