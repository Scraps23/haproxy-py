# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelGlobal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'anonkey': 'int',
        'busy_polling': 'bool',
        'ca_base': 'str',
        'chroot': 'str',
        'cpu_maps': 'list[GlobalCpuMaps]',
        'crt_base': 'str',
        'daemon': 'str',
        'default_path': 'GlobalDefaultPath',
        'description': 'str',
        'device_atlas_options': 'GlobalDeviceAtlasOptions',
        'expose_experimental_directives': 'bool',
        'external_check': 'bool',
        'fifty_one_degrees_options': 'GlobalFiftyOneDegreesOptions',
        'gid': 'int',
        'grace': 'int',
        'group': 'str',
        'h1_case_adjust': 'list[GlobalH1CaseAdjust]',
        'h1_case_adjust_file': 'str',
        'h2_workaround_bogus_websocket_clients': 'bool',
        'hard_stop_after': 'int',
        'insecure_fork_wanted': 'bool',
        'insecure_setuid_wanted': 'bool',
        'issuers_chain_path': 'str',
        'load_server_state_from_file': 'str',
        'localpeer': 'str',
        'log_send_hostname': 'GlobalLogSendHostname',
        'lua_load_per_thread': 'str',
        'lua_loads': 'list[GlobalLuaLoads]',
        'lua_prepend_path': 'list[GlobalLuaPrependPath]',
        'master_worker': 'bool',
        'max_spread_checks': 'int',
        'maxcompcpuusage': 'int',
        'maxcomprate': 'int',
        'maxconn': 'int',
        'maxconnrate': 'int',
        'maxpipes': 'int',
        'maxsessrate': 'int',
        'maxsslconn': 'int',
        'maxsslrate': 'int',
        'maxzlibmem': 'int',
        'mworker_max_reloads': 'int',
        'nbproc': 'int',
        'nbthread': 'int',
        'node': 'str',
        'noepoll': 'bool',
        'noevports': 'bool',
        'nogetaddrinfo': 'bool',
        'nokqueue': 'bool',
        'nopoll': 'bool',
        'noreuseport': 'bool',
        'nosplice': 'bool',
        'numa_cpu_mapping': 'str',
        'pidfile': 'str',
        'pp2_never_send_local': 'bool',
        'presetenv': 'list[GlobalPresetenv]',
        'profiling_tasks': 'str',
        'quiet': 'bool',
        'resetenv': 'str',
        'runtime_apis': 'list[GlobalRuntimeApis]',
        'server_state_base': 'str',
        'server_state_file': 'str',
        'set_dumpable': 'bool',
        'set_var': 'list[GlobalSetVar]',
        'set_var_fmt': 'list[GlobalSetVarFmt]',
        'setenv': 'list[GlobalPresetenv]',
        'spread_checks': 'int',
        'ssl_default_bind_ciphers': 'str',
        'ssl_default_bind_ciphersuites': 'str',
        'ssl_default_bind_curves': 'str',
        'ssl_default_bind_options': 'str',
        'ssl_default_server_ciphers': 'str',
        'ssl_default_server_ciphersuites': 'str',
        'ssl_default_server_options': 'str',
        'ssl_dh_param_file': 'str',
        'ssl_engines': 'list[GlobalSslEngines]',
        'ssl_load_extra_files': 'str',
        'ssl_mode_async': 'str',
        'ssl_server_verify': 'str',
        'ssl_skip_self_issued_ca': 'bool',
        'stats_maxconn': 'int',
        'stats_timeout': 'int',
        'strict_limits': 'bool',
        'thread_group_lines': 'list[GlobalThreadGroupLines]',
        'thread_groups': 'int',
        'tune_options': 'GlobalTuneOptions',
        'tune_ssl_default_dh_param': 'int',
        'uid': 'int',
        'ulimit_n': 'int',
        'unsetenv': 'str',
        'user': 'str',
        'wurfl_options': 'GlobalWurflOptions',
        'zero_warning': 'bool'
    }

    attribute_map = {
        'anonkey': 'anonkey',
        'busy_polling': 'busy_polling',
        'ca_base': 'ca_base',
        'chroot': 'chroot',
        'cpu_maps': 'cpu_maps',
        'crt_base': 'crt_base',
        'daemon': 'daemon',
        'default_path': 'default_path',
        'description': 'description',
        'device_atlas_options': 'device_atlas_options',
        'expose_experimental_directives': 'expose_experimental_directives',
        'external_check': 'external_check',
        'fifty_one_degrees_options': 'fifty_one_degrees_options',
        'gid': 'gid',
        'grace': 'grace',
        'group': 'group',
        'h1_case_adjust': 'h1_case_adjust',
        'h1_case_adjust_file': 'h1_case_adjust_file',
        'h2_workaround_bogus_websocket_clients': 'h2_workaround_bogus_websocket_clients',
        'hard_stop_after': 'hard_stop_after',
        'insecure_fork_wanted': 'insecure_fork_wanted',
        'insecure_setuid_wanted': 'insecure_setuid_wanted',
        'issuers_chain_path': 'issuers_chain_path',
        'load_server_state_from_file': 'load_server_state_from_file',
        'localpeer': 'localpeer',
        'log_send_hostname': 'log_send_hostname',
        'lua_load_per_thread': 'lua_load_per_thread',
        'lua_loads': 'lua_loads',
        'lua_prepend_path': 'lua_prepend_path',
        'master_worker': 'master-worker',
        'max_spread_checks': 'max_spread_checks',
        'maxcompcpuusage': 'maxcompcpuusage',
        'maxcomprate': 'maxcomprate',
        'maxconn': 'maxconn',
        'maxconnrate': 'maxconnrate',
        'maxpipes': 'maxpipes',
        'maxsessrate': 'maxsessrate',
        'maxsslconn': 'maxsslconn',
        'maxsslrate': 'maxsslrate',
        'maxzlibmem': 'maxzlibmem',
        'mworker_max_reloads': 'mworker_max_reloads',
        'nbproc': 'nbproc',
        'nbthread': 'nbthread',
        'node': 'node',
        'noepoll': 'noepoll',
        'noevports': 'noevports',
        'nogetaddrinfo': 'nogetaddrinfo',
        'nokqueue': 'nokqueue',
        'nopoll': 'nopoll',
        'noreuseport': 'noreuseport',
        'nosplice': 'nosplice',
        'numa_cpu_mapping': 'numa_cpu_mapping',
        'pidfile': 'pidfile',
        'pp2_never_send_local': 'pp2_never_send_local',
        'presetenv': 'presetenv',
        'profiling_tasks': 'profiling_tasks',
        'quiet': 'quiet',
        'resetenv': 'resetenv',
        'runtime_apis': 'runtime_apis',
        'server_state_base': 'server_state_base',
        'server_state_file': 'server_state_file',
        'set_dumpable': 'set_dumpable',
        'set_var': 'set_var',
        'set_var_fmt': 'set_var_fmt',
        'setenv': 'setenv',
        'spread_checks': 'spread_checks',
        'ssl_default_bind_ciphers': 'ssl_default_bind_ciphers',
        'ssl_default_bind_ciphersuites': 'ssl_default_bind_ciphersuites',
        'ssl_default_bind_curves': 'ssl_default_bind_curves',
        'ssl_default_bind_options': 'ssl_default_bind_options',
        'ssl_default_server_ciphers': 'ssl_default_server_ciphers',
        'ssl_default_server_ciphersuites': 'ssl_default_server_ciphersuites',
        'ssl_default_server_options': 'ssl_default_server_options',
        'ssl_dh_param_file': 'ssl_dh_param_file',
        'ssl_engines': 'ssl_engines',
        'ssl_load_extra_files': 'ssl_load_extra_files',
        'ssl_mode_async': 'ssl_mode_async',
        'ssl_server_verify': 'ssl_server_verify',
        'ssl_skip_self_issued_ca': 'ssl_skip_self_issued_ca',
        'stats_maxconn': 'stats_maxconn',
        'stats_timeout': 'stats_timeout',
        'strict_limits': 'strict_limits',
        'thread_group_lines': 'thread_group_lines',
        'thread_groups': 'thread_groups',
        'tune_options': 'tune_options',
        'tune_ssl_default_dh_param': 'tune_ssl_default_dh_param',
        'uid': 'uid',
        'ulimit_n': 'ulimit_n',
        'unsetenv': 'unsetenv',
        'user': 'user',
        'wurfl_options': 'wurfl_options',
        'zero_warning': 'zero_warning'
    }

    def __init__(self, anonkey=None, busy_polling=None, ca_base=None, chroot=None, cpu_maps=None, crt_base=None, daemon=None, default_path=None, description=None, device_atlas_options=None, expose_experimental_directives=None, external_check=None, fifty_one_degrees_options=None, gid=None, grace=None, group=None, h1_case_adjust=None, h1_case_adjust_file=None, h2_workaround_bogus_websocket_clients=None, hard_stop_after=None, insecure_fork_wanted=None, insecure_setuid_wanted=None, issuers_chain_path=None, load_server_state_from_file=None, localpeer=None, log_send_hostname=None, lua_load_per_thread=None, lua_loads=None, lua_prepend_path=None, master_worker=None, max_spread_checks=None, maxcompcpuusage=None, maxcomprate=None, maxconn=None, maxconnrate=None, maxpipes=None, maxsessrate=None, maxsslconn=None, maxsslrate=None, maxzlibmem=None, mworker_max_reloads=None, nbproc=None, nbthread=None, node=None, noepoll=None, noevports=None, nogetaddrinfo=None, nokqueue=None, nopoll=None, noreuseport=None, nosplice=None, numa_cpu_mapping=None, pidfile=None, pp2_never_send_local=None, presetenv=None, profiling_tasks=None, quiet=None, resetenv=None, runtime_apis=None, server_state_base=None, server_state_file=None, set_dumpable=None, set_var=None, set_var_fmt=None, setenv=None, spread_checks=None, ssl_default_bind_ciphers=None, ssl_default_bind_ciphersuites=None, ssl_default_bind_curves=None, ssl_default_bind_options=None, ssl_default_server_ciphers=None, ssl_default_server_ciphersuites=None, ssl_default_server_options=None, ssl_dh_param_file=None, ssl_engines=None, ssl_load_extra_files=None, ssl_mode_async=None, ssl_server_verify=None, ssl_skip_self_issued_ca=None, stats_maxconn=None, stats_timeout=None, strict_limits=None, thread_group_lines=None, thread_groups=None, tune_options=None, tune_ssl_default_dh_param=None, uid=None, ulimit_n=None, unsetenv=None, user=None, wurfl_options=None, zero_warning=None):  # noqa: E501
        """ModelGlobal - a model defined in Swagger"""  # noqa: E501
        self._anonkey = None
        self._busy_polling = None
        self._ca_base = None
        self._chroot = None
        self._cpu_maps = None
        self._crt_base = None
        self._daemon = None
        self._default_path = None
        self._description = None
        self._device_atlas_options = None
        self._expose_experimental_directives = None
        self._external_check = None
        self._fifty_one_degrees_options = None
        self._gid = None
        self._grace = None
        self._group = None
        self._h1_case_adjust = None
        self._h1_case_adjust_file = None
        self._h2_workaround_bogus_websocket_clients = None
        self._hard_stop_after = None
        self._insecure_fork_wanted = None
        self._insecure_setuid_wanted = None
        self._issuers_chain_path = None
        self._load_server_state_from_file = None
        self._localpeer = None
        self._log_send_hostname = None
        self._lua_load_per_thread = None
        self._lua_loads = None
        self._lua_prepend_path = None
        self._master_worker = None
        self._max_spread_checks = None
        self._maxcompcpuusage = None
        self._maxcomprate = None
        self._maxconn = None
        self._maxconnrate = None
        self._maxpipes = None
        self._maxsessrate = None
        self._maxsslconn = None
        self._maxsslrate = None
        self._maxzlibmem = None
        self._mworker_max_reloads = None
        self._nbproc = None
        self._nbthread = None
        self._node = None
        self._noepoll = None
        self._noevports = None
        self._nogetaddrinfo = None
        self._nokqueue = None
        self._nopoll = None
        self._noreuseport = None
        self._nosplice = None
        self._numa_cpu_mapping = None
        self._pidfile = None
        self._pp2_never_send_local = None
        self._presetenv = None
        self._profiling_tasks = None
        self._quiet = None
        self._resetenv = None
        self._runtime_apis = None
        self._server_state_base = None
        self._server_state_file = None
        self._set_dumpable = None
        self._set_var = None
        self._set_var_fmt = None
        self._setenv = None
        self._spread_checks = None
        self._ssl_default_bind_ciphers = None
        self._ssl_default_bind_ciphersuites = None
        self._ssl_default_bind_curves = None
        self._ssl_default_bind_options = None
        self._ssl_default_server_ciphers = None
        self._ssl_default_server_ciphersuites = None
        self._ssl_default_server_options = None
        self._ssl_dh_param_file = None
        self._ssl_engines = None
        self._ssl_load_extra_files = None
        self._ssl_mode_async = None
        self._ssl_server_verify = None
        self._ssl_skip_self_issued_ca = None
        self._stats_maxconn = None
        self._stats_timeout = None
        self._strict_limits = None
        self._thread_group_lines = None
        self._thread_groups = None
        self._tune_options = None
        self._tune_ssl_default_dh_param = None
        self._uid = None
        self._ulimit_n = None
        self._unsetenv = None
        self._user = None
        self._wurfl_options = None
        self._zero_warning = None
        self.discriminator = None
        if anonkey is not None:
            self.anonkey = anonkey
        if busy_polling is not None:
            self.busy_polling = busy_polling
        if ca_base is not None:
            self.ca_base = ca_base
        if chroot is not None:
            self.chroot = chroot
        if cpu_maps is not None:
            self.cpu_maps = cpu_maps
        if crt_base is not None:
            self.crt_base = crt_base
        if daemon is not None:
            self.daemon = daemon
        if default_path is not None:
            self.default_path = default_path
        if description is not None:
            self.description = description
        if device_atlas_options is not None:
            self.device_atlas_options = device_atlas_options
        if expose_experimental_directives is not None:
            self.expose_experimental_directives = expose_experimental_directives
        if external_check is not None:
            self.external_check = external_check
        if fifty_one_degrees_options is not None:
            self.fifty_one_degrees_options = fifty_one_degrees_options
        if gid is not None:
            self.gid = gid
        if grace is not None:
            self.grace = grace
        if group is not None:
            self.group = group
        if h1_case_adjust is not None:
            self.h1_case_adjust = h1_case_adjust
        if h1_case_adjust_file is not None:
            self.h1_case_adjust_file = h1_case_adjust_file
        if h2_workaround_bogus_websocket_clients is not None:
            self.h2_workaround_bogus_websocket_clients = h2_workaround_bogus_websocket_clients
        if hard_stop_after is not None:
            self.hard_stop_after = hard_stop_after
        if insecure_fork_wanted is not None:
            self.insecure_fork_wanted = insecure_fork_wanted
        if insecure_setuid_wanted is not None:
            self.insecure_setuid_wanted = insecure_setuid_wanted
        if issuers_chain_path is not None:
            self.issuers_chain_path = issuers_chain_path
        if load_server_state_from_file is not None:
            self.load_server_state_from_file = load_server_state_from_file
        if localpeer is not None:
            self.localpeer = localpeer
        if log_send_hostname is not None:
            self.log_send_hostname = log_send_hostname
        if lua_load_per_thread is not None:
            self.lua_load_per_thread = lua_load_per_thread
        if lua_loads is not None:
            self.lua_loads = lua_loads
        if lua_prepend_path is not None:
            self.lua_prepend_path = lua_prepend_path
        if master_worker is not None:
            self.master_worker = master_worker
        if max_spread_checks is not None:
            self.max_spread_checks = max_spread_checks
        if maxcompcpuusage is not None:
            self.maxcompcpuusage = maxcompcpuusage
        if maxcomprate is not None:
            self.maxcomprate = maxcomprate
        if maxconn is not None:
            self.maxconn = maxconn
        if maxconnrate is not None:
            self.maxconnrate = maxconnrate
        if maxpipes is not None:
            self.maxpipes = maxpipes
        if maxsessrate is not None:
            self.maxsessrate = maxsessrate
        if maxsslconn is not None:
            self.maxsslconn = maxsslconn
        if maxsslrate is not None:
            self.maxsslrate = maxsslrate
        if maxzlibmem is not None:
            self.maxzlibmem = maxzlibmem
        if mworker_max_reloads is not None:
            self.mworker_max_reloads = mworker_max_reloads
        if nbproc is not None:
            self.nbproc = nbproc
        if nbthread is not None:
            self.nbthread = nbthread
        if node is not None:
            self.node = node
        if noepoll is not None:
            self.noepoll = noepoll
        if noevports is not None:
            self.noevports = noevports
        if nogetaddrinfo is not None:
            self.nogetaddrinfo = nogetaddrinfo
        if nokqueue is not None:
            self.nokqueue = nokqueue
        if nopoll is not None:
            self.nopoll = nopoll
        if noreuseport is not None:
            self.noreuseport = noreuseport
        if nosplice is not None:
            self.nosplice = nosplice
        if numa_cpu_mapping is not None:
            self.numa_cpu_mapping = numa_cpu_mapping
        if pidfile is not None:
            self.pidfile = pidfile
        if pp2_never_send_local is not None:
            self.pp2_never_send_local = pp2_never_send_local
        if presetenv is not None:
            self.presetenv = presetenv
        if profiling_tasks is not None:
            self.profiling_tasks = profiling_tasks
        if quiet is not None:
            self.quiet = quiet
        if resetenv is not None:
            self.resetenv = resetenv
        if runtime_apis is not None:
            self.runtime_apis = runtime_apis
        if server_state_base is not None:
            self.server_state_base = server_state_base
        if server_state_file is not None:
            self.server_state_file = server_state_file
        if set_dumpable is not None:
            self.set_dumpable = set_dumpable
        if set_var is not None:
            self.set_var = set_var
        if set_var_fmt is not None:
            self.set_var_fmt = set_var_fmt
        if setenv is not None:
            self.setenv = setenv
        if spread_checks is not None:
            self.spread_checks = spread_checks
        if ssl_default_bind_ciphers is not None:
            self.ssl_default_bind_ciphers = ssl_default_bind_ciphers
        if ssl_default_bind_ciphersuites is not None:
            self.ssl_default_bind_ciphersuites = ssl_default_bind_ciphersuites
        if ssl_default_bind_curves is not None:
            self.ssl_default_bind_curves = ssl_default_bind_curves
        if ssl_default_bind_options is not None:
            self.ssl_default_bind_options = ssl_default_bind_options
        if ssl_default_server_ciphers is not None:
            self.ssl_default_server_ciphers = ssl_default_server_ciphers
        if ssl_default_server_ciphersuites is not None:
            self.ssl_default_server_ciphersuites = ssl_default_server_ciphersuites
        if ssl_default_server_options is not None:
            self.ssl_default_server_options = ssl_default_server_options
        if ssl_dh_param_file is not None:
            self.ssl_dh_param_file = ssl_dh_param_file
        if ssl_engines is not None:
            self.ssl_engines = ssl_engines
        if ssl_load_extra_files is not None:
            self.ssl_load_extra_files = ssl_load_extra_files
        if ssl_mode_async is not None:
            self.ssl_mode_async = ssl_mode_async
        if ssl_server_verify is not None:
            self.ssl_server_verify = ssl_server_verify
        if ssl_skip_self_issued_ca is not None:
            self.ssl_skip_self_issued_ca = ssl_skip_self_issued_ca
        if stats_maxconn is not None:
            self.stats_maxconn = stats_maxconn
        if stats_timeout is not None:
            self.stats_timeout = stats_timeout
        if strict_limits is not None:
            self.strict_limits = strict_limits
        if thread_group_lines is not None:
            self.thread_group_lines = thread_group_lines
        if thread_groups is not None:
            self.thread_groups = thread_groups
        if tune_options is not None:
            self.tune_options = tune_options
        if tune_ssl_default_dh_param is not None:
            self.tune_ssl_default_dh_param = tune_ssl_default_dh_param
        if uid is not None:
            self.uid = uid
        if ulimit_n is not None:
            self.ulimit_n = ulimit_n
        if unsetenv is not None:
            self.unsetenv = unsetenv
        if user is not None:
            self.user = user
        if wurfl_options is not None:
            self.wurfl_options = wurfl_options
        if zero_warning is not None:
            self.zero_warning = zero_warning

    @property
    def anonkey(self):
        """Gets the anonkey of this ModelGlobal.  # noqa: E501


        :return: The anonkey of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._anonkey

    @anonkey.setter
    def anonkey(self, anonkey):
        """Sets the anonkey of this ModelGlobal.


        :param anonkey: The anonkey of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._anonkey = anonkey

    @property
    def busy_polling(self):
        """Gets the busy_polling of this ModelGlobal.  # noqa: E501


        :return: The busy_polling of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._busy_polling

    @busy_polling.setter
    def busy_polling(self, busy_polling):
        """Sets the busy_polling of this ModelGlobal.


        :param busy_polling: The busy_polling of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._busy_polling = busy_polling

    @property
    def ca_base(self):
        """Gets the ca_base of this ModelGlobal.  # noqa: E501


        :return: The ca_base of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._ca_base

    @ca_base.setter
    def ca_base(self, ca_base):
        """Sets the ca_base of this ModelGlobal.


        :param ca_base: The ca_base of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._ca_base = ca_base

    @property
    def chroot(self):
        """Gets the chroot of this ModelGlobal.  # noqa: E501


        :return: The chroot of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._chroot

    @chroot.setter
    def chroot(self, chroot):
        """Sets the chroot of this ModelGlobal.


        :param chroot: The chroot of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._chroot = chroot

    @property
    def cpu_maps(self):
        """Gets the cpu_maps of this ModelGlobal.  # noqa: E501


        :return: The cpu_maps of this ModelGlobal.  # noqa: E501
        :rtype: list[GlobalCpuMaps]
        """
        return self._cpu_maps

    @cpu_maps.setter
    def cpu_maps(self, cpu_maps):
        """Sets the cpu_maps of this ModelGlobal.


        :param cpu_maps: The cpu_maps of this ModelGlobal.  # noqa: E501
        :type: list[GlobalCpuMaps]
        """

        self._cpu_maps = cpu_maps

    @property
    def crt_base(self):
        """Gets the crt_base of this ModelGlobal.  # noqa: E501


        :return: The crt_base of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._crt_base

    @crt_base.setter
    def crt_base(self, crt_base):
        """Sets the crt_base of this ModelGlobal.


        :param crt_base: The crt_base of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._crt_base = crt_base

    @property
    def daemon(self):
        """Gets the daemon of this ModelGlobal.  # noqa: E501


        :return: The daemon of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._daemon

    @daemon.setter
    def daemon(self, daemon):
        """Sets the daemon of this ModelGlobal.


        :param daemon: The daemon of this ModelGlobal.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if daemon not in allowed_values:
            raise ValueError(
                "Invalid value for `daemon` ({0}), must be one of {1}"  # noqa: E501
                .format(daemon, allowed_values)
            )

        self._daemon = daemon

    @property
    def default_path(self):
        """Gets the default_path of this ModelGlobal.  # noqa: E501


        :return: The default_path of this ModelGlobal.  # noqa: E501
        :rtype: GlobalDefaultPath
        """
        return self._default_path

    @default_path.setter
    def default_path(self, default_path):
        """Sets the default_path of this ModelGlobal.


        :param default_path: The default_path of this ModelGlobal.  # noqa: E501
        :type: GlobalDefaultPath
        """

        self._default_path = default_path

    @property
    def description(self):
        """Gets the description of this ModelGlobal.  # noqa: E501


        :return: The description of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelGlobal.


        :param description: The description of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def device_atlas_options(self):
        """Gets the device_atlas_options of this ModelGlobal.  # noqa: E501


        :return: The device_atlas_options of this ModelGlobal.  # noqa: E501
        :rtype: GlobalDeviceAtlasOptions
        """
        return self._device_atlas_options

    @device_atlas_options.setter
    def device_atlas_options(self, device_atlas_options):
        """Sets the device_atlas_options of this ModelGlobal.


        :param device_atlas_options: The device_atlas_options of this ModelGlobal.  # noqa: E501
        :type: GlobalDeviceAtlasOptions
        """

        self._device_atlas_options = device_atlas_options

    @property
    def expose_experimental_directives(self):
        """Gets the expose_experimental_directives of this ModelGlobal.  # noqa: E501


        :return: The expose_experimental_directives of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._expose_experimental_directives

    @expose_experimental_directives.setter
    def expose_experimental_directives(self, expose_experimental_directives):
        """Sets the expose_experimental_directives of this ModelGlobal.


        :param expose_experimental_directives: The expose_experimental_directives of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._expose_experimental_directives = expose_experimental_directives

    @property
    def external_check(self):
        """Gets the external_check of this ModelGlobal.  # noqa: E501


        :return: The external_check of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._external_check

    @external_check.setter
    def external_check(self, external_check):
        """Sets the external_check of this ModelGlobal.


        :param external_check: The external_check of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._external_check = external_check

    @property
    def fifty_one_degrees_options(self):
        """Gets the fifty_one_degrees_options of this ModelGlobal.  # noqa: E501


        :return: The fifty_one_degrees_options of this ModelGlobal.  # noqa: E501
        :rtype: GlobalFiftyOneDegreesOptions
        """
        return self._fifty_one_degrees_options

    @fifty_one_degrees_options.setter
    def fifty_one_degrees_options(self, fifty_one_degrees_options):
        """Sets the fifty_one_degrees_options of this ModelGlobal.


        :param fifty_one_degrees_options: The fifty_one_degrees_options of this ModelGlobal.  # noqa: E501
        :type: GlobalFiftyOneDegreesOptions
        """

        self._fifty_one_degrees_options = fifty_one_degrees_options

    @property
    def gid(self):
        """Gets the gid of this ModelGlobal.  # noqa: E501


        :return: The gid of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this ModelGlobal.


        :param gid: The gid of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._gid = gid

    @property
    def grace(self):
        """Gets the grace of this ModelGlobal.  # noqa: E501


        :return: The grace of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._grace

    @grace.setter
    def grace(self, grace):
        """Sets the grace of this ModelGlobal.


        :param grace: The grace of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._grace = grace

    @property
    def group(self):
        """Gets the group of this ModelGlobal.  # noqa: E501


        :return: The group of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ModelGlobal.


        :param group: The group of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def h1_case_adjust(self):
        """Gets the h1_case_adjust of this ModelGlobal.  # noqa: E501


        :return: The h1_case_adjust of this ModelGlobal.  # noqa: E501
        :rtype: list[GlobalH1CaseAdjust]
        """
        return self._h1_case_adjust

    @h1_case_adjust.setter
    def h1_case_adjust(self, h1_case_adjust):
        """Sets the h1_case_adjust of this ModelGlobal.


        :param h1_case_adjust: The h1_case_adjust of this ModelGlobal.  # noqa: E501
        :type: list[GlobalH1CaseAdjust]
        """

        self._h1_case_adjust = h1_case_adjust

    @property
    def h1_case_adjust_file(self):
        """Gets the h1_case_adjust_file of this ModelGlobal.  # noqa: E501


        :return: The h1_case_adjust_file of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._h1_case_adjust_file

    @h1_case_adjust_file.setter
    def h1_case_adjust_file(self, h1_case_adjust_file):
        """Sets the h1_case_adjust_file of this ModelGlobal.


        :param h1_case_adjust_file: The h1_case_adjust_file of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._h1_case_adjust_file = h1_case_adjust_file

    @property
    def h2_workaround_bogus_websocket_clients(self):
        """Gets the h2_workaround_bogus_websocket_clients of this ModelGlobal.  # noqa: E501


        :return: The h2_workaround_bogus_websocket_clients of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._h2_workaround_bogus_websocket_clients

    @h2_workaround_bogus_websocket_clients.setter
    def h2_workaround_bogus_websocket_clients(self, h2_workaround_bogus_websocket_clients):
        """Sets the h2_workaround_bogus_websocket_clients of this ModelGlobal.


        :param h2_workaround_bogus_websocket_clients: The h2_workaround_bogus_websocket_clients of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._h2_workaround_bogus_websocket_clients = h2_workaround_bogus_websocket_clients

    @property
    def hard_stop_after(self):
        """Gets the hard_stop_after of this ModelGlobal.  # noqa: E501


        :return: The hard_stop_after of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._hard_stop_after

    @hard_stop_after.setter
    def hard_stop_after(self, hard_stop_after):
        """Sets the hard_stop_after of this ModelGlobal.


        :param hard_stop_after: The hard_stop_after of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._hard_stop_after = hard_stop_after

    @property
    def insecure_fork_wanted(self):
        """Gets the insecure_fork_wanted of this ModelGlobal.  # noqa: E501


        :return: The insecure_fork_wanted of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._insecure_fork_wanted

    @insecure_fork_wanted.setter
    def insecure_fork_wanted(self, insecure_fork_wanted):
        """Sets the insecure_fork_wanted of this ModelGlobal.


        :param insecure_fork_wanted: The insecure_fork_wanted of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._insecure_fork_wanted = insecure_fork_wanted

    @property
    def insecure_setuid_wanted(self):
        """Gets the insecure_setuid_wanted of this ModelGlobal.  # noqa: E501


        :return: The insecure_setuid_wanted of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._insecure_setuid_wanted

    @insecure_setuid_wanted.setter
    def insecure_setuid_wanted(self, insecure_setuid_wanted):
        """Sets the insecure_setuid_wanted of this ModelGlobal.


        :param insecure_setuid_wanted: The insecure_setuid_wanted of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._insecure_setuid_wanted = insecure_setuid_wanted

    @property
    def issuers_chain_path(self):
        """Gets the issuers_chain_path of this ModelGlobal.  # noqa: E501


        :return: The issuers_chain_path of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._issuers_chain_path

    @issuers_chain_path.setter
    def issuers_chain_path(self, issuers_chain_path):
        """Sets the issuers_chain_path of this ModelGlobal.


        :param issuers_chain_path: The issuers_chain_path of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._issuers_chain_path = issuers_chain_path

    @property
    def load_server_state_from_file(self):
        """Gets the load_server_state_from_file of this ModelGlobal.  # noqa: E501


        :return: The load_server_state_from_file of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._load_server_state_from_file

    @load_server_state_from_file.setter
    def load_server_state_from_file(self, load_server_state_from_file):
        """Sets the load_server_state_from_file of this ModelGlobal.


        :param load_server_state_from_file: The load_server_state_from_file of this ModelGlobal.  # noqa: E501
        :type: str
        """
        allowed_values = ["global", "local", "none"]  # noqa: E501
        if load_server_state_from_file not in allowed_values:
            raise ValueError(
                "Invalid value for `load_server_state_from_file` ({0}), must be one of {1}"  # noqa: E501
                .format(load_server_state_from_file, allowed_values)
            )

        self._load_server_state_from_file = load_server_state_from_file

    @property
    def localpeer(self):
        """Gets the localpeer of this ModelGlobal.  # noqa: E501


        :return: The localpeer of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._localpeer

    @localpeer.setter
    def localpeer(self, localpeer):
        """Sets the localpeer of this ModelGlobal.


        :param localpeer: The localpeer of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._localpeer = localpeer

    @property
    def log_send_hostname(self):
        """Gets the log_send_hostname of this ModelGlobal.  # noqa: E501


        :return: The log_send_hostname of this ModelGlobal.  # noqa: E501
        :rtype: GlobalLogSendHostname
        """
        return self._log_send_hostname

    @log_send_hostname.setter
    def log_send_hostname(self, log_send_hostname):
        """Sets the log_send_hostname of this ModelGlobal.


        :param log_send_hostname: The log_send_hostname of this ModelGlobal.  # noqa: E501
        :type: GlobalLogSendHostname
        """

        self._log_send_hostname = log_send_hostname

    @property
    def lua_load_per_thread(self):
        """Gets the lua_load_per_thread of this ModelGlobal.  # noqa: E501


        :return: The lua_load_per_thread of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._lua_load_per_thread

    @lua_load_per_thread.setter
    def lua_load_per_thread(self, lua_load_per_thread):
        """Sets the lua_load_per_thread of this ModelGlobal.


        :param lua_load_per_thread: The lua_load_per_thread of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._lua_load_per_thread = lua_load_per_thread

    @property
    def lua_loads(self):
        """Gets the lua_loads of this ModelGlobal.  # noqa: E501


        :return: The lua_loads of this ModelGlobal.  # noqa: E501
        :rtype: list[GlobalLuaLoads]
        """
        return self._lua_loads

    @lua_loads.setter
    def lua_loads(self, lua_loads):
        """Sets the lua_loads of this ModelGlobal.


        :param lua_loads: The lua_loads of this ModelGlobal.  # noqa: E501
        :type: list[GlobalLuaLoads]
        """

        self._lua_loads = lua_loads

    @property
    def lua_prepend_path(self):
        """Gets the lua_prepend_path of this ModelGlobal.  # noqa: E501


        :return: The lua_prepend_path of this ModelGlobal.  # noqa: E501
        :rtype: list[GlobalLuaPrependPath]
        """
        return self._lua_prepend_path

    @lua_prepend_path.setter
    def lua_prepend_path(self, lua_prepend_path):
        """Sets the lua_prepend_path of this ModelGlobal.


        :param lua_prepend_path: The lua_prepend_path of this ModelGlobal.  # noqa: E501
        :type: list[GlobalLuaPrependPath]
        """

        self._lua_prepend_path = lua_prepend_path

    @property
    def master_worker(self):
        """Gets the master_worker of this ModelGlobal.  # noqa: E501


        :return: The master_worker of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._master_worker

    @master_worker.setter
    def master_worker(self, master_worker):
        """Sets the master_worker of this ModelGlobal.


        :param master_worker: The master_worker of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._master_worker = master_worker

    @property
    def max_spread_checks(self):
        """Gets the max_spread_checks of this ModelGlobal.  # noqa: E501


        :return: The max_spread_checks of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._max_spread_checks

    @max_spread_checks.setter
    def max_spread_checks(self, max_spread_checks):
        """Sets the max_spread_checks of this ModelGlobal.


        :param max_spread_checks: The max_spread_checks of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._max_spread_checks = max_spread_checks

    @property
    def maxcompcpuusage(self):
        """Gets the maxcompcpuusage of this ModelGlobal.  # noqa: E501


        :return: The maxcompcpuusage of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._maxcompcpuusage

    @maxcompcpuusage.setter
    def maxcompcpuusage(self, maxcompcpuusage):
        """Sets the maxcompcpuusage of this ModelGlobal.


        :param maxcompcpuusage: The maxcompcpuusage of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._maxcompcpuusage = maxcompcpuusage

    @property
    def maxcomprate(self):
        """Gets the maxcomprate of this ModelGlobal.  # noqa: E501


        :return: The maxcomprate of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._maxcomprate

    @maxcomprate.setter
    def maxcomprate(self, maxcomprate):
        """Sets the maxcomprate of this ModelGlobal.


        :param maxcomprate: The maxcomprate of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._maxcomprate = maxcomprate

    @property
    def maxconn(self):
        """Gets the maxconn of this ModelGlobal.  # noqa: E501


        :return: The maxconn of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._maxconn

    @maxconn.setter
    def maxconn(self, maxconn):
        """Sets the maxconn of this ModelGlobal.


        :param maxconn: The maxconn of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._maxconn = maxconn

    @property
    def maxconnrate(self):
        """Gets the maxconnrate of this ModelGlobal.  # noqa: E501


        :return: The maxconnrate of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._maxconnrate

    @maxconnrate.setter
    def maxconnrate(self, maxconnrate):
        """Sets the maxconnrate of this ModelGlobal.


        :param maxconnrate: The maxconnrate of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._maxconnrate = maxconnrate

    @property
    def maxpipes(self):
        """Gets the maxpipes of this ModelGlobal.  # noqa: E501


        :return: The maxpipes of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._maxpipes

    @maxpipes.setter
    def maxpipes(self, maxpipes):
        """Sets the maxpipes of this ModelGlobal.


        :param maxpipes: The maxpipes of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._maxpipes = maxpipes

    @property
    def maxsessrate(self):
        """Gets the maxsessrate of this ModelGlobal.  # noqa: E501


        :return: The maxsessrate of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._maxsessrate

    @maxsessrate.setter
    def maxsessrate(self, maxsessrate):
        """Sets the maxsessrate of this ModelGlobal.


        :param maxsessrate: The maxsessrate of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._maxsessrate = maxsessrate

    @property
    def maxsslconn(self):
        """Gets the maxsslconn of this ModelGlobal.  # noqa: E501


        :return: The maxsslconn of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._maxsslconn

    @maxsslconn.setter
    def maxsslconn(self, maxsslconn):
        """Sets the maxsslconn of this ModelGlobal.


        :param maxsslconn: The maxsslconn of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._maxsslconn = maxsslconn

    @property
    def maxsslrate(self):
        """Gets the maxsslrate of this ModelGlobal.  # noqa: E501


        :return: The maxsslrate of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._maxsslrate

    @maxsslrate.setter
    def maxsslrate(self, maxsslrate):
        """Sets the maxsslrate of this ModelGlobal.


        :param maxsslrate: The maxsslrate of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._maxsslrate = maxsslrate

    @property
    def maxzlibmem(self):
        """Gets the maxzlibmem of this ModelGlobal.  # noqa: E501


        :return: The maxzlibmem of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._maxzlibmem

    @maxzlibmem.setter
    def maxzlibmem(self, maxzlibmem):
        """Sets the maxzlibmem of this ModelGlobal.


        :param maxzlibmem: The maxzlibmem of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._maxzlibmem = maxzlibmem

    @property
    def mworker_max_reloads(self):
        """Gets the mworker_max_reloads of this ModelGlobal.  # noqa: E501


        :return: The mworker_max_reloads of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._mworker_max_reloads

    @mworker_max_reloads.setter
    def mworker_max_reloads(self, mworker_max_reloads):
        """Sets the mworker_max_reloads of this ModelGlobal.


        :param mworker_max_reloads: The mworker_max_reloads of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._mworker_max_reloads = mworker_max_reloads

    @property
    def nbproc(self):
        """Gets the nbproc of this ModelGlobal.  # noqa: E501


        :return: The nbproc of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._nbproc

    @nbproc.setter
    def nbproc(self, nbproc):
        """Sets the nbproc of this ModelGlobal.


        :param nbproc: The nbproc of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._nbproc = nbproc

    @property
    def nbthread(self):
        """Gets the nbthread of this ModelGlobal.  # noqa: E501


        :return: The nbthread of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._nbthread

    @nbthread.setter
    def nbthread(self, nbthread):
        """Sets the nbthread of this ModelGlobal.


        :param nbthread: The nbthread of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._nbthread = nbthread

    @property
    def node(self):
        """Gets the node of this ModelGlobal.  # noqa: E501


        :return: The node of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this ModelGlobal.


        :param node: The node of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._node = node

    @property
    def noepoll(self):
        """Gets the noepoll of this ModelGlobal.  # noqa: E501


        :return: The noepoll of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._noepoll

    @noepoll.setter
    def noepoll(self, noepoll):
        """Sets the noepoll of this ModelGlobal.


        :param noepoll: The noepoll of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._noepoll = noepoll

    @property
    def noevports(self):
        """Gets the noevports of this ModelGlobal.  # noqa: E501


        :return: The noevports of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._noevports

    @noevports.setter
    def noevports(self, noevports):
        """Sets the noevports of this ModelGlobal.


        :param noevports: The noevports of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._noevports = noevports

    @property
    def nogetaddrinfo(self):
        """Gets the nogetaddrinfo of this ModelGlobal.  # noqa: E501


        :return: The nogetaddrinfo of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._nogetaddrinfo

    @nogetaddrinfo.setter
    def nogetaddrinfo(self, nogetaddrinfo):
        """Sets the nogetaddrinfo of this ModelGlobal.


        :param nogetaddrinfo: The nogetaddrinfo of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._nogetaddrinfo = nogetaddrinfo

    @property
    def nokqueue(self):
        """Gets the nokqueue of this ModelGlobal.  # noqa: E501


        :return: The nokqueue of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._nokqueue

    @nokqueue.setter
    def nokqueue(self, nokqueue):
        """Sets the nokqueue of this ModelGlobal.


        :param nokqueue: The nokqueue of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._nokqueue = nokqueue

    @property
    def nopoll(self):
        """Gets the nopoll of this ModelGlobal.  # noqa: E501


        :return: The nopoll of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._nopoll

    @nopoll.setter
    def nopoll(self, nopoll):
        """Sets the nopoll of this ModelGlobal.


        :param nopoll: The nopoll of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._nopoll = nopoll

    @property
    def noreuseport(self):
        """Gets the noreuseport of this ModelGlobal.  # noqa: E501


        :return: The noreuseport of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._noreuseport

    @noreuseport.setter
    def noreuseport(self, noreuseport):
        """Sets the noreuseport of this ModelGlobal.


        :param noreuseport: The noreuseport of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._noreuseport = noreuseport

    @property
    def nosplice(self):
        """Gets the nosplice of this ModelGlobal.  # noqa: E501


        :return: The nosplice of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._nosplice

    @nosplice.setter
    def nosplice(self, nosplice):
        """Sets the nosplice of this ModelGlobal.


        :param nosplice: The nosplice of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._nosplice = nosplice

    @property
    def numa_cpu_mapping(self):
        """Gets the numa_cpu_mapping of this ModelGlobal.  # noqa: E501


        :return: The numa_cpu_mapping of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._numa_cpu_mapping

    @numa_cpu_mapping.setter
    def numa_cpu_mapping(self, numa_cpu_mapping):
        """Sets the numa_cpu_mapping of this ModelGlobal.


        :param numa_cpu_mapping: The numa_cpu_mapping of this ModelGlobal.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if numa_cpu_mapping not in allowed_values:
            raise ValueError(
                "Invalid value for `numa_cpu_mapping` ({0}), must be one of {1}"  # noqa: E501
                .format(numa_cpu_mapping, allowed_values)
            )

        self._numa_cpu_mapping = numa_cpu_mapping

    @property
    def pidfile(self):
        """Gets the pidfile of this ModelGlobal.  # noqa: E501


        :return: The pidfile of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._pidfile

    @pidfile.setter
    def pidfile(self, pidfile):
        """Sets the pidfile of this ModelGlobal.


        :param pidfile: The pidfile of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._pidfile = pidfile

    @property
    def pp2_never_send_local(self):
        """Gets the pp2_never_send_local of this ModelGlobal.  # noqa: E501


        :return: The pp2_never_send_local of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._pp2_never_send_local

    @pp2_never_send_local.setter
    def pp2_never_send_local(self, pp2_never_send_local):
        """Sets the pp2_never_send_local of this ModelGlobal.


        :param pp2_never_send_local: The pp2_never_send_local of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._pp2_never_send_local = pp2_never_send_local

    @property
    def presetenv(self):
        """Gets the presetenv of this ModelGlobal.  # noqa: E501


        :return: The presetenv of this ModelGlobal.  # noqa: E501
        :rtype: list[GlobalPresetenv]
        """
        return self._presetenv

    @presetenv.setter
    def presetenv(self, presetenv):
        """Sets the presetenv of this ModelGlobal.


        :param presetenv: The presetenv of this ModelGlobal.  # noqa: E501
        :type: list[GlobalPresetenv]
        """

        self._presetenv = presetenv

    @property
    def profiling_tasks(self):
        """Gets the profiling_tasks of this ModelGlobal.  # noqa: E501


        :return: The profiling_tasks of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._profiling_tasks

    @profiling_tasks.setter
    def profiling_tasks(self, profiling_tasks):
        """Sets the profiling_tasks of this ModelGlobal.


        :param profiling_tasks: The profiling_tasks of this ModelGlobal.  # noqa: E501
        :type: str
        """
        allowed_values = ["auto", "on", "off"]  # noqa: E501
        if profiling_tasks not in allowed_values:
            raise ValueError(
                "Invalid value for `profiling_tasks` ({0}), must be one of {1}"  # noqa: E501
                .format(profiling_tasks, allowed_values)
            )

        self._profiling_tasks = profiling_tasks

    @property
    def quiet(self):
        """Gets the quiet of this ModelGlobal.  # noqa: E501


        :return: The quiet of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._quiet

    @quiet.setter
    def quiet(self, quiet):
        """Sets the quiet of this ModelGlobal.


        :param quiet: The quiet of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._quiet = quiet

    @property
    def resetenv(self):
        """Gets the resetenv of this ModelGlobal.  # noqa: E501


        :return: The resetenv of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._resetenv

    @resetenv.setter
    def resetenv(self, resetenv):
        """Sets the resetenv of this ModelGlobal.


        :param resetenv: The resetenv of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._resetenv = resetenv

    @property
    def runtime_apis(self):
        """Gets the runtime_apis of this ModelGlobal.  # noqa: E501


        :return: The runtime_apis of this ModelGlobal.  # noqa: E501
        :rtype: list[GlobalRuntimeApis]
        """
        return self._runtime_apis

    @runtime_apis.setter
    def runtime_apis(self, runtime_apis):
        """Sets the runtime_apis of this ModelGlobal.


        :param runtime_apis: The runtime_apis of this ModelGlobal.  # noqa: E501
        :type: list[GlobalRuntimeApis]
        """

        self._runtime_apis = runtime_apis

    @property
    def server_state_base(self):
        """Gets the server_state_base of this ModelGlobal.  # noqa: E501


        :return: The server_state_base of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._server_state_base

    @server_state_base.setter
    def server_state_base(self, server_state_base):
        """Sets the server_state_base of this ModelGlobal.


        :param server_state_base: The server_state_base of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._server_state_base = server_state_base

    @property
    def server_state_file(self):
        """Gets the server_state_file of this ModelGlobal.  # noqa: E501


        :return: The server_state_file of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._server_state_file

    @server_state_file.setter
    def server_state_file(self, server_state_file):
        """Sets the server_state_file of this ModelGlobal.


        :param server_state_file: The server_state_file of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._server_state_file = server_state_file

    @property
    def set_dumpable(self):
        """Gets the set_dumpable of this ModelGlobal.  # noqa: E501


        :return: The set_dumpable of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._set_dumpable

    @set_dumpable.setter
    def set_dumpable(self, set_dumpable):
        """Sets the set_dumpable of this ModelGlobal.


        :param set_dumpable: The set_dumpable of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._set_dumpable = set_dumpable

    @property
    def set_var(self):
        """Gets the set_var of this ModelGlobal.  # noqa: E501


        :return: The set_var of this ModelGlobal.  # noqa: E501
        :rtype: list[GlobalSetVar]
        """
        return self._set_var

    @set_var.setter
    def set_var(self, set_var):
        """Sets the set_var of this ModelGlobal.


        :param set_var: The set_var of this ModelGlobal.  # noqa: E501
        :type: list[GlobalSetVar]
        """

        self._set_var = set_var

    @property
    def set_var_fmt(self):
        """Gets the set_var_fmt of this ModelGlobal.  # noqa: E501


        :return: The set_var_fmt of this ModelGlobal.  # noqa: E501
        :rtype: list[GlobalSetVarFmt]
        """
        return self._set_var_fmt

    @set_var_fmt.setter
    def set_var_fmt(self, set_var_fmt):
        """Sets the set_var_fmt of this ModelGlobal.


        :param set_var_fmt: The set_var_fmt of this ModelGlobal.  # noqa: E501
        :type: list[GlobalSetVarFmt]
        """

        self._set_var_fmt = set_var_fmt

    @property
    def setenv(self):
        """Gets the setenv of this ModelGlobal.  # noqa: E501


        :return: The setenv of this ModelGlobal.  # noqa: E501
        :rtype: list[GlobalPresetenv]
        """
        return self._setenv

    @setenv.setter
    def setenv(self, setenv):
        """Sets the setenv of this ModelGlobal.


        :param setenv: The setenv of this ModelGlobal.  # noqa: E501
        :type: list[GlobalPresetenv]
        """

        self._setenv = setenv

    @property
    def spread_checks(self):
        """Gets the spread_checks of this ModelGlobal.  # noqa: E501


        :return: The spread_checks of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._spread_checks

    @spread_checks.setter
    def spread_checks(self, spread_checks):
        """Sets the spread_checks of this ModelGlobal.


        :param spread_checks: The spread_checks of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._spread_checks = spread_checks

    @property
    def ssl_default_bind_ciphers(self):
        """Gets the ssl_default_bind_ciphers of this ModelGlobal.  # noqa: E501


        :return: The ssl_default_bind_ciphers of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._ssl_default_bind_ciphers

    @ssl_default_bind_ciphers.setter
    def ssl_default_bind_ciphers(self, ssl_default_bind_ciphers):
        """Sets the ssl_default_bind_ciphers of this ModelGlobal.


        :param ssl_default_bind_ciphers: The ssl_default_bind_ciphers of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._ssl_default_bind_ciphers = ssl_default_bind_ciphers

    @property
    def ssl_default_bind_ciphersuites(self):
        """Gets the ssl_default_bind_ciphersuites of this ModelGlobal.  # noqa: E501


        :return: The ssl_default_bind_ciphersuites of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._ssl_default_bind_ciphersuites

    @ssl_default_bind_ciphersuites.setter
    def ssl_default_bind_ciphersuites(self, ssl_default_bind_ciphersuites):
        """Sets the ssl_default_bind_ciphersuites of this ModelGlobal.


        :param ssl_default_bind_ciphersuites: The ssl_default_bind_ciphersuites of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._ssl_default_bind_ciphersuites = ssl_default_bind_ciphersuites

    @property
    def ssl_default_bind_curves(self):
        """Gets the ssl_default_bind_curves of this ModelGlobal.  # noqa: E501


        :return: The ssl_default_bind_curves of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._ssl_default_bind_curves

    @ssl_default_bind_curves.setter
    def ssl_default_bind_curves(self, ssl_default_bind_curves):
        """Sets the ssl_default_bind_curves of this ModelGlobal.


        :param ssl_default_bind_curves: The ssl_default_bind_curves of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._ssl_default_bind_curves = ssl_default_bind_curves

    @property
    def ssl_default_bind_options(self):
        """Gets the ssl_default_bind_options of this ModelGlobal.  # noqa: E501


        :return: The ssl_default_bind_options of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._ssl_default_bind_options

    @ssl_default_bind_options.setter
    def ssl_default_bind_options(self, ssl_default_bind_options):
        """Sets the ssl_default_bind_options of this ModelGlobal.


        :param ssl_default_bind_options: The ssl_default_bind_options of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._ssl_default_bind_options = ssl_default_bind_options

    @property
    def ssl_default_server_ciphers(self):
        """Gets the ssl_default_server_ciphers of this ModelGlobal.  # noqa: E501


        :return: The ssl_default_server_ciphers of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._ssl_default_server_ciphers

    @ssl_default_server_ciphers.setter
    def ssl_default_server_ciphers(self, ssl_default_server_ciphers):
        """Sets the ssl_default_server_ciphers of this ModelGlobal.


        :param ssl_default_server_ciphers: The ssl_default_server_ciphers of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._ssl_default_server_ciphers = ssl_default_server_ciphers

    @property
    def ssl_default_server_ciphersuites(self):
        """Gets the ssl_default_server_ciphersuites of this ModelGlobal.  # noqa: E501


        :return: The ssl_default_server_ciphersuites of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._ssl_default_server_ciphersuites

    @ssl_default_server_ciphersuites.setter
    def ssl_default_server_ciphersuites(self, ssl_default_server_ciphersuites):
        """Sets the ssl_default_server_ciphersuites of this ModelGlobal.


        :param ssl_default_server_ciphersuites: The ssl_default_server_ciphersuites of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._ssl_default_server_ciphersuites = ssl_default_server_ciphersuites

    @property
    def ssl_default_server_options(self):
        """Gets the ssl_default_server_options of this ModelGlobal.  # noqa: E501


        :return: The ssl_default_server_options of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._ssl_default_server_options

    @ssl_default_server_options.setter
    def ssl_default_server_options(self, ssl_default_server_options):
        """Sets the ssl_default_server_options of this ModelGlobal.


        :param ssl_default_server_options: The ssl_default_server_options of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._ssl_default_server_options = ssl_default_server_options

    @property
    def ssl_dh_param_file(self):
        """Gets the ssl_dh_param_file of this ModelGlobal.  # noqa: E501


        :return: The ssl_dh_param_file of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._ssl_dh_param_file

    @ssl_dh_param_file.setter
    def ssl_dh_param_file(self, ssl_dh_param_file):
        """Sets the ssl_dh_param_file of this ModelGlobal.


        :param ssl_dh_param_file: The ssl_dh_param_file of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._ssl_dh_param_file = ssl_dh_param_file

    @property
    def ssl_engines(self):
        """Gets the ssl_engines of this ModelGlobal.  # noqa: E501


        :return: The ssl_engines of this ModelGlobal.  # noqa: E501
        :rtype: list[GlobalSslEngines]
        """
        return self._ssl_engines

    @ssl_engines.setter
    def ssl_engines(self, ssl_engines):
        """Sets the ssl_engines of this ModelGlobal.


        :param ssl_engines: The ssl_engines of this ModelGlobal.  # noqa: E501
        :type: list[GlobalSslEngines]
        """

        self._ssl_engines = ssl_engines

    @property
    def ssl_load_extra_files(self):
        """Gets the ssl_load_extra_files of this ModelGlobal.  # noqa: E501


        :return: The ssl_load_extra_files of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._ssl_load_extra_files

    @ssl_load_extra_files.setter
    def ssl_load_extra_files(self, ssl_load_extra_files):
        """Sets the ssl_load_extra_files of this ModelGlobal.


        :param ssl_load_extra_files: The ssl_load_extra_files of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._ssl_load_extra_files = ssl_load_extra_files

    @property
    def ssl_mode_async(self):
        """Gets the ssl_mode_async of this ModelGlobal.  # noqa: E501


        :return: The ssl_mode_async of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._ssl_mode_async

    @ssl_mode_async.setter
    def ssl_mode_async(self, ssl_mode_async):
        """Sets the ssl_mode_async of this ModelGlobal.


        :param ssl_mode_async: The ssl_mode_async of this ModelGlobal.  # noqa: E501
        :type: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if ssl_mode_async not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_mode_async` ({0}), must be one of {1}"  # noqa: E501
                .format(ssl_mode_async, allowed_values)
            )

        self._ssl_mode_async = ssl_mode_async

    @property
    def ssl_server_verify(self):
        """Gets the ssl_server_verify of this ModelGlobal.  # noqa: E501


        :return: The ssl_server_verify of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._ssl_server_verify

    @ssl_server_verify.setter
    def ssl_server_verify(self, ssl_server_verify):
        """Sets the ssl_server_verify of this ModelGlobal.


        :param ssl_server_verify: The ssl_server_verify of this ModelGlobal.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "required"]  # noqa: E501
        if ssl_server_verify not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_server_verify` ({0}), must be one of {1}"  # noqa: E501
                .format(ssl_server_verify, allowed_values)
            )

        self._ssl_server_verify = ssl_server_verify

    @property
    def ssl_skip_self_issued_ca(self):
        """Gets the ssl_skip_self_issued_ca of this ModelGlobal.  # noqa: E501


        :return: The ssl_skip_self_issued_ca of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._ssl_skip_self_issued_ca

    @ssl_skip_self_issued_ca.setter
    def ssl_skip_self_issued_ca(self, ssl_skip_self_issued_ca):
        """Sets the ssl_skip_self_issued_ca of this ModelGlobal.


        :param ssl_skip_self_issued_ca: The ssl_skip_self_issued_ca of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._ssl_skip_self_issued_ca = ssl_skip_self_issued_ca

    @property
    def stats_maxconn(self):
        """Gets the stats_maxconn of this ModelGlobal.  # noqa: E501


        :return: The stats_maxconn of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._stats_maxconn

    @stats_maxconn.setter
    def stats_maxconn(self, stats_maxconn):
        """Sets the stats_maxconn of this ModelGlobal.


        :param stats_maxconn: The stats_maxconn of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._stats_maxconn = stats_maxconn

    @property
    def stats_timeout(self):
        """Gets the stats_timeout of this ModelGlobal.  # noqa: E501


        :return: The stats_timeout of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._stats_timeout

    @stats_timeout.setter
    def stats_timeout(self, stats_timeout):
        """Sets the stats_timeout of this ModelGlobal.


        :param stats_timeout: The stats_timeout of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._stats_timeout = stats_timeout

    @property
    def strict_limits(self):
        """Gets the strict_limits of this ModelGlobal.  # noqa: E501


        :return: The strict_limits of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._strict_limits

    @strict_limits.setter
    def strict_limits(self, strict_limits):
        """Sets the strict_limits of this ModelGlobal.


        :param strict_limits: The strict_limits of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._strict_limits = strict_limits

    @property
    def thread_group_lines(self):
        """Gets the thread_group_lines of this ModelGlobal.  # noqa: E501


        :return: The thread_group_lines of this ModelGlobal.  # noqa: E501
        :rtype: list[GlobalThreadGroupLines]
        """
        return self._thread_group_lines

    @thread_group_lines.setter
    def thread_group_lines(self, thread_group_lines):
        """Sets the thread_group_lines of this ModelGlobal.


        :param thread_group_lines: The thread_group_lines of this ModelGlobal.  # noqa: E501
        :type: list[GlobalThreadGroupLines]
        """

        self._thread_group_lines = thread_group_lines

    @property
    def thread_groups(self):
        """Gets the thread_groups of this ModelGlobal.  # noqa: E501


        :return: The thread_groups of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._thread_groups

    @thread_groups.setter
    def thread_groups(self, thread_groups):
        """Sets the thread_groups of this ModelGlobal.


        :param thread_groups: The thread_groups of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._thread_groups = thread_groups

    @property
    def tune_options(self):
        """Gets the tune_options of this ModelGlobal.  # noqa: E501


        :return: The tune_options of this ModelGlobal.  # noqa: E501
        :rtype: GlobalTuneOptions
        """
        return self._tune_options

    @tune_options.setter
    def tune_options(self, tune_options):
        """Sets the tune_options of this ModelGlobal.


        :param tune_options: The tune_options of this ModelGlobal.  # noqa: E501
        :type: GlobalTuneOptions
        """

        self._tune_options = tune_options

    @property
    def tune_ssl_default_dh_param(self):
        """Gets the tune_ssl_default_dh_param of this ModelGlobal.  # noqa: E501


        :return: The tune_ssl_default_dh_param of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._tune_ssl_default_dh_param

    @tune_ssl_default_dh_param.setter
    def tune_ssl_default_dh_param(self, tune_ssl_default_dh_param):
        """Sets the tune_ssl_default_dh_param of this ModelGlobal.


        :param tune_ssl_default_dh_param: The tune_ssl_default_dh_param of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._tune_ssl_default_dh_param = tune_ssl_default_dh_param

    @property
    def uid(self):
        """Gets the uid of this ModelGlobal.  # noqa: E501


        :return: The uid of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this ModelGlobal.


        :param uid: The uid of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._uid = uid

    @property
    def ulimit_n(self):
        """Gets the ulimit_n of this ModelGlobal.  # noqa: E501


        :return: The ulimit_n of this ModelGlobal.  # noqa: E501
        :rtype: int
        """
        return self._ulimit_n

    @ulimit_n.setter
    def ulimit_n(self, ulimit_n):
        """Sets the ulimit_n of this ModelGlobal.


        :param ulimit_n: The ulimit_n of this ModelGlobal.  # noqa: E501
        :type: int
        """

        self._ulimit_n = ulimit_n

    @property
    def unsetenv(self):
        """Gets the unsetenv of this ModelGlobal.  # noqa: E501


        :return: The unsetenv of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._unsetenv

    @unsetenv.setter
    def unsetenv(self, unsetenv):
        """Sets the unsetenv of this ModelGlobal.


        :param unsetenv: The unsetenv of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._unsetenv = unsetenv

    @property
    def user(self):
        """Gets the user of this ModelGlobal.  # noqa: E501


        :return: The user of this ModelGlobal.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ModelGlobal.


        :param user: The user of this ModelGlobal.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def wurfl_options(self):
        """Gets the wurfl_options of this ModelGlobal.  # noqa: E501


        :return: The wurfl_options of this ModelGlobal.  # noqa: E501
        :rtype: GlobalWurflOptions
        """
        return self._wurfl_options

    @wurfl_options.setter
    def wurfl_options(self, wurfl_options):
        """Sets the wurfl_options of this ModelGlobal.


        :param wurfl_options: The wurfl_options of this ModelGlobal.  # noqa: E501
        :type: GlobalWurflOptions
        """

        self._wurfl_options = wurfl_options

    @property
    def zero_warning(self):
        """Gets the zero_warning of this ModelGlobal.  # noqa: E501


        :return: The zero_warning of this ModelGlobal.  # noqa: E501
        :rtype: bool
        """
        return self._zero_warning

    @zero_warning.setter
    def zero_warning(self, zero_warning):
        """Sets the zero_warning of this ModelGlobal.


        :param zero_warning: The zero_warning of this ModelGlobal.  # noqa: E501
        :type: bool
        """

        self._zero_warning = zero_warning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelGlobal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelGlobal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
