# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TcpRequestRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'bandwidth_limit_limit': 'str',
        'bandwidth_limit_name': 'str',
        'bandwidth_limit_period': 'str',
        'capture_len': 'int',
        'capture_sample': 'str',
        'cond': 'str',
        'cond_test': 'str',
        'expr': 'str',
        'gpt_value': 'str',
        'index': 'int',
        'log_level': 'str',
        'lua_action': 'str',
        'lua_params': 'str',
        'mark_value': 'str',
        'nice_value': 'int',
        'priority_type': 'str',
        'resolve_protocol': 'str',
        'resolve_resolvers': 'str',
        'resolve_var': 'str',
        'sc_inc_id': 'str',
        'service_name': 'str',
        'spoe_engine_name': 'str',
        'spoe_group_name': 'str',
        'switch_mode_proto': 'str',
        'timeout': 'int',
        'tos_value': 'str',
        'track_key': 'str',
        'track_table': 'str',
        'type': 'str',
        'var_format': 'str',
        'var_name': 'str',
        'var_scope': 'str'
    }

    attribute_map = {
        'action': 'action',
        'bandwidth_limit_limit': 'bandwidth_limit_limit',
        'bandwidth_limit_name': 'bandwidth_limit_name',
        'bandwidth_limit_period': 'bandwidth_limit_period',
        'capture_len': 'capture_len',
        'capture_sample': 'capture_sample',
        'cond': 'cond',
        'cond_test': 'cond_test',
        'expr': 'expr',
        'gpt_value': 'gpt_value',
        'index': 'index',
        'log_level': 'log_level',
        'lua_action': 'lua_action',
        'lua_params': 'lua_params',
        'mark_value': 'mark_value',
        'nice_value': 'nice_value',
        'priority_type': 'priority_type',
        'resolve_protocol': 'resolve_protocol',
        'resolve_resolvers': 'resolve_resolvers',
        'resolve_var': 'resolve_var',
        'sc_inc_id': 'sc_inc_id',
        'service_name': 'service_name',
        'spoe_engine_name': 'spoe_engine_name',
        'spoe_group_name': 'spoe_group_name',
        'switch_mode_proto': 'switch_mode_proto',
        'timeout': 'timeout',
        'tos_value': 'tos_value',
        'track_key': 'track_key',
        'track_table': 'track_table',
        'type': 'type',
        'var_format': 'var_format',
        'var_name': 'var_name',
        'var_scope': 'var_scope'
    }

    def __init__(self, action=None, bandwidth_limit_limit=None, bandwidth_limit_name=None, bandwidth_limit_period=None, capture_len=None, capture_sample=None, cond=None, cond_test=None, expr=None, gpt_value=None, index=None, log_level=None, lua_action=None, lua_params=None, mark_value=None, nice_value=None, priority_type=None, resolve_protocol=None, resolve_resolvers=None, resolve_var=None, sc_inc_id=None, service_name=None, spoe_engine_name=None, spoe_group_name=None, switch_mode_proto=None, timeout=None, tos_value=None, track_key=None, track_table=None, type=None, var_format=None, var_name=None, var_scope=None):  # noqa: E501
        """TcpRequestRule - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._bandwidth_limit_limit = None
        self._bandwidth_limit_name = None
        self._bandwidth_limit_period = None
        self._capture_len = None
        self._capture_sample = None
        self._cond = None
        self._cond_test = None
        self._expr = None
        self._gpt_value = None
        self._index = None
        self._log_level = None
        self._lua_action = None
        self._lua_params = None
        self._mark_value = None
        self._nice_value = None
        self._priority_type = None
        self._resolve_protocol = None
        self._resolve_resolvers = None
        self._resolve_var = None
        self._sc_inc_id = None
        self._service_name = None
        self._spoe_engine_name = None
        self._spoe_group_name = None
        self._switch_mode_proto = None
        self._timeout = None
        self._tos_value = None
        self._track_key = None
        self._track_table = None
        self._type = None
        self._var_format = None
        self._var_name = None
        self._var_scope = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if bandwidth_limit_limit is not None:
            self.bandwidth_limit_limit = bandwidth_limit_limit
        if bandwidth_limit_name is not None:
            self.bandwidth_limit_name = bandwidth_limit_name
        if bandwidth_limit_period is not None:
            self.bandwidth_limit_period = bandwidth_limit_period
        if capture_len is not None:
            self.capture_len = capture_len
        if capture_sample is not None:
            self.capture_sample = capture_sample
        if cond is not None:
            self.cond = cond
        if cond_test is not None:
            self.cond_test = cond_test
        if expr is not None:
            self.expr = expr
        if gpt_value is not None:
            self.gpt_value = gpt_value
        self.index = index
        if log_level is not None:
            self.log_level = log_level
        if lua_action is not None:
            self.lua_action = lua_action
        if lua_params is not None:
            self.lua_params = lua_params
        if mark_value is not None:
            self.mark_value = mark_value
        if nice_value is not None:
            self.nice_value = nice_value
        if priority_type is not None:
            self.priority_type = priority_type
        if resolve_protocol is not None:
            self.resolve_protocol = resolve_protocol
        if resolve_resolvers is not None:
            self.resolve_resolvers = resolve_resolvers
        if resolve_var is not None:
            self.resolve_var = resolve_var
        if sc_inc_id is not None:
            self.sc_inc_id = sc_inc_id
        if service_name is not None:
            self.service_name = service_name
        if spoe_engine_name is not None:
            self.spoe_engine_name = spoe_engine_name
        if spoe_group_name is not None:
            self.spoe_group_name = spoe_group_name
        if switch_mode_proto is not None:
            self.switch_mode_proto = switch_mode_proto
        if timeout is not None:
            self.timeout = timeout
        if tos_value is not None:
            self.tos_value = tos_value
        if track_key is not None:
            self.track_key = track_key
        if track_table is not None:
            self.track_table = track_table
        self.type = type
        if var_format is not None:
            self.var_format = var_format
        if var_name is not None:
            self.var_name = var_name
        if var_scope is not None:
            self.var_scope = var_scope

    @property
    def action(self):
        """Gets the action of this TcpRequestRule.  # noqa: E501


        :return: The action of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this TcpRequestRule.


        :param action: The action of this TcpRequestRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["accept", "capture", "do-resolve", "expect-netscaler-cip", "expect-proxy", "reject", "sc-inc-gpc0", "sc-inc-gpc1", "sc-set-gpt0", "send-spoe-group", "set-dst-port", "set-dst", "set-priority", "set-src", "set-var", "silent-drop", "track-sc0", "track-sc1", "track-sc2", "unset-var", "use-service", "lua", "set-bandwidth-limit", "set-src-port", "set-mark", "set-tos", "set-var-fmt", "set-log-level", "set-nice", "switch-mode"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def bandwidth_limit_limit(self):
        """Gets the bandwidth_limit_limit of this TcpRequestRule.  # noqa: E501


        :return: The bandwidth_limit_limit of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._bandwidth_limit_limit

    @bandwidth_limit_limit.setter
    def bandwidth_limit_limit(self, bandwidth_limit_limit):
        """Sets the bandwidth_limit_limit of this TcpRequestRule.


        :param bandwidth_limit_limit: The bandwidth_limit_limit of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._bandwidth_limit_limit = bandwidth_limit_limit

    @property
    def bandwidth_limit_name(self):
        """Gets the bandwidth_limit_name of this TcpRequestRule.  # noqa: E501


        :return: The bandwidth_limit_name of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._bandwidth_limit_name

    @bandwidth_limit_name.setter
    def bandwidth_limit_name(self, bandwidth_limit_name):
        """Sets the bandwidth_limit_name of this TcpRequestRule.


        :param bandwidth_limit_name: The bandwidth_limit_name of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._bandwidth_limit_name = bandwidth_limit_name

    @property
    def bandwidth_limit_period(self):
        """Gets the bandwidth_limit_period of this TcpRequestRule.  # noqa: E501


        :return: The bandwidth_limit_period of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._bandwidth_limit_period

    @bandwidth_limit_period.setter
    def bandwidth_limit_period(self, bandwidth_limit_period):
        """Sets the bandwidth_limit_period of this TcpRequestRule.


        :param bandwidth_limit_period: The bandwidth_limit_period of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._bandwidth_limit_period = bandwidth_limit_period

    @property
    def capture_len(self):
        """Gets the capture_len of this TcpRequestRule.  # noqa: E501


        :return: The capture_len of this TcpRequestRule.  # noqa: E501
        :rtype: int
        """
        return self._capture_len

    @capture_len.setter
    def capture_len(self, capture_len):
        """Sets the capture_len of this TcpRequestRule.


        :param capture_len: The capture_len of this TcpRequestRule.  # noqa: E501
        :type: int
        """

        self._capture_len = capture_len

    @property
    def capture_sample(self):
        """Gets the capture_sample of this TcpRequestRule.  # noqa: E501


        :return: The capture_sample of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._capture_sample

    @capture_sample.setter
    def capture_sample(self, capture_sample):
        """Sets the capture_sample of this TcpRequestRule.


        :param capture_sample: The capture_sample of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._capture_sample = capture_sample

    @property
    def cond(self):
        """Gets the cond of this TcpRequestRule.  # noqa: E501


        :return: The cond of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._cond

    @cond.setter
    def cond(self, cond):
        """Sets the cond of this TcpRequestRule.


        :param cond: The cond of this TcpRequestRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["if", "unless"]  # noqa: E501
        if cond not in allowed_values:
            raise ValueError(
                "Invalid value for `cond` ({0}), must be one of {1}"  # noqa: E501
                .format(cond, allowed_values)
            )

        self._cond = cond

    @property
    def cond_test(self):
        """Gets the cond_test of this TcpRequestRule.  # noqa: E501


        :return: The cond_test of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._cond_test

    @cond_test.setter
    def cond_test(self, cond_test):
        """Sets the cond_test of this TcpRequestRule.


        :param cond_test: The cond_test of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._cond_test = cond_test

    @property
    def expr(self):
        """Gets the expr of this TcpRequestRule.  # noqa: E501


        :return: The expr of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._expr

    @expr.setter
    def expr(self, expr):
        """Sets the expr of this TcpRequestRule.


        :param expr: The expr of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._expr = expr

    @property
    def gpt_value(self):
        """Gets the gpt_value of this TcpRequestRule.  # noqa: E501


        :return: The gpt_value of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._gpt_value

    @gpt_value.setter
    def gpt_value(self, gpt_value):
        """Sets the gpt_value of this TcpRequestRule.


        :param gpt_value: The gpt_value of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._gpt_value = gpt_value

    @property
    def index(self):
        """Gets the index of this TcpRequestRule.  # noqa: E501


        :return: The index of this TcpRequestRule.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this TcpRequestRule.


        :param index: The index of this TcpRequestRule.  # noqa: E501
        :type: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def log_level(self):
        """Gets the log_level of this TcpRequestRule.  # noqa: E501


        :return: The log_level of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this TcpRequestRule.


        :param log_level: The log_level of this TcpRequestRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["emerg", "alert", "crit", "err", "warning", "notice", "info", "debug", "silent"]  # noqa: E501
        if log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `log_level` ({0}), must be one of {1}"  # noqa: E501
                .format(log_level, allowed_values)
            )

        self._log_level = log_level

    @property
    def lua_action(self):
        """Gets the lua_action of this TcpRequestRule.  # noqa: E501


        :return: The lua_action of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._lua_action

    @lua_action.setter
    def lua_action(self, lua_action):
        """Sets the lua_action of this TcpRequestRule.


        :param lua_action: The lua_action of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._lua_action = lua_action

    @property
    def lua_params(self):
        """Gets the lua_params of this TcpRequestRule.  # noqa: E501


        :return: The lua_params of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._lua_params

    @lua_params.setter
    def lua_params(self, lua_params):
        """Sets the lua_params of this TcpRequestRule.


        :param lua_params: The lua_params of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._lua_params = lua_params

    @property
    def mark_value(self):
        """Gets the mark_value of this TcpRequestRule.  # noqa: E501


        :return: The mark_value of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._mark_value

    @mark_value.setter
    def mark_value(self, mark_value):
        """Sets the mark_value of this TcpRequestRule.


        :param mark_value: The mark_value of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._mark_value = mark_value

    @property
    def nice_value(self):
        """Gets the nice_value of this TcpRequestRule.  # noqa: E501


        :return: The nice_value of this TcpRequestRule.  # noqa: E501
        :rtype: int
        """
        return self._nice_value

    @nice_value.setter
    def nice_value(self, nice_value):
        """Sets the nice_value of this TcpRequestRule.


        :param nice_value: The nice_value of this TcpRequestRule.  # noqa: E501
        :type: int
        """

        self._nice_value = nice_value

    @property
    def priority_type(self):
        """Gets the priority_type of this TcpRequestRule.  # noqa: E501


        :return: The priority_type of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._priority_type

    @priority_type.setter
    def priority_type(self, priority_type):
        """Sets the priority_type of this TcpRequestRule.


        :param priority_type: The priority_type of this TcpRequestRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["class", "offset"]  # noqa: E501
        if priority_type not in allowed_values:
            raise ValueError(
                "Invalid value for `priority_type` ({0}), must be one of {1}"  # noqa: E501
                .format(priority_type, allowed_values)
            )

        self._priority_type = priority_type

    @property
    def resolve_protocol(self):
        """Gets the resolve_protocol of this TcpRequestRule.  # noqa: E501


        :return: The resolve_protocol of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._resolve_protocol

    @resolve_protocol.setter
    def resolve_protocol(self, resolve_protocol):
        """Sets the resolve_protocol of this TcpRequestRule.


        :param resolve_protocol: The resolve_protocol of this TcpRequestRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["ipv4", "ipv6"]  # noqa: E501
        if resolve_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `resolve_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(resolve_protocol, allowed_values)
            )

        self._resolve_protocol = resolve_protocol

    @property
    def resolve_resolvers(self):
        """Gets the resolve_resolvers of this TcpRequestRule.  # noqa: E501


        :return: The resolve_resolvers of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._resolve_resolvers

    @resolve_resolvers.setter
    def resolve_resolvers(self, resolve_resolvers):
        """Sets the resolve_resolvers of this TcpRequestRule.


        :param resolve_resolvers: The resolve_resolvers of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._resolve_resolvers = resolve_resolvers

    @property
    def resolve_var(self):
        """Gets the resolve_var of this TcpRequestRule.  # noqa: E501


        :return: The resolve_var of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._resolve_var

    @resolve_var.setter
    def resolve_var(self, resolve_var):
        """Sets the resolve_var of this TcpRequestRule.


        :param resolve_var: The resolve_var of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._resolve_var = resolve_var

    @property
    def sc_inc_id(self):
        """Gets the sc_inc_id of this TcpRequestRule.  # noqa: E501


        :return: The sc_inc_id of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._sc_inc_id

    @sc_inc_id.setter
    def sc_inc_id(self, sc_inc_id):
        """Sets the sc_inc_id of this TcpRequestRule.


        :param sc_inc_id: The sc_inc_id of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._sc_inc_id = sc_inc_id

    @property
    def service_name(self):
        """Gets the service_name of this TcpRequestRule.  # noqa: E501


        :return: The service_name of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this TcpRequestRule.


        :param service_name: The service_name of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    @property
    def spoe_engine_name(self):
        """Gets the spoe_engine_name of this TcpRequestRule.  # noqa: E501


        :return: The spoe_engine_name of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._spoe_engine_name

    @spoe_engine_name.setter
    def spoe_engine_name(self, spoe_engine_name):
        """Sets the spoe_engine_name of this TcpRequestRule.


        :param spoe_engine_name: The spoe_engine_name of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._spoe_engine_name = spoe_engine_name

    @property
    def spoe_group_name(self):
        """Gets the spoe_group_name of this TcpRequestRule.  # noqa: E501


        :return: The spoe_group_name of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._spoe_group_name

    @spoe_group_name.setter
    def spoe_group_name(self, spoe_group_name):
        """Sets the spoe_group_name of this TcpRequestRule.


        :param spoe_group_name: The spoe_group_name of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._spoe_group_name = spoe_group_name

    @property
    def switch_mode_proto(self):
        """Gets the switch_mode_proto of this TcpRequestRule.  # noqa: E501


        :return: The switch_mode_proto of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._switch_mode_proto

    @switch_mode_proto.setter
    def switch_mode_proto(self, switch_mode_proto):
        """Sets the switch_mode_proto of this TcpRequestRule.


        :param switch_mode_proto: The switch_mode_proto of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._switch_mode_proto = switch_mode_proto

    @property
    def timeout(self):
        """Gets the timeout of this TcpRequestRule.  # noqa: E501


        :return: The timeout of this TcpRequestRule.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this TcpRequestRule.


        :param timeout: The timeout of this TcpRequestRule.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def tos_value(self):
        """Gets the tos_value of this TcpRequestRule.  # noqa: E501


        :return: The tos_value of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._tos_value

    @tos_value.setter
    def tos_value(self, tos_value):
        """Sets the tos_value of this TcpRequestRule.


        :param tos_value: The tos_value of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._tos_value = tos_value

    @property
    def track_key(self):
        """Gets the track_key of this TcpRequestRule.  # noqa: E501


        :return: The track_key of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._track_key

    @track_key.setter
    def track_key(self, track_key):
        """Sets the track_key of this TcpRequestRule.


        :param track_key: The track_key of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._track_key = track_key

    @property
    def track_table(self):
        """Gets the track_table of this TcpRequestRule.  # noqa: E501


        :return: The track_table of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._track_table

    @track_table.setter
    def track_table(self, track_table):
        """Sets the track_table of this TcpRequestRule.


        :param track_table: The track_table of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._track_table = track_table

    @property
    def type(self):
        """Gets the type of this TcpRequestRule.  # noqa: E501


        :return: The type of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TcpRequestRule.


        :param type: The type of this TcpRequestRule.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["connection", "content", "inspect-delay", "session"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def var_format(self):
        """Gets the var_format of this TcpRequestRule.  # noqa: E501


        :return: The var_format of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._var_format

    @var_format.setter
    def var_format(self, var_format):
        """Sets the var_format of this TcpRequestRule.


        :param var_format: The var_format of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._var_format = var_format

    @property
    def var_name(self):
        """Gets the var_name of this TcpRequestRule.  # noqa: E501


        :return: The var_name of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._var_name

    @var_name.setter
    def var_name(self, var_name):
        """Sets the var_name of this TcpRequestRule.


        :param var_name: The var_name of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._var_name = var_name

    @property
    def var_scope(self):
        """Gets the var_scope of this TcpRequestRule.  # noqa: E501


        :return: The var_scope of this TcpRequestRule.  # noqa: E501
        :rtype: str
        """
        return self._var_scope

    @var_scope.setter
    def var_scope(self, var_scope):
        """Sets the var_scope of this TcpRequestRule.


        :param var_scope: The var_scope of this TcpRequestRule.  # noqa: E501
        :type: str
        """

        self._var_scope = var_scope

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TcpRequestRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TcpRequestRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
