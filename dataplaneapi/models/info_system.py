# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InfoSystem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_info': 'InfoSystemCpuInfo',
        'hostname': 'str',
        'mem_info': 'InfoSystemMemInfo',
        'os_string': 'str',
        'time': 'int',
        'uptime': 'int'
    }

    attribute_map = {
        'cpu_info': 'cpu_info',
        'hostname': 'hostname',
        'mem_info': 'mem_info',
        'os_string': 'os_string',
        'time': 'time',
        'uptime': 'uptime'
    }

    def __init__(self, cpu_info=None, hostname=None, mem_info=None, os_string=None, time=None, uptime=None):  # noqa: E501
        """InfoSystem - a model defined in Swagger"""  # noqa: E501
        self._cpu_info = None
        self._hostname = None
        self._mem_info = None
        self._os_string = None
        self._time = None
        self._uptime = None
        self.discriminator = None
        if cpu_info is not None:
            self.cpu_info = cpu_info
        if hostname is not None:
            self.hostname = hostname
        if mem_info is not None:
            self.mem_info = mem_info
        if os_string is not None:
            self.os_string = os_string
        if time is not None:
            self.time = time
        if uptime is not None:
            self.uptime = uptime

    @property
    def cpu_info(self):
        """Gets the cpu_info of this InfoSystem.  # noqa: E501


        :return: The cpu_info of this InfoSystem.  # noqa: E501
        :rtype: InfoSystemCpuInfo
        """
        return self._cpu_info

    @cpu_info.setter
    def cpu_info(self, cpu_info):
        """Sets the cpu_info of this InfoSystem.


        :param cpu_info: The cpu_info of this InfoSystem.  # noqa: E501
        :type: InfoSystemCpuInfo
        """

        self._cpu_info = cpu_info

    @property
    def hostname(self):
        """Gets the hostname of this InfoSystem.  # noqa: E501

        Hostname where the HAProxy is running  # noqa: E501

        :return: The hostname of this InfoSystem.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this InfoSystem.

        Hostname where the HAProxy is running  # noqa: E501

        :param hostname: The hostname of this InfoSystem.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def mem_info(self):
        """Gets the mem_info of this InfoSystem.  # noqa: E501


        :return: The mem_info of this InfoSystem.  # noqa: E501
        :rtype: InfoSystemMemInfo
        """
        return self._mem_info

    @mem_info.setter
    def mem_info(self, mem_info):
        """Sets the mem_info of this InfoSystem.


        :param mem_info: The mem_info of this InfoSystem.  # noqa: E501
        :type: InfoSystemMemInfo
        """

        self._mem_info = mem_info

    @property
    def os_string(self):
        """Gets the os_string of this InfoSystem.  # noqa: E501

        OS string  # noqa: E501

        :return: The os_string of this InfoSystem.  # noqa: E501
        :rtype: str
        """
        return self._os_string

    @os_string.setter
    def os_string(self, os_string):
        """Sets the os_string of this InfoSystem.

        OS string  # noqa: E501

        :param os_string: The os_string of this InfoSystem.  # noqa: E501
        :type: str
        """

        self._os_string = os_string

    @property
    def time(self):
        """Gets the time of this InfoSystem.  # noqa: E501

        Current time in milliseconds since Epoch.  # noqa: E501

        :return: The time of this InfoSystem.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this InfoSystem.

        Current time in milliseconds since Epoch.  # noqa: E501

        :param time: The time of this InfoSystem.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def uptime(self):
        """Gets the uptime of this InfoSystem.  # noqa: E501

        System uptime  # noqa: E501

        :return: The uptime of this InfoSystem.  # noqa: E501
        :rtype: int
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this InfoSystem.

        System uptime  # noqa: E501

        :param uptime: The uptime of this InfoSystem.  # noqa: E501
        :type: int
        """

        self._uptime = uptime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InfoSystem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InfoSystem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
