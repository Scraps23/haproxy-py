# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Acl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acl_name': 'str',
        'criterion': 'str',
        'index': 'int',
        'value': 'str'
    }

    attribute_map = {
        'acl_name': 'acl_name',
        'criterion': 'criterion',
        'index': 'index',
        'value': 'value'
    }

    def __init__(self, acl_name=None, criterion=None, index=None, value=None):  # noqa: E501
        """Acl - a model defined in Swagger"""  # noqa: E501
        self._acl_name = None
        self._criterion = None
        self._index = None
        self._value = None
        self.discriminator = None
        self.acl_name = acl_name
        self.criterion = criterion
        self.index = index
        self.value = value

    @property
    def acl_name(self):
        """Gets the acl_name of this Acl.  # noqa: E501


        :return: The acl_name of this Acl.  # noqa: E501
        :rtype: str
        """
        return self._acl_name

    @acl_name.setter
    def acl_name(self, acl_name):
        """Sets the acl_name of this Acl.


        :param acl_name: The acl_name of this Acl.  # noqa: E501
        :type: str
        """
        if acl_name is None:
            raise ValueError("Invalid value for `acl_name`, must not be `None`")  # noqa: E501

        self._acl_name = acl_name

    @property
    def criterion(self):
        """Gets the criterion of this Acl.  # noqa: E501


        :return: The criterion of this Acl.  # noqa: E501
        :rtype: str
        """
        return self._criterion

    @criterion.setter
    def criterion(self, criterion):
        """Sets the criterion of this Acl.


        :param criterion: The criterion of this Acl.  # noqa: E501
        :type: str
        """
        if criterion is None:
            raise ValueError("Invalid value for `criterion`, must not be `None`")  # noqa: E501

        self._criterion = criterion

    @property
    def index(self):
        """Gets the index of this Acl.  # noqa: E501


        :return: The index of this Acl.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Acl.


        :param index: The index of this Acl.  # noqa: E501
        :type: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def value(self):
        """Gets the value of this Acl.  # noqa: E501


        :return: The value of this Acl.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Acl.


        :param value: The value of this Acl.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Acl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Acl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
