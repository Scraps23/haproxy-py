# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Resolver(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accepted_payload_size': 'int',
        'hold_nx': 'int',
        'hold_obsolete': 'int',
        'hold_other': 'int',
        'hold_refused': 'int',
        'hold_timeout': 'int',
        'hold_valid': 'int',
        'name': 'str',
        'parse_resolv_conf': 'bool',
        'resolve_retries': 'int',
        'timeout_resolve': 'int',
        'timeout_retry': 'int'
    }

    attribute_map = {
        'accepted_payload_size': 'accepted_payload_size',
        'hold_nx': 'hold_nx',
        'hold_obsolete': 'hold_obsolete',
        'hold_other': 'hold_other',
        'hold_refused': 'hold_refused',
        'hold_timeout': 'hold_timeout',
        'hold_valid': 'hold_valid',
        'name': 'name',
        'parse_resolv_conf': 'parse-resolv-conf',
        'resolve_retries': 'resolve_retries',
        'timeout_resolve': 'timeout_resolve',
        'timeout_retry': 'timeout_retry'
    }

    def __init__(self, accepted_payload_size=None, hold_nx=None, hold_obsolete=None, hold_other=None, hold_refused=None, hold_timeout=None, hold_valid=None, name=None, parse_resolv_conf=None, resolve_retries=None, timeout_resolve=None, timeout_retry=None):  # noqa: E501
        """Resolver - a model defined in Swagger"""  # noqa: E501
        self._accepted_payload_size = None
        self._hold_nx = None
        self._hold_obsolete = None
        self._hold_other = None
        self._hold_refused = None
        self._hold_timeout = None
        self._hold_valid = None
        self._name = None
        self._parse_resolv_conf = None
        self._resolve_retries = None
        self._timeout_resolve = None
        self._timeout_retry = None
        self.discriminator = None
        if accepted_payload_size is not None:
            self.accepted_payload_size = accepted_payload_size
        if hold_nx is not None:
            self.hold_nx = hold_nx
        if hold_obsolete is not None:
            self.hold_obsolete = hold_obsolete
        if hold_other is not None:
            self.hold_other = hold_other
        if hold_refused is not None:
            self.hold_refused = hold_refused
        if hold_timeout is not None:
            self.hold_timeout = hold_timeout
        if hold_valid is not None:
            self.hold_valid = hold_valid
        self.name = name
        if parse_resolv_conf is not None:
            self.parse_resolv_conf = parse_resolv_conf
        if resolve_retries is not None:
            self.resolve_retries = resolve_retries
        if timeout_resolve is not None:
            self.timeout_resolve = timeout_resolve
        if timeout_retry is not None:
            self.timeout_retry = timeout_retry

    @property
    def accepted_payload_size(self):
        """Gets the accepted_payload_size of this Resolver.  # noqa: E501


        :return: The accepted_payload_size of this Resolver.  # noqa: E501
        :rtype: int
        """
        return self._accepted_payload_size

    @accepted_payload_size.setter
    def accepted_payload_size(self, accepted_payload_size):
        """Sets the accepted_payload_size of this Resolver.


        :param accepted_payload_size: The accepted_payload_size of this Resolver.  # noqa: E501
        :type: int
        """

        self._accepted_payload_size = accepted_payload_size

    @property
    def hold_nx(self):
        """Gets the hold_nx of this Resolver.  # noqa: E501


        :return: The hold_nx of this Resolver.  # noqa: E501
        :rtype: int
        """
        return self._hold_nx

    @hold_nx.setter
    def hold_nx(self, hold_nx):
        """Sets the hold_nx of this Resolver.


        :param hold_nx: The hold_nx of this Resolver.  # noqa: E501
        :type: int
        """

        self._hold_nx = hold_nx

    @property
    def hold_obsolete(self):
        """Gets the hold_obsolete of this Resolver.  # noqa: E501


        :return: The hold_obsolete of this Resolver.  # noqa: E501
        :rtype: int
        """
        return self._hold_obsolete

    @hold_obsolete.setter
    def hold_obsolete(self, hold_obsolete):
        """Sets the hold_obsolete of this Resolver.


        :param hold_obsolete: The hold_obsolete of this Resolver.  # noqa: E501
        :type: int
        """

        self._hold_obsolete = hold_obsolete

    @property
    def hold_other(self):
        """Gets the hold_other of this Resolver.  # noqa: E501


        :return: The hold_other of this Resolver.  # noqa: E501
        :rtype: int
        """
        return self._hold_other

    @hold_other.setter
    def hold_other(self, hold_other):
        """Sets the hold_other of this Resolver.


        :param hold_other: The hold_other of this Resolver.  # noqa: E501
        :type: int
        """

        self._hold_other = hold_other

    @property
    def hold_refused(self):
        """Gets the hold_refused of this Resolver.  # noqa: E501


        :return: The hold_refused of this Resolver.  # noqa: E501
        :rtype: int
        """
        return self._hold_refused

    @hold_refused.setter
    def hold_refused(self, hold_refused):
        """Sets the hold_refused of this Resolver.


        :param hold_refused: The hold_refused of this Resolver.  # noqa: E501
        :type: int
        """

        self._hold_refused = hold_refused

    @property
    def hold_timeout(self):
        """Gets the hold_timeout of this Resolver.  # noqa: E501


        :return: The hold_timeout of this Resolver.  # noqa: E501
        :rtype: int
        """
        return self._hold_timeout

    @hold_timeout.setter
    def hold_timeout(self, hold_timeout):
        """Sets the hold_timeout of this Resolver.


        :param hold_timeout: The hold_timeout of this Resolver.  # noqa: E501
        :type: int
        """

        self._hold_timeout = hold_timeout

    @property
    def hold_valid(self):
        """Gets the hold_valid of this Resolver.  # noqa: E501


        :return: The hold_valid of this Resolver.  # noqa: E501
        :rtype: int
        """
        return self._hold_valid

    @hold_valid.setter
    def hold_valid(self, hold_valid):
        """Sets the hold_valid of this Resolver.


        :param hold_valid: The hold_valid of this Resolver.  # noqa: E501
        :type: int
        """

        self._hold_valid = hold_valid

    @property
    def name(self):
        """Gets the name of this Resolver.  # noqa: E501


        :return: The name of this Resolver.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Resolver.


        :param name: The name of this Resolver.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def parse_resolv_conf(self):
        """Gets the parse_resolv_conf of this Resolver.  # noqa: E501


        :return: The parse_resolv_conf of this Resolver.  # noqa: E501
        :rtype: bool
        """
        return self._parse_resolv_conf

    @parse_resolv_conf.setter
    def parse_resolv_conf(self, parse_resolv_conf):
        """Sets the parse_resolv_conf of this Resolver.


        :param parse_resolv_conf: The parse_resolv_conf of this Resolver.  # noqa: E501
        :type: bool
        """

        self._parse_resolv_conf = parse_resolv_conf

    @property
    def resolve_retries(self):
        """Gets the resolve_retries of this Resolver.  # noqa: E501


        :return: The resolve_retries of this Resolver.  # noqa: E501
        :rtype: int
        """
        return self._resolve_retries

    @resolve_retries.setter
    def resolve_retries(self, resolve_retries):
        """Sets the resolve_retries of this Resolver.


        :param resolve_retries: The resolve_retries of this Resolver.  # noqa: E501
        :type: int
        """

        self._resolve_retries = resolve_retries

    @property
    def timeout_resolve(self):
        """Gets the timeout_resolve of this Resolver.  # noqa: E501


        :return: The timeout_resolve of this Resolver.  # noqa: E501
        :rtype: int
        """
        return self._timeout_resolve

    @timeout_resolve.setter
    def timeout_resolve(self, timeout_resolve):
        """Sets the timeout_resolve of this Resolver.


        :param timeout_resolve: The timeout_resolve of this Resolver.  # noqa: E501
        :type: int
        """

        self._timeout_resolve = timeout_resolve

    @property
    def timeout_retry(self):
        """Gets the timeout_retry of this Resolver.  # noqa: E501


        :return: The timeout_retry of this Resolver.  # noqa: E501
        :rtype: int
        """
        return self._timeout_retry

    @timeout_retry.setter
    def timeout_retry(self, timeout_retry):
        """Sets the timeout_retry of this Resolver.


        :param timeout_retry: The timeout_retry of this Resolver.  # noqa: E501
        :type: int
        """

        self._timeout_retry = timeout_retry

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Resolver, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Resolver):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
