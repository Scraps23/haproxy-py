# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigStickTable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expire': 'int',
        'keylen': 'int',
        'nopurge': 'bool',
        'peers': 'str',
        'size': 'int',
        'store': 'str',
        'type': 'str'
    }

    attribute_map = {
        'expire': 'expire',
        'keylen': 'keylen',
        'nopurge': 'nopurge',
        'peers': 'peers',
        'size': 'size',
        'store': 'store',
        'type': 'type'
    }

    def __init__(self, expire=None, keylen=None, nopurge=None, peers=None, size=None, store=None, type=None):  # noqa: E501
        """ConfigStickTable - a model defined in Swagger"""  # noqa: E501
        self._expire = None
        self._keylen = None
        self._nopurge = None
        self._peers = None
        self._size = None
        self._store = None
        self._type = None
        self.discriminator = None
        if expire is not None:
            self.expire = expire
        if keylen is not None:
            self.keylen = keylen
        if nopurge is not None:
            self.nopurge = nopurge
        if peers is not None:
            self.peers = peers
        if size is not None:
            self.size = size
        if store is not None:
            self.store = store
        if type is not None:
            self.type = type

    @property
    def expire(self):
        """Gets the expire of this ConfigStickTable.  # noqa: E501


        :return: The expire of this ConfigStickTable.  # noqa: E501
        :rtype: int
        """
        return self._expire

    @expire.setter
    def expire(self, expire):
        """Sets the expire of this ConfigStickTable.


        :param expire: The expire of this ConfigStickTable.  # noqa: E501
        :type: int
        """

        self._expire = expire

    @property
    def keylen(self):
        """Gets the keylen of this ConfigStickTable.  # noqa: E501


        :return: The keylen of this ConfigStickTable.  # noqa: E501
        :rtype: int
        """
        return self._keylen

    @keylen.setter
    def keylen(self, keylen):
        """Sets the keylen of this ConfigStickTable.


        :param keylen: The keylen of this ConfigStickTable.  # noqa: E501
        :type: int
        """

        self._keylen = keylen

    @property
    def nopurge(self):
        """Gets the nopurge of this ConfigStickTable.  # noqa: E501


        :return: The nopurge of this ConfigStickTable.  # noqa: E501
        :rtype: bool
        """
        return self._nopurge

    @nopurge.setter
    def nopurge(self, nopurge):
        """Sets the nopurge of this ConfigStickTable.


        :param nopurge: The nopurge of this ConfigStickTable.  # noqa: E501
        :type: bool
        """

        self._nopurge = nopurge

    @property
    def peers(self):
        """Gets the peers of this ConfigStickTable.  # noqa: E501


        :return: The peers of this ConfigStickTable.  # noqa: E501
        :rtype: str
        """
        return self._peers

    @peers.setter
    def peers(self, peers):
        """Sets the peers of this ConfigStickTable.


        :param peers: The peers of this ConfigStickTable.  # noqa: E501
        :type: str
        """

        self._peers = peers

    @property
    def size(self):
        """Gets the size of this ConfigStickTable.  # noqa: E501


        :return: The size of this ConfigStickTable.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ConfigStickTable.


        :param size: The size of this ConfigStickTable.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def store(self):
        """Gets the store of this ConfigStickTable.  # noqa: E501


        :return: The store of this ConfigStickTable.  # noqa: E501
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this ConfigStickTable.


        :param store: The store of this ConfigStickTable.  # noqa: E501
        :type: str
        """

        self._store = store

    @property
    def type(self):
        """Gets the type of this ConfigStickTable.  # noqa: E501


        :return: The type of this ConfigStickTable.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConfigStickTable.


        :param type: The type of this ConfigStickTable.  # noqa: E501
        :type: str
        """
        allowed_values = ["ip", "ipv6", "integer", "string", "binary"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigStickTable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigStickTable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
