# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusterSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bootstrap_key': 'str',
        'cluster': 'ClusterControllerInformation',
        'mode': 'str',
        'status': 'str'
    }

    attribute_map = {
        'bootstrap_key': 'bootstrap_key',
        'cluster': 'cluster',
        'mode': 'mode',
        'status': 'status'
    }

    def __init__(self, bootstrap_key=None, cluster=None, mode=None, status=None):  # noqa: E501
        """ClusterSettings - a model defined in Swagger"""  # noqa: E501
        self._bootstrap_key = None
        self._cluster = None
        self._mode = None
        self._status = None
        self.discriminator = None
        if bootstrap_key is not None:
            self.bootstrap_key = bootstrap_key
        if cluster is not None:
            self.cluster = cluster
        if mode is not None:
            self.mode = mode
        if status is not None:
            self.status = status

    @property
    def bootstrap_key(self):
        """Gets the bootstrap_key of this ClusterSettings.  # noqa: E501


        :return: The bootstrap_key of this ClusterSettings.  # noqa: E501
        :rtype: str
        """
        return self._bootstrap_key

    @bootstrap_key.setter
    def bootstrap_key(self, bootstrap_key):
        """Sets the bootstrap_key of this ClusterSettings.


        :param bootstrap_key: The bootstrap_key of this ClusterSettings.  # noqa: E501
        :type: str
        """

        self._bootstrap_key = bootstrap_key

    @property
    def cluster(self):
        """Gets the cluster of this ClusterSettings.  # noqa: E501


        :return: The cluster of this ClusterSettings.  # noqa: E501
        :rtype: ClusterControllerInformation
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this ClusterSettings.


        :param cluster: The cluster of this ClusterSettings.  # noqa: E501
        :type: ClusterControllerInformation
        """

        self._cluster = cluster

    @property
    def mode(self):
        """Gets the mode of this ClusterSettings.  # noqa: E501


        :return: The mode of this ClusterSettings.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ClusterSettings.


        :param mode: The mode of this ClusterSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["single", "cluster"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def status(self):
        """Gets the status of this ClusterSettings.  # noqa: E501


        :return: The status of this ClusterSettings.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClusterSettings.


        :param status: The status of this ClusterSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "unreachable", "waiting_approval"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
