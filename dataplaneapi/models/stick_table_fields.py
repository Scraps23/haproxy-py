# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StickTableFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'period': 'int',
        'type': 'str'
    }

    attribute_map = {
        'field': 'field',
        'period': 'period',
        'type': 'type'
    }

    def __init__(self, field=None, period=None, type=None):  # noqa: E501
        """StickTableFields - a model defined in Swagger"""  # noqa: E501
        self._field = None
        self._period = None
        self._type = None
        self.discriminator = None
        if field is not None:
            self.field = field
        if period is not None:
            self.period = period
        if type is not None:
            self.type = type

    @property
    def field(self):
        """Gets the field of this StickTableFields.  # noqa: E501


        :return: The field of this StickTableFields.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this StickTableFields.


        :param field: The field of this StickTableFields.  # noqa: E501
        :type: str
        """
        allowed_values = ["server_id", "gpc0", "gpc0_rate", "gpc1", "gpc1_rate", "gpt0", "conn_cnt", "conn_cur", "conn_rate", "sess_cnt", "sess_rate", "http_req_cnt", "http_req_rate", "http_err_cnt", "http_err_rate", "bytes_in_cnt", "bytes_in_rate", "bytes_out_cnt", "bytes_out_rate"]  # noqa: E501
        if field not in allowed_values:
            raise ValueError(
                "Invalid value for `field` ({0}), must be one of {1}"  # noqa: E501
                .format(field, allowed_values)
            )

        self._field = field

    @property
    def period(self):
        """Gets the period of this StickTableFields.  # noqa: E501


        :return: The period of this StickTableFields.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this StickTableFields.


        :param period: The period of this StickTableFields.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def type(self):
        """Gets the type of this StickTableFields.  # noqa: E501


        :return: The type of this StickTableFields.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StickTableFields.


        :param type: The type of this StickTableFields.  # noqa: E501
        :type: str
        """
        allowed_values = ["rate", "counter"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StickTableFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StickTableFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
