# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NativeStatStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'act': 'int',
        'addr': 'str',
        'agent_code': 'int',
        'agent_desc': 'str',
        'agent_duration': 'int',
        'agent_fall': 'int',
        'agent_health': 'int',
        'agent_rise': 'int',
        'agent_status': 'str',
        'algo': 'str',
        'bck': 'int',
        'bin': 'int',
        'bout': 'int',
        'check_code': 'int',
        'check_desc': 'str',
        'check_duration': 'int',
        'check_fall': 'int',
        'check_health': 'int',
        'check_rise': 'int',
        'check_status': 'str',
        'chkdown': 'int',
        'chkfail': 'int',
        'cli_abrt': 'int',
        'comp_byp': 'int',
        'comp_in': 'int',
        'comp_out': 'int',
        'comp_rsp': 'int',
        'conn_rate': 'int',
        'conn_rate_max': 'int',
        'conn_tot': 'int',
        'cookie': 'str',
        'ctime': 'int',
        'dcon': 'int',
        'downtime': 'int',
        'dreq': 'int',
        'dresp': 'int',
        'dses': 'int',
        'econ': 'int',
        'ereq': 'int',
        'eresp': 'int',
        'hanafail': 'str',
        'hrsp_1xx': 'int',
        'hrsp_2xx': 'int',
        'hrsp_3xx': 'int',
        'hrsp_4xx': 'int',
        'hrsp_5xx': 'int',
        'hrsp_other': 'int',
        'iid': 'int',
        'intercepted': 'int',
        'lastchg': 'int',
        'lastsess': 'int',
        'lbtot': 'int',
        'mode': 'str',
        'pid': 'int',
        'qcur': 'int',
        'qlimit': 'int',
        'qmax': 'int',
        'qtime': 'int',
        'rate': 'int',
        'rate_lim': 'int',
        'rate_max': 'int',
        'req_rate': 'int',
        'req_rate_max': 'int',
        'req_tot': 'int',
        'rtime': 'int',
        'scur': 'int',
        'sid': 'int',
        'slim': 'int',
        'smax': 'int',
        'srv_abrt': 'int',
        'status': 'str',
        'stot': 'int',
        'throttle': 'int',
        'tracked': 'str',
        'ttime': 'int',
        'weight': 'int',
        'wredis': 'int',
        'wretr': 'int'
    }

    attribute_map = {
        'act': 'act',
        'addr': 'addr',
        'agent_code': 'agent_code',
        'agent_desc': 'agent_desc',
        'agent_duration': 'agent_duration',
        'agent_fall': 'agent_fall',
        'agent_health': 'agent_health',
        'agent_rise': 'agent_rise',
        'agent_status': 'agent_status',
        'algo': 'algo',
        'bck': 'bck',
        'bin': 'bin',
        'bout': 'bout',
        'check_code': 'check_code',
        'check_desc': 'check_desc',
        'check_duration': 'check_duration',
        'check_fall': 'check_fall',
        'check_health': 'check_health',
        'check_rise': 'check_rise',
        'check_status': 'check_status',
        'chkdown': 'chkdown',
        'chkfail': 'chkfail',
        'cli_abrt': 'cli_abrt',
        'comp_byp': 'comp_byp',
        'comp_in': 'comp_in',
        'comp_out': 'comp_out',
        'comp_rsp': 'comp_rsp',
        'conn_rate': 'conn_rate',
        'conn_rate_max': 'conn_rate_max',
        'conn_tot': 'conn_tot',
        'cookie': 'cookie',
        'ctime': 'ctime',
        'dcon': 'dcon',
        'downtime': 'downtime',
        'dreq': 'dreq',
        'dresp': 'dresp',
        'dses': 'dses',
        'econ': 'econ',
        'ereq': 'ereq',
        'eresp': 'eresp',
        'hanafail': 'hanafail',
        'hrsp_1xx': 'hrsp_1xx',
        'hrsp_2xx': 'hrsp_2xx',
        'hrsp_3xx': 'hrsp_3xx',
        'hrsp_4xx': 'hrsp_4xx',
        'hrsp_5xx': 'hrsp_5xx',
        'hrsp_other': 'hrsp_other',
        'iid': 'iid',
        'intercepted': 'intercepted',
        'lastchg': 'lastchg',
        'lastsess': 'lastsess',
        'lbtot': 'lbtot',
        'mode': 'mode',
        'pid': 'pid',
        'qcur': 'qcur',
        'qlimit': 'qlimit',
        'qmax': 'qmax',
        'qtime': 'qtime',
        'rate': 'rate',
        'rate_lim': 'rate_lim',
        'rate_max': 'rate_max',
        'req_rate': 'req_rate',
        'req_rate_max': 'req_rate_max',
        'req_tot': 'req_tot',
        'rtime': 'rtime',
        'scur': 'scur',
        'sid': 'sid',
        'slim': 'slim',
        'smax': 'smax',
        'srv_abrt': 'srv_abrt',
        'status': 'status',
        'stot': 'stot',
        'throttle': 'throttle',
        'tracked': 'tracked',
        'ttime': 'ttime',
        'weight': 'weight',
        'wredis': 'wredis',
        'wretr': 'wretr'
    }

    def __init__(self, act=None, addr=None, agent_code=None, agent_desc=None, agent_duration=None, agent_fall=None, agent_health=None, agent_rise=None, agent_status=None, algo=None, bck=None, bin=None, bout=None, check_code=None, check_desc=None, check_duration=None, check_fall=None, check_health=None, check_rise=None, check_status=None, chkdown=None, chkfail=None, cli_abrt=None, comp_byp=None, comp_in=None, comp_out=None, comp_rsp=None, conn_rate=None, conn_rate_max=None, conn_tot=None, cookie=None, ctime=None, dcon=None, downtime=None, dreq=None, dresp=None, dses=None, econ=None, ereq=None, eresp=None, hanafail=None, hrsp_1xx=None, hrsp_2xx=None, hrsp_3xx=None, hrsp_4xx=None, hrsp_5xx=None, hrsp_other=None, iid=None, intercepted=None, lastchg=None, lastsess=None, lbtot=None, mode=None, pid=None, qcur=None, qlimit=None, qmax=None, qtime=None, rate=None, rate_lim=None, rate_max=None, req_rate=None, req_rate_max=None, req_tot=None, rtime=None, scur=None, sid=None, slim=None, smax=None, srv_abrt=None, status=None, stot=None, throttle=None, tracked=None, ttime=None, weight=None, wredis=None, wretr=None):  # noqa: E501
        """NativeStatStats - a model defined in Swagger"""  # noqa: E501
        self._act = None
        self._addr = None
        self._agent_code = None
        self._agent_desc = None
        self._agent_duration = None
        self._agent_fall = None
        self._agent_health = None
        self._agent_rise = None
        self._agent_status = None
        self._algo = None
        self._bck = None
        self._bin = None
        self._bout = None
        self._check_code = None
        self._check_desc = None
        self._check_duration = None
        self._check_fall = None
        self._check_health = None
        self._check_rise = None
        self._check_status = None
        self._chkdown = None
        self._chkfail = None
        self._cli_abrt = None
        self._comp_byp = None
        self._comp_in = None
        self._comp_out = None
        self._comp_rsp = None
        self._conn_rate = None
        self._conn_rate_max = None
        self._conn_tot = None
        self._cookie = None
        self._ctime = None
        self._dcon = None
        self._downtime = None
        self._dreq = None
        self._dresp = None
        self._dses = None
        self._econ = None
        self._ereq = None
        self._eresp = None
        self._hanafail = None
        self._hrsp_1xx = None
        self._hrsp_2xx = None
        self._hrsp_3xx = None
        self._hrsp_4xx = None
        self._hrsp_5xx = None
        self._hrsp_other = None
        self._iid = None
        self._intercepted = None
        self._lastchg = None
        self._lastsess = None
        self._lbtot = None
        self._mode = None
        self._pid = None
        self._qcur = None
        self._qlimit = None
        self._qmax = None
        self._qtime = None
        self._rate = None
        self._rate_lim = None
        self._rate_max = None
        self._req_rate = None
        self._req_rate_max = None
        self._req_tot = None
        self._rtime = None
        self._scur = None
        self._sid = None
        self._slim = None
        self._smax = None
        self._srv_abrt = None
        self._status = None
        self._stot = None
        self._throttle = None
        self._tracked = None
        self._ttime = None
        self._weight = None
        self._wredis = None
        self._wretr = None
        self.discriminator = None
        if act is not None:
            self.act = act
        if addr is not None:
            self.addr = addr
        if agent_code is not None:
            self.agent_code = agent_code
        if agent_desc is not None:
            self.agent_desc = agent_desc
        if agent_duration is not None:
            self.agent_duration = agent_duration
        if agent_fall is not None:
            self.agent_fall = agent_fall
        if agent_health is not None:
            self.agent_health = agent_health
        if agent_rise is not None:
            self.agent_rise = agent_rise
        if agent_status is not None:
            self.agent_status = agent_status
        if algo is not None:
            self.algo = algo
        if bck is not None:
            self.bck = bck
        if bin is not None:
            self.bin = bin
        if bout is not None:
            self.bout = bout
        if check_code is not None:
            self.check_code = check_code
        if check_desc is not None:
            self.check_desc = check_desc
        if check_duration is not None:
            self.check_duration = check_duration
        if check_fall is not None:
            self.check_fall = check_fall
        if check_health is not None:
            self.check_health = check_health
        if check_rise is not None:
            self.check_rise = check_rise
        if check_status is not None:
            self.check_status = check_status
        if chkdown is not None:
            self.chkdown = chkdown
        if chkfail is not None:
            self.chkfail = chkfail
        if cli_abrt is not None:
            self.cli_abrt = cli_abrt
        if comp_byp is not None:
            self.comp_byp = comp_byp
        if comp_in is not None:
            self.comp_in = comp_in
        if comp_out is not None:
            self.comp_out = comp_out
        if comp_rsp is not None:
            self.comp_rsp = comp_rsp
        if conn_rate is not None:
            self.conn_rate = conn_rate
        if conn_rate_max is not None:
            self.conn_rate_max = conn_rate_max
        if conn_tot is not None:
            self.conn_tot = conn_tot
        if cookie is not None:
            self.cookie = cookie
        if ctime is not None:
            self.ctime = ctime
        if dcon is not None:
            self.dcon = dcon
        if downtime is not None:
            self.downtime = downtime
        if dreq is not None:
            self.dreq = dreq
        if dresp is not None:
            self.dresp = dresp
        if dses is not None:
            self.dses = dses
        if econ is not None:
            self.econ = econ
        if ereq is not None:
            self.ereq = ereq
        if eresp is not None:
            self.eresp = eresp
        if hanafail is not None:
            self.hanafail = hanafail
        if hrsp_1xx is not None:
            self.hrsp_1xx = hrsp_1xx
        if hrsp_2xx is not None:
            self.hrsp_2xx = hrsp_2xx
        if hrsp_3xx is not None:
            self.hrsp_3xx = hrsp_3xx
        if hrsp_4xx is not None:
            self.hrsp_4xx = hrsp_4xx
        if hrsp_5xx is not None:
            self.hrsp_5xx = hrsp_5xx
        if hrsp_other is not None:
            self.hrsp_other = hrsp_other
        if iid is not None:
            self.iid = iid
        if intercepted is not None:
            self.intercepted = intercepted
        if lastchg is not None:
            self.lastchg = lastchg
        if lastsess is not None:
            self.lastsess = lastsess
        if lbtot is not None:
            self.lbtot = lbtot
        if mode is not None:
            self.mode = mode
        if pid is not None:
            self.pid = pid
        if qcur is not None:
            self.qcur = qcur
        if qlimit is not None:
            self.qlimit = qlimit
        if qmax is not None:
            self.qmax = qmax
        if qtime is not None:
            self.qtime = qtime
        if rate is not None:
            self.rate = rate
        if rate_lim is not None:
            self.rate_lim = rate_lim
        if rate_max is not None:
            self.rate_max = rate_max
        if req_rate is not None:
            self.req_rate = req_rate
        if req_rate_max is not None:
            self.req_rate_max = req_rate_max
        if req_tot is not None:
            self.req_tot = req_tot
        if rtime is not None:
            self.rtime = rtime
        if scur is not None:
            self.scur = scur
        if sid is not None:
            self.sid = sid
        if slim is not None:
            self.slim = slim
        if smax is not None:
            self.smax = smax
        if srv_abrt is not None:
            self.srv_abrt = srv_abrt
        if status is not None:
            self.status = status
        if stot is not None:
            self.stot = stot
        if throttle is not None:
            self.throttle = throttle
        if tracked is not None:
            self.tracked = tracked
        if ttime is not None:
            self.ttime = ttime
        if weight is not None:
            self.weight = weight
        if wredis is not None:
            self.wredis = wredis
        if wretr is not None:
            self.wretr = wretr

    @property
    def act(self):
        """Gets the act of this NativeStatStats.  # noqa: E501


        :return: The act of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._act

    @act.setter
    def act(self, act):
        """Sets the act of this NativeStatStats.


        :param act: The act of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._act = act

    @property
    def addr(self):
        """Gets the addr of this NativeStatStats.  # noqa: E501


        :return: The addr of this NativeStatStats.  # noqa: E501
        :rtype: str
        """
        return self._addr

    @addr.setter
    def addr(self, addr):
        """Sets the addr of this NativeStatStats.


        :param addr: The addr of this NativeStatStats.  # noqa: E501
        :type: str
        """

        self._addr = addr

    @property
    def agent_code(self):
        """Gets the agent_code of this NativeStatStats.  # noqa: E501


        :return: The agent_code of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._agent_code

    @agent_code.setter
    def agent_code(self, agent_code):
        """Sets the agent_code of this NativeStatStats.


        :param agent_code: The agent_code of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._agent_code = agent_code

    @property
    def agent_desc(self):
        """Gets the agent_desc of this NativeStatStats.  # noqa: E501


        :return: The agent_desc of this NativeStatStats.  # noqa: E501
        :rtype: str
        """
        return self._agent_desc

    @agent_desc.setter
    def agent_desc(self, agent_desc):
        """Sets the agent_desc of this NativeStatStats.


        :param agent_desc: The agent_desc of this NativeStatStats.  # noqa: E501
        :type: str
        """

        self._agent_desc = agent_desc

    @property
    def agent_duration(self):
        """Gets the agent_duration of this NativeStatStats.  # noqa: E501


        :return: The agent_duration of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._agent_duration

    @agent_duration.setter
    def agent_duration(self, agent_duration):
        """Sets the agent_duration of this NativeStatStats.


        :param agent_duration: The agent_duration of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._agent_duration = agent_duration

    @property
    def agent_fall(self):
        """Gets the agent_fall of this NativeStatStats.  # noqa: E501


        :return: The agent_fall of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._agent_fall

    @agent_fall.setter
    def agent_fall(self, agent_fall):
        """Sets the agent_fall of this NativeStatStats.


        :param agent_fall: The agent_fall of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._agent_fall = agent_fall

    @property
    def agent_health(self):
        """Gets the agent_health of this NativeStatStats.  # noqa: E501


        :return: The agent_health of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._agent_health

    @agent_health.setter
    def agent_health(self, agent_health):
        """Sets the agent_health of this NativeStatStats.


        :param agent_health: The agent_health of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._agent_health = agent_health

    @property
    def agent_rise(self):
        """Gets the agent_rise of this NativeStatStats.  # noqa: E501


        :return: The agent_rise of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._agent_rise

    @agent_rise.setter
    def agent_rise(self, agent_rise):
        """Sets the agent_rise of this NativeStatStats.


        :param agent_rise: The agent_rise of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._agent_rise = agent_rise

    @property
    def agent_status(self):
        """Gets the agent_status of this NativeStatStats.  # noqa: E501


        :return: The agent_status of this NativeStatStats.  # noqa: E501
        :rtype: str
        """
        return self._agent_status

    @agent_status.setter
    def agent_status(self, agent_status):
        """Sets the agent_status of this NativeStatStats.


        :param agent_status: The agent_status of this NativeStatStats.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNK", "INI", "SOCKERR", "L4OK", "L4TOUT", "L4CON", "L7OK", "L7STS"]  # noqa: E501
        if agent_status not in allowed_values:
            raise ValueError(
                "Invalid value for `agent_status` ({0}), must be one of {1}"  # noqa: E501
                .format(agent_status, allowed_values)
            )

        self._agent_status = agent_status

    @property
    def algo(self):
        """Gets the algo of this NativeStatStats.  # noqa: E501


        :return: The algo of this NativeStatStats.  # noqa: E501
        :rtype: str
        """
        return self._algo

    @algo.setter
    def algo(self, algo):
        """Sets the algo of this NativeStatStats.


        :param algo: The algo of this NativeStatStats.  # noqa: E501
        :type: str
        """

        self._algo = algo

    @property
    def bck(self):
        """Gets the bck of this NativeStatStats.  # noqa: E501


        :return: The bck of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._bck

    @bck.setter
    def bck(self, bck):
        """Sets the bck of this NativeStatStats.


        :param bck: The bck of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._bck = bck

    @property
    def bin(self):
        """Gets the bin of this NativeStatStats.  # noqa: E501


        :return: The bin of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._bin

    @bin.setter
    def bin(self, bin):
        """Sets the bin of this NativeStatStats.


        :param bin: The bin of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._bin = bin

    @property
    def bout(self):
        """Gets the bout of this NativeStatStats.  # noqa: E501


        :return: The bout of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._bout

    @bout.setter
    def bout(self, bout):
        """Sets the bout of this NativeStatStats.


        :param bout: The bout of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._bout = bout

    @property
    def check_code(self):
        """Gets the check_code of this NativeStatStats.  # noqa: E501


        :return: The check_code of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._check_code

    @check_code.setter
    def check_code(self, check_code):
        """Sets the check_code of this NativeStatStats.


        :param check_code: The check_code of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._check_code = check_code

    @property
    def check_desc(self):
        """Gets the check_desc of this NativeStatStats.  # noqa: E501


        :return: The check_desc of this NativeStatStats.  # noqa: E501
        :rtype: str
        """
        return self._check_desc

    @check_desc.setter
    def check_desc(self, check_desc):
        """Sets the check_desc of this NativeStatStats.


        :param check_desc: The check_desc of this NativeStatStats.  # noqa: E501
        :type: str
        """

        self._check_desc = check_desc

    @property
    def check_duration(self):
        """Gets the check_duration of this NativeStatStats.  # noqa: E501


        :return: The check_duration of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._check_duration

    @check_duration.setter
    def check_duration(self, check_duration):
        """Sets the check_duration of this NativeStatStats.


        :param check_duration: The check_duration of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._check_duration = check_duration

    @property
    def check_fall(self):
        """Gets the check_fall of this NativeStatStats.  # noqa: E501


        :return: The check_fall of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._check_fall

    @check_fall.setter
    def check_fall(self, check_fall):
        """Sets the check_fall of this NativeStatStats.


        :param check_fall: The check_fall of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._check_fall = check_fall

    @property
    def check_health(self):
        """Gets the check_health of this NativeStatStats.  # noqa: E501


        :return: The check_health of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._check_health

    @check_health.setter
    def check_health(self, check_health):
        """Sets the check_health of this NativeStatStats.


        :param check_health: The check_health of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._check_health = check_health

    @property
    def check_rise(self):
        """Gets the check_rise of this NativeStatStats.  # noqa: E501


        :return: The check_rise of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._check_rise

    @check_rise.setter
    def check_rise(self, check_rise):
        """Sets the check_rise of this NativeStatStats.


        :param check_rise: The check_rise of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._check_rise = check_rise

    @property
    def check_status(self):
        """Gets the check_status of this NativeStatStats.  # noqa: E501


        :return: The check_status of this NativeStatStats.  # noqa: E501
        :rtype: str
        """
        return self._check_status

    @check_status.setter
    def check_status(self, check_status):
        """Sets the check_status of this NativeStatStats.


        :param check_status: The check_status of this NativeStatStats.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNK", "INI", "SOCKERR", "L4OK", "L4TOUT", "L4CON", "L6OK", "L6TOUT", "L6RSP", "L7OK", "L7OKC", "L7TOUT", "L7RSP", "L7STS"]  # noqa: E501
        if check_status not in allowed_values:
            raise ValueError(
                "Invalid value for `check_status` ({0}), must be one of {1}"  # noqa: E501
                .format(check_status, allowed_values)
            )

        self._check_status = check_status

    @property
    def chkdown(self):
        """Gets the chkdown of this NativeStatStats.  # noqa: E501


        :return: The chkdown of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._chkdown

    @chkdown.setter
    def chkdown(self, chkdown):
        """Sets the chkdown of this NativeStatStats.


        :param chkdown: The chkdown of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._chkdown = chkdown

    @property
    def chkfail(self):
        """Gets the chkfail of this NativeStatStats.  # noqa: E501


        :return: The chkfail of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._chkfail

    @chkfail.setter
    def chkfail(self, chkfail):
        """Sets the chkfail of this NativeStatStats.


        :param chkfail: The chkfail of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._chkfail = chkfail

    @property
    def cli_abrt(self):
        """Gets the cli_abrt of this NativeStatStats.  # noqa: E501


        :return: The cli_abrt of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._cli_abrt

    @cli_abrt.setter
    def cli_abrt(self, cli_abrt):
        """Sets the cli_abrt of this NativeStatStats.


        :param cli_abrt: The cli_abrt of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._cli_abrt = cli_abrt

    @property
    def comp_byp(self):
        """Gets the comp_byp of this NativeStatStats.  # noqa: E501


        :return: The comp_byp of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._comp_byp

    @comp_byp.setter
    def comp_byp(self, comp_byp):
        """Sets the comp_byp of this NativeStatStats.


        :param comp_byp: The comp_byp of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._comp_byp = comp_byp

    @property
    def comp_in(self):
        """Gets the comp_in of this NativeStatStats.  # noqa: E501


        :return: The comp_in of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._comp_in

    @comp_in.setter
    def comp_in(self, comp_in):
        """Sets the comp_in of this NativeStatStats.


        :param comp_in: The comp_in of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._comp_in = comp_in

    @property
    def comp_out(self):
        """Gets the comp_out of this NativeStatStats.  # noqa: E501


        :return: The comp_out of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._comp_out

    @comp_out.setter
    def comp_out(self, comp_out):
        """Sets the comp_out of this NativeStatStats.


        :param comp_out: The comp_out of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._comp_out = comp_out

    @property
    def comp_rsp(self):
        """Gets the comp_rsp of this NativeStatStats.  # noqa: E501


        :return: The comp_rsp of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._comp_rsp

    @comp_rsp.setter
    def comp_rsp(self, comp_rsp):
        """Sets the comp_rsp of this NativeStatStats.


        :param comp_rsp: The comp_rsp of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._comp_rsp = comp_rsp

    @property
    def conn_rate(self):
        """Gets the conn_rate of this NativeStatStats.  # noqa: E501


        :return: The conn_rate of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._conn_rate

    @conn_rate.setter
    def conn_rate(self, conn_rate):
        """Sets the conn_rate of this NativeStatStats.


        :param conn_rate: The conn_rate of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._conn_rate = conn_rate

    @property
    def conn_rate_max(self):
        """Gets the conn_rate_max of this NativeStatStats.  # noqa: E501


        :return: The conn_rate_max of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._conn_rate_max

    @conn_rate_max.setter
    def conn_rate_max(self, conn_rate_max):
        """Sets the conn_rate_max of this NativeStatStats.


        :param conn_rate_max: The conn_rate_max of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._conn_rate_max = conn_rate_max

    @property
    def conn_tot(self):
        """Gets the conn_tot of this NativeStatStats.  # noqa: E501


        :return: The conn_tot of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._conn_tot

    @conn_tot.setter
    def conn_tot(self, conn_tot):
        """Sets the conn_tot of this NativeStatStats.


        :param conn_tot: The conn_tot of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._conn_tot = conn_tot

    @property
    def cookie(self):
        """Gets the cookie of this NativeStatStats.  # noqa: E501


        :return: The cookie of this NativeStatStats.  # noqa: E501
        :rtype: str
        """
        return self._cookie

    @cookie.setter
    def cookie(self, cookie):
        """Sets the cookie of this NativeStatStats.


        :param cookie: The cookie of this NativeStatStats.  # noqa: E501
        :type: str
        """

        self._cookie = cookie

    @property
    def ctime(self):
        """Gets the ctime of this NativeStatStats.  # noqa: E501


        :return: The ctime of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._ctime

    @ctime.setter
    def ctime(self, ctime):
        """Sets the ctime of this NativeStatStats.


        :param ctime: The ctime of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._ctime = ctime

    @property
    def dcon(self):
        """Gets the dcon of this NativeStatStats.  # noqa: E501


        :return: The dcon of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._dcon

    @dcon.setter
    def dcon(self, dcon):
        """Sets the dcon of this NativeStatStats.


        :param dcon: The dcon of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._dcon = dcon

    @property
    def downtime(self):
        """Gets the downtime of this NativeStatStats.  # noqa: E501


        :return: The downtime of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._downtime

    @downtime.setter
    def downtime(self, downtime):
        """Sets the downtime of this NativeStatStats.


        :param downtime: The downtime of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._downtime = downtime

    @property
    def dreq(self):
        """Gets the dreq of this NativeStatStats.  # noqa: E501


        :return: The dreq of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._dreq

    @dreq.setter
    def dreq(self, dreq):
        """Sets the dreq of this NativeStatStats.


        :param dreq: The dreq of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._dreq = dreq

    @property
    def dresp(self):
        """Gets the dresp of this NativeStatStats.  # noqa: E501


        :return: The dresp of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._dresp

    @dresp.setter
    def dresp(self, dresp):
        """Sets the dresp of this NativeStatStats.


        :param dresp: The dresp of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._dresp = dresp

    @property
    def dses(self):
        """Gets the dses of this NativeStatStats.  # noqa: E501


        :return: The dses of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._dses

    @dses.setter
    def dses(self, dses):
        """Sets the dses of this NativeStatStats.


        :param dses: The dses of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._dses = dses

    @property
    def econ(self):
        """Gets the econ of this NativeStatStats.  # noqa: E501


        :return: The econ of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._econ

    @econ.setter
    def econ(self, econ):
        """Sets the econ of this NativeStatStats.


        :param econ: The econ of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._econ = econ

    @property
    def ereq(self):
        """Gets the ereq of this NativeStatStats.  # noqa: E501


        :return: The ereq of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._ereq

    @ereq.setter
    def ereq(self, ereq):
        """Sets the ereq of this NativeStatStats.


        :param ereq: The ereq of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._ereq = ereq

    @property
    def eresp(self):
        """Gets the eresp of this NativeStatStats.  # noqa: E501


        :return: The eresp of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._eresp

    @eresp.setter
    def eresp(self, eresp):
        """Sets the eresp of this NativeStatStats.


        :param eresp: The eresp of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._eresp = eresp

    @property
    def hanafail(self):
        """Gets the hanafail of this NativeStatStats.  # noqa: E501


        :return: The hanafail of this NativeStatStats.  # noqa: E501
        :rtype: str
        """
        return self._hanafail

    @hanafail.setter
    def hanafail(self, hanafail):
        """Sets the hanafail of this NativeStatStats.


        :param hanafail: The hanafail of this NativeStatStats.  # noqa: E501
        :type: str
        """

        self._hanafail = hanafail

    @property
    def hrsp_1xx(self):
        """Gets the hrsp_1xx of this NativeStatStats.  # noqa: E501


        :return: The hrsp_1xx of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._hrsp_1xx

    @hrsp_1xx.setter
    def hrsp_1xx(self, hrsp_1xx):
        """Sets the hrsp_1xx of this NativeStatStats.


        :param hrsp_1xx: The hrsp_1xx of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._hrsp_1xx = hrsp_1xx

    @property
    def hrsp_2xx(self):
        """Gets the hrsp_2xx of this NativeStatStats.  # noqa: E501


        :return: The hrsp_2xx of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._hrsp_2xx

    @hrsp_2xx.setter
    def hrsp_2xx(self, hrsp_2xx):
        """Sets the hrsp_2xx of this NativeStatStats.


        :param hrsp_2xx: The hrsp_2xx of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._hrsp_2xx = hrsp_2xx

    @property
    def hrsp_3xx(self):
        """Gets the hrsp_3xx of this NativeStatStats.  # noqa: E501


        :return: The hrsp_3xx of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._hrsp_3xx

    @hrsp_3xx.setter
    def hrsp_3xx(self, hrsp_3xx):
        """Sets the hrsp_3xx of this NativeStatStats.


        :param hrsp_3xx: The hrsp_3xx of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._hrsp_3xx = hrsp_3xx

    @property
    def hrsp_4xx(self):
        """Gets the hrsp_4xx of this NativeStatStats.  # noqa: E501


        :return: The hrsp_4xx of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._hrsp_4xx

    @hrsp_4xx.setter
    def hrsp_4xx(self, hrsp_4xx):
        """Sets the hrsp_4xx of this NativeStatStats.


        :param hrsp_4xx: The hrsp_4xx of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._hrsp_4xx = hrsp_4xx

    @property
    def hrsp_5xx(self):
        """Gets the hrsp_5xx of this NativeStatStats.  # noqa: E501


        :return: The hrsp_5xx of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._hrsp_5xx

    @hrsp_5xx.setter
    def hrsp_5xx(self, hrsp_5xx):
        """Sets the hrsp_5xx of this NativeStatStats.


        :param hrsp_5xx: The hrsp_5xx of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._hrsp_5xx = hrsp_5xx

    @property
    def hrsp_other(self):
        """Gets the hrsp_other of this NativeStatStats.  # noqa: E501


        :return: The hrsp_other of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._hrsp_other

    @hrsp_other.setter
    def hrsp_other(self, hrsp_other):
        """Sets the hrsp_other of this NativeStatStats.


        :param hrsp_other: The hrsp_other of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._hrsp_other = hrsp_other

    @property
    def iid(self):
        """Gets the iid of this NativeStatStats.  # noqa: E501


        :return: The iid of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._iid

    @iid.setter
    def iid(self, iid):
        """Sets the iid of this NativeStatStats.


        :param iid: The iid of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._iid = iid

    @property
    def intercepted(self):
        """Gets the intercepted of this NativeStatStats.  # noqa: E501


        :return: The intercepted of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._intercepted

    @intercepted.setter
    def intercepted(self, intercepted):
        """Sets the intercepted of this NativeStatStats.


        :param intercepted: The intercepted of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._intercepted = intercepted

    @property
    def lastchg(self):
        """Gets the lastchg of this NativeStatStats.  # noqa: E501


        :return: The lastchg of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._lastchg

    @lastchg.setter
    def lastchg(self, lastchg):
        """Sets the lastchg of this NativeStatStats.


        :param lastchg: The lastchg of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._lastchg = lastchg

    @property
    def lastsess(self):
        """Gets the lastsess of this NativeStatStats.  # noqa: E501


        :return: The lastsess of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._lastsess

    @lastsess.setter
    def lastsess(self, lastsess):
        """Sets the lastsess of this NativeStatStats.


        :param lastsess: The lastsess of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._lastsess = lastsess

    @property
    def lbtot(self):
        """Gets the lbtot of this NativeStatStats.  # noqa: E501


        :return: The lbtot of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._lbtot

    @lbtot.setter
    def lbtot(self, lbtot):
        """Sets the lbtot of this NativeStatStats.


        :param lbtot: The lbtot of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._lbtot = lbtot

    @property
    def mode(self):
        """Gets the mode of this NativeStatStats.  # noqa: E501


        :return: The mode of this NativeStatStats.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this NativeStatStats.


        :param mode: The mode of this NativeStatStats.  # noqa: E501
        :type: str
        """
        allowed_values = ["tcp", "http", "health", "unknown"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def pid(self):
        """Gets the pid of this NativeStatStats.  # noqa: E501


        :return: The pid of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this NativeStatStats.


        :param pid: The pid of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def qcur(self):
        """Gets the qcur of this NativeStatStats.  # noqa: E501


        :return: The qcur of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._qcur

    @qcur.setter
    def qcur(self, qcur):
        """Sets the qcur of this NativeStatStats.


        :param qcur: The qcur of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._qcur = qcur

    @property
    def qlimit(self):
        """Gets the qlimit of this NativeStatStats.  # noqa: E501


        :return: The qlimit of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._qlimit

    @qlimit.setter
    def qlimit(self, qlimit):
        """Sets the qlimit of this NativeStatStats.


        :param qlimit: The qlimit of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._qlimit = qlimit

    @property
    def qmax(self):
        """Gets the qmax of this NativeStatStats.  # noqa: E501


        :return: The qmax of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._qmax

    @qmax.setter
    def qmax(self, qmax):
        """Sets the qmax of this NativeStatStats.


        :param qmax: The qmax of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._qmax = qmax

    @property
    def qtime(self):
        """Gets the qtime of this NativeStatStats.  # noqa: E501


        :return: The qtime of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._qtime

    @qtime.setter
    def qtime(self, qtime):
        """Sets the qtime of this NativeStatStats.


        :param qtime: The qtime of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._qtime = qtime

    @property
    def rate(self):
        """Gets the rate of this NativeStatStats.  # noqa: E501


        :return: The rate of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this NativeStatStats.


        :param rate: The rate of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._rate = rate

    @property
    def rate_lim(self):
        """Gets the rate_lim of this NativeStatStats.  # noqa: E501


        :return: The rate_lim of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._rate_lim

    @rate_lim.setter
    def rate_lim(self, rate_lim):
        """Sets the rate_lim of this NativeStatStats.


        :param rate_lim: The rate_lim of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._rate_lim = rate_lim

    @property
    def rate_max(self):
        """Gets the rate_max of this NativeStatStats.  # noqa: E501


        :return: The rate_max of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._rate_max

    @rate_max.setter
    def rate_max(self, rate_max):
        """Sets the rate_max of this NativeStatStats.


        :param rate_max: The rate_max of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._rate_max = rate_max

    @property
    def req_rate(self):
        """Gets the req_rate of this NativeStatStats.  # noqa: E501


        :return: The req_rate of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._req_rate

    @req_rate.setter
    def req_rate(self, req_rate):
        """Sets the req_rate of this NativeStatStats.


        :param req_rate: The req_rate of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._req_rate = req_rate

    @property
    def req_rate_max(self):
        """Gets the req_rate_max of this NativeStatStats.  # noqa: E501


        :return: The req_rate_max of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._req_rate_max

    @req_rate_max.setter
    def req_rate_max(self, req_rate_max):
        """Sets the req_rate_max of this NativeStatStats.


        :param req_rate_max: The req_rate_max of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._req_rate_max = req_rate_max

    @property
    def req_tot(self):
        """Gets the req_tot of this NativeStatStats.  # noqa: E501


        :return: The req_tot of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._req_tot

    @req_tot.setter
    def req_tot(self, req_tot):
        """Sets the req_tot of this NativeStatStats.


        :param req_tot: The req_tot of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._req_tot = req_tot

    @property
    def rtime(self):
        """Gets the rtime of this NativeStatStats.  # noqa: E501


        :return: The rtime of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._rtime

    @rtime.setter
    def rtime(self, rtime):
        """Sets the rtime of this NativeStatStats.


        :param rtime: The rtime of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._rtime = rtime

    @property
    def scur(self):
        """Gets the scur of this NativeStatStats.  # noqa: E501


        :return: The scur of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._scur

    @scur.setter
    def scur(self, scur):
        """Sets the scur of this NativeStatStats.


        :param scur: The scur of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._scur = scur

    @property
    def sid(self):
        """Gets the sid of this NativeStatStats.  # noqa: E501


        :return: The sid of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this NativeStatStats.


        :param sid: The sid of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._sid = sid

    @property
    def slim(self):
        """Gets the slim of this NativeStatStats.  # noqa: E501


        :return: The slim of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._slim

    @slim.setter
    def slim(self, slim):
        """Sets the slim of this NativeStatStats.


        :param slim: The slim of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._slim = slim

    @property
    def smax(self):
        """Gets the smax of this NativeStatStats.  # noqa: E501


        :return: The smax of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._smax

    @smax.setter
    def smax(self, smax):
        """Sets the smax of this NativeStatStats.


        :param smax: The smax of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._smax = smax

    @property
    def srv_abrt(self):
        """Gets the srv_abrt of this NativeStatStats.  # noqa: E501


        :return: The srv_abrt of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._srv_abrt

    @srv_abrt.setter
    def srv_abrt(self, srv_abrt):
        """Sets the srv_abrt of this NativeStatStats.


        :param srv_abrt: The srv_abrt of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._srv_abrt = srv_abrt

    @property
    def status(self):
        """Gets the status of this NativeStatStats.  # noqa: E501


        :return: The status of this NativeStatStats.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NativeStatStats.


        :param status: The status of this NativeStatStats.  # noqa: E501
        :type: str
        """
        allowed_values = ["UP", "DOWN", "NOLB", "MAINT", "no check"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def stot(self):
        """Gets the stot of this NativeStatStats.  # noqa: E501


        :return: The stot of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._stot

    @stot.setter
    def stot(self, stot):
        """Sets the stot of this NativeStatStats.


        :param stot: The stot of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._stot = stot

    @property
    def throttle(self):
        """Gets the throttle of this NativeStatStats.  # noqa: E501


        :return: The throttle of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._throttle

    @throttle.setter
    def throttle(self, throttle):
        """Sets the throttle of this NativeStatStats.


        :param throttle: The throttle of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._throttle = throttle

    @property
    def tracked(self):
        """Gets the tracked of this NativeStatStats.  # noqa: E501


        :return: The tracked of this NativeStatStats.  # noqa: E501
        :rtype: str
        """
        return self._tracked

    @tracked.setter
    def tracked(self, tracked):
        """Sets the tracked of this NativeStatStats.


        :param tracked: The tracked of this NativeStatStats.  # noqa: E501
        :type: str
        """

        self._tracked = tracked

    @property
    def ttime(self):
        """Gets the ttime of this NativeStatStats.  # noqa: E501


        :return: The ttime of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._ttime

    @ttime.setter
    def ttime(self, ttime):
        """Sets the ttime of this NativeStatStats.


        :param ttime: The ttime of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._ttime = ttime

    @property
    def weight(self):
        """Gets the weight of this NativeStatStats.  # noqa: E501


        :return: The weight of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this NativeStatStats.


        :param weight: The weight of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def wredis(self):
        """Gets the wredis of this NativeStatStats.  # noqa: E501


        :return: The wredis of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._wredis

    @wredis.setter
    def wredis(self, wredis):
        """Sets the wredis of this NativeStatStats.


        :param wredis: The wredis of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._wredis = wredis

    @property
    def wretr(self):
        """Gets the wretr of this NativeStatStats.  # noqa: E501


        :return: The wretr of this NativeStatStats.  # noqa: E501
        :rtype: int
        """
        return self._wretr

    @wretr.setter
    def wretr(self, wretr):
        """Sets the wretr of this NativeStatStats.


        :param wretr: The wretr of this NativeStatStats.  # noqa: E501
        :type: int
        """

        self._wretr = wretr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NativeStatStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NativeStatStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
