# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dataplaneapi.api_client import ApiClient


class StickTableApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_stick_table(self, name, process, **kwargs):  # noqa: E501
        """Return Stick Table  # noqa: E501

        Returns one stick table from runtime.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stick_table(name, process, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Stick table name (required)
        :param int process: Process number if master-worker mode, if not only first process is returned (required)
        :return: StickTable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_stick_table_with_http_info(name, process, **kwargs)  # noqa: E501
        else:
            (data) = self.get_stick_table_with_http_info(name, process, **kwargs)  # noqa: E501
            return data

    def get_stick_table_with_http_info(self, name, process, **kwargs):  # noqa: E501
        """Return Stick Table  # noqa: E501

        Returns one stick table from runtime.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stick_table_with_http_info(name, process, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Stick table name (required)
        :param int process: Process number if master-worker mode, if not only first process is returned (required)
        :return: StickTable
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'process']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stick_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_stick_table`")  # noqa: E501
        # verify the required parameter 'process' is set
        if ('process' not in params or
                params['process'] is None):
            raise ValueError("Missing the required parameter `process` when calling `get_stick_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'process' in params:
            query_params.append(('process', params['process']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/runtime/stick_tables/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StickTable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_stick_table_entries(self, stick_table, process, **kwargs):  # noqa: E501
        """Return Stick Table Entries  # noqa: E501

        Returns an array of all entries in a given stick tables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stick_table_entries(stick_table, process, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stick_table: Stick table name (required)
        :param int process: Process number if master-worker mode, if not only first process is returned (required)
        :param str filter: A list of filters in format data.<type> <operator> <value> separated by comma
        :param str key: Key which we want the entries for
        :param int count: Max number of entries to be returned for pagination
        :param int offset: Offset which indicates how many items we skip in pagination
        :return: StickTableEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_stick_table_entries_with_http_info(stick_table, process, **kwargs)  # noqa: E501
        else:
            (data) = self.get_stick_table_entries_with_http_info(stick_table, process, **kwargs)  # noqa: E501
            return data

    def get_stick_table_entries_with_http_info(self, stick_table, process, **kwargs):  # noqa: E501
        """Return Stick Table Entries  # noqa: E501

        Returns an array of all entries in a given stick tables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stick_table_entries_with_http_info(stick_table, process, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stick_table: Stick table name (required)
        :param int process: Process number if master-worker mode, if not only first process is returned (required)
        :param str filter: A list of filters in format data.<type> <operator> <value> separated by comma
        :param str key: Key which we want the entries for
        :param int count: Max number of entries to be returned for pagination
        :param int offset: Offset which indicates how many items we skip in pagination
        :return: StickTableEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stick_table', 'process', 'filter', 'key', 'count', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stick_table_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stick_table' is set
        if ('stick_table' not in params or
                params['stick_table'] is None):
            raise ValueError("Missing the required parameter `stick_table` when calling `get_stick_table_entries`")  # noqa: E501
        # verify the required parameter 'process' is set
        if ('process' not in params or
                params['process'] is None):
            raise ValueError("Missing the required parameter `process` when calling `get_stick_table_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'stick_table' in params:
            query_params.append(('stick_table', params['stick_table']))  # noqa: E501
        if 'process' in params:
            query_params.append(('process', params['process']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/runtime/stick_table_entries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StickTableEntries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_stick_tables(self, **kwargs):  # noqa: E501
        """Return Stick Tables  # noqa: E501

        Returns an array of all stick tables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stick_tables(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int process: Process number if master-worker mode, if not all processes are returned
        :return: StickTables
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_stick_tables_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_stick_tables_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_stick_tables_with_http_info(self, **kwargs):  # noqa: E501
        """Return Stick Tables  # noqa: E501

        Returns an array of all stick tables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stick_tables_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int process: Process number if master-worker mode, if not all processes are returned
        :return: StickTables
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stick_tables" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'process' in params:
            query_params.append(('process', params['process']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/runtime/stick_tables', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StickTables',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_stick_table_entries(self, stick_table, process, **kwargs):  # noqa: E501
        """Set Entry to Stick Table  # noqa: E501

        Create or update a stick-table entry in the table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_stick_table_entries(stick_table, process, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stick_table: Stick table name (required)
        :param int process: Process number if master-worker mode, if not only first process is returned (required)
        :param RuntimeStickTableEntriesBody body: Stick table entry
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_stick_table_entries_with_http_info(stick_table, process, **kwargs)  # noqa: E501
        else:
            (data) = self.set_stick_table_entries_with_http_info(stick_table, process, **kwargs)  # noqa: E501
            return data

    def set_stick_table_entries_with_http_info(self, stick_table, process, **kwargs):  # noqa: E501
        """Set Entry to Stick Table  # noqa: E501

        Create or update a stick-table entry in the table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_stick_table_entries_with_http_info(stick_table, process, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stick_table: Stick table name (required)
        :param int process: Process number if master-worker mode, if not only first process is returned (required)
        :param RuntimeStickTableEntriesBody body: Stick table entry
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stick_table', 'process', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_stick_table_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stick_table' is set
        if ('stick_table' not in params or
                params['stick_table'] is None):
            raise ValueError("Missing the required parameter `stick_table` when calling `set_stick_table_entries`")  # noqa: E501
        # verify the required parameter 'process' is set
        if ('process' not in params or
                params['process'] is None):
            raise ValueError("Missing the required parameter `process` when calling `set_stick_table_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'stick_table' in params:
            query_params.append(('stick_table', params['stick_table']))  # noqa: E501
        if 'process' in params:
            query_params.append(('process', params['process']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/runtime/stick_table_entries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
