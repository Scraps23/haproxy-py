# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dataplaneapi.api_client import ApiClient


class ClusterApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_cluster(self, **kwargs):  # noqa: E501
        """Delete cluster settings  # noqa: E501

        Delete cluster settings and move the node back to single mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cluster(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str configuration: In case of moving to single mode do we keep or clean configuration
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cluster_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_cluster_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_cluster_with_http_info(self, **kwargs):  # noqa: E501
        """Delete cluster settings  # noqa: E501

        Delete cluster settings and move the node back to single mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cluster_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str configuration: In case of moving to single mode do we keep or clean configuration
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['configuration', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cluster" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_cluster(self, body, **kwargs):  # noqa: E501
        """Edit cluster settings  # noqa: E501

        Edit cluster settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_cluster(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClusterSettings body: (required)
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: ClusterSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_cluster_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_cluster_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def edit_cluster_with_http_info(self, body, **kwargs):  # noqa: E501
        """Edit cluster settings  # noqa: E501

        Edit cluster settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_cluster_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClusterSettings body: (required)
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: ClusterSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster(self, **kwargs):  # noqa: E501
        """Return cluster data  # noqa: E501

        Returns cluster data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ClusterSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cluster_with_http_info(self, **kwargs):  # noqa: E501
        """Return cluster data  # noqa: E501

        Returns cluster data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ClusterSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def initiate_certificate_refresh(self, **kwargs):  # noqa: E501
        """Initiates a certificate refresh  # noqa: E501

        Initiates a certificate refresh  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initiate_certificate_refresh(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.initiate_certificate_refresh_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.initiate_certificate_refresh_with_http_info(**kwargs)  # noqa: E501
            return data

    def initiate_certificate_refresh_with_http_info(self, **kwargs):  # noqa: E501
        """Initiates a certificate refresh  # noqa: E501

        Initiates a certificate refresh  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initiate_certificate_refresh_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method initiate_certificate_refresh" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/certificate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cluster(self, body, **kwargs):  # noqa: E501
        """Post cluster settings  # noqa: E501

        Post cluster settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cluster(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClusterSettings body: (required)
        :param str configuration: In case of moving to single mode do we keep or clean configuration
        :param str advertised_address: Force the advertised address when joining a cluster
        :param int advertised_port: Force the advertised port when joining a cluster
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: ClusterSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cluster_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cluster_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_cluster_with_http_info(self, body, **kwargs):  # noqa: E501
        """Post cluster settings  # noqa: E501

        Post cluster settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cluster_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClusterSettings body: (required)
        :param str configuration: In case of moving to single mode do we keep or clean configuration
        :param str advertised_address: Force the advertised address when joining a cluster
        :param int advertised_port: Force the advertised port when joining a cluster
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: ClusterSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'configuration', 'advertised_address', 'advertised_port', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501
        if 'advertised_address' in params:
            query_params.append(('advertised_address', params['advertised_address']))  # noqa: E501
        if 'advertised_port' in params:
            query_params.append(('advertised_port', params['advertised_port']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
