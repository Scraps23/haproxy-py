# coding: utf-8

"""
    HAProxy Data Plane API

    API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs.   # noqa: E501

    OpenAPI spec version: 2.7
    Contact: support@haproxy.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dataplaneapi.api_client import ApiClient


class SpoeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_spoe(self, **kwargs):  # noqa: E501
        """Creates SPOE file with its entries  # noqa: E501

        Creates SPOE file with its entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_spoe(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_upload:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_spoe_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_spoe_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_spoe_with_http_info(self, **kwargs):  # noqa: E501
        """Creates SPOE file with its entries  # noqa: E501

        Creates SPOE file with its entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_spoe_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_upload:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_upload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_spoe" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file_upload' in params:
            local_var_files['file_upload'] = params['file_upload']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_spoe_agent(self, body, spoe, scope, **kwargs):  # noqa: E501
        """Add a new spoe agent to scope  # noqa: E501

        Adds a new spoe agent to the spoe scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_spoe_agent(body, spoe, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpoeAgent body: (required)
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: SpoeAgent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_spoe_agent_with_http_info(body, spoe, scope, **kwargs)  # noqa: E501
        else:
            (data) = self.create_spoe_agent_with_http_info(body, spoe, scope, **kwargs)  # noqa: E501
            return data

    def create_spoe_agent_with_http_info(self, body, spoe, scope, **kwargs):  # noqa: E501
        """Add a new spoe agent to scope  # noqa: E501

        Adds a new spoe agent to the spoe scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_spoe_agent_with_http_info(body, spoe, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpoeAgent body: (required)
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: SpoeAgent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'spoe', 'scope', 'transaction_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_spoe_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_spoe_agent`")  # noqa: E501
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `create_spoe_agent`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `create_spoe_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_agents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpoeAgent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_spoe_group(self, body, spoe, scope, **kwargs):  # noqa: E501
        """Add a new SPOE groups  # noqa: E501

        Adds a new SPOE groups to the SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_spoe_group(body, spoe, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpoeGroup body: (required)
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: SpoeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_spoe_group_with_http_info(body, spoe, scope, **kwargs)  # noqa: E501
        else:
            (data) = self.create_spoe_group_with_http_info(body, spoe, scope, **kwargs)  # noqa: E501
            return data

    def create_spoe_group_with_http_info(self, body, spoe, scope, **kwargs):  # noqa: E501
        """Add a new SPOE groups  # noqa: E501

        Adds a new SPOE groups to the SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_spoe_group_with_http_info(body, spoe, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpoeGroup body: (required)
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: SpoeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'spoe', 'scope', 'transaction_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_spoe_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_spoe_group`")  # noqa: E501
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `create_spoe_group`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `create_spoe_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpoeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_spoe_message(self, body, spoe, scope, **kwargs):  # noqa: E501
        """Add a new spoe message to scope  # noqa: E501

        Adds a new spoe message to the spoe scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_spoe_message(body, spoe, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpoeMessage body: (required)
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: SpoeMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_spoe_message_with_http_info(body, spoe, scope, **kwargs)  # noqa: E501
        else:
            (data) = self.create_spoe_message_with_http_info(body, spoe, scope, **kwargs)  # noqa: E501
            return data

    def create_spoe_message_with_http_info(self, body, spoe, scope, **kwargs):  # noqa: E501
        """Add a new spoe message to scope  # noqa: E501

        Adds a new spoe message to the spoe scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_spoe_message_with_http_info(body, spoe, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpoeMessage body: (required)
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: SpoeMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'spoe', 'scope', 'transaction_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_spoe_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_spoe_message`")  # noqa: E501
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `create_spoe_message`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `create_spoe_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_messages', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpoeMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_spoe_scope(self, body, spoe, **kwargs):  # noqa: E501
        """Add a new spoe scope  # noqa: E501

        Adds a new spoe scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_spoe_scope(body, spoe, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str spoe: Spoe file name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: SpoeScope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_spoe_scope_with_http_info(body, spoe, **kwargs)  # noqa: E501
        else:
            (data) = self.create_spoe_scope_with_http_info(body, spoe, **kwargs)  # noqa: E501
            return data

    def create_spoe_scope_with_http_info(self, body, spoe, **kwargs):  # noqa: E501
        """Add a new spoe scope  # noqa: E501

        Adds a new spoe scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_spoe_scope_with_http_info(body, spoe, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: (required)
        :param str spoe: Spoe file name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: SpoeScope
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'spoe', 'transaction_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_spoe_scope" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_spoe_scope`")  # noqa: E501
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `create_spoe_scope`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_scopes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpoeScope',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_spoe_agent(self, spoe, scope, name, **kwargs):  # noqa: E501
        """Delete a SPOE agent  # noqa: E501

        Deletes a SPOE agent from the configuration in one SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_spoe_agent(spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe agent name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_spoe_agent_with_http_info(spoe, scope, name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_spoe_agent_with_http_info(spoe, scope, name, **kwargs)  # noqa: E501
            return data

    def delete_spoe_agent_with_http_info(self, spoe, scope, name, **kwargs):  # noqa: E501
        """Delete a SPOE agent  # noqa: E501

        Deletes a SPOE agent from the configuration in one SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_spoe_agent_with_http_info(spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe agent name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['spoe', 'scope', 'name', 'transaction_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_spoe_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `delete_spoe_agent`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `delete_spoe_agent`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_spoe_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_agents/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_spoe_file(self, name, **kwargs):  # noqa: E501
        """Delete SPOE file  # noqa: E501

        Deletes SPOE file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_spoe_file(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: SPOE file name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_spoe_file_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_spoe_file_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_spoe_file_with_http_info(self, name, **kwargs):  # noqa: E501
        """Delete SPOE file  # noqa: E501

        Deletes SPOE file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_spoe_file_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: SPOE file name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_spoe_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_spoe_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_files/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_spoe_group(self, spoe, scope, name, **kwargs):  # noqa: E501
        """Delete a SPOE groups  # noqa: E501

        Deletes a SPOE groups from the one SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_spoe_group(spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe group name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_spoe_group_with_http_info(spoe, scope, name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_spoe_group_with_http_info(spoe, scope, name, **kwargs)  # noqa: E501
            return data

    def delete_spoe_group_with_http_info(self, spoe, scope, name, **kwargs):  # noqa: E501
        """Delete a SPOE groups  # noqa: E501

        Deletes a SPOE groups from the one SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_spoe_group_with_http_info(spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe group name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['spoe', 'scope', 'name', 'transaction_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_spoe_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `delete_spoe_group`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `delete_spoe_group`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_spoe_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_groups/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_spoe_message(self, spoe, scope, name, **kwargs):  # noqa: E501
        """Delete a spoe message  # noqa: E501

        Deletes a spoe message from the SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_spoe_message(spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe message name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_spoe_message_with_http_info(spoe, scope, name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_spoe_message_with_http_info(spoe, scope, name, **kwargs)  # noqa: E501
            return data

    def delete_spoe_message_with_http_info(self, spoe, scope, name, **kwargs):  # noqa: E501
        """Delete a spoe message  # noqa: E501

        Deletes a spoe message from the SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_spoe_message_with_http_info(spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe message name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['spoe', 'scope', 'name', 'transaction_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_spoe_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `delete_spoe_message`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `delete_spoe_message`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_spoe_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_messages/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_spoe_scope(self, spoe, name, **kwargs):  # noqa: E501
        """Delete a SPOE scope  # noqa: E501

        Deletes a SPOE scope from the configuration file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_spoe_scope(spoe, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str name: Spoe scope name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_spoe_scope_with_http_info(spoe, name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_spoe_scope_with_http_info(spoe, name, **kwargs)  # noqa: E501
            return data

    def delete_spoe_scope_with_http_info(self, spoe, name, **kwargs):  # noqa: E501
        """Delete a SPOE scope  # noqa: E501

        Deletes a SPOE scope from the configuration file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_spoe_scope_with_http_info(spoe, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str name: Spoe scope name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['spoe', 'name', 'transaction_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_spoe_scope" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `delete_spoe_scope`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_spoe_scope`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_scopes/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_spoe_files(self, **kwargs):  # noqa: E501
        """Return all available SPOE files  # noqa: E501

        Returns all available SPOE files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_spoe_files(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SpoeFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_spoe_files_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_spoe_files_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_spoe_files_with_http_info(self, **kwargs):  # noqa: E501
        """Return all available SPOE files  # noqa: E501

        Returns all available SPOE files.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_spoe_files_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SpoeFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_spoe_files" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpoeFiles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_one_spoe_file(self, name, **kwargs):  # noqa: E501
        """Return one SPOE file  # noqa: E501

        Returns one SPOE file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_one_spoe_file(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: SPOE file name (required)
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_one_spoe_file_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_one_spoe_file_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_one_spoe_file_with_http_info(self, name, **kwargs):  # noqa: E501
        """Return one SPOE file  # noqa: E501

        Returns one SPOE file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_one_spoe_file_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: SPOE file name (required)
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_one_spoe_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_one_spoe_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_files/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20084',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_spoe_agent(self, spoe, scope, name, **kwargs):  # noqa: E501
        """Return a spoe agent  # noqa: E501

        Returns one spoe agent configuration in one SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_agent(spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe agent name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_spoe_agent_with_http_info(spoe, scope, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_spoe_agent_with_http_info(spoe, scope, name, **kwargs)  # noqa: E501
            return data

    def get_spoe_agent_with_http_info(self, spoe, scope, name, **kwargs):  # noqa: E501
        """Return a spoe agent  # noqa: E501

        Returns one spoe agent configuration in one SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_agent_with_http_info(spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe agent name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['spoe', 'scope', 'name', 'transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spoe_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `get_spoe_agent`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `get_spoe_agent`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_spoe_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_agents/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20083',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_spoe_agents(self, spoe, scope, **kwargs):  # noqa: E501
        """Return an array of spoe agents in one scope  # noqa: E501

        Returns an array of all configured spoe agents in one scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_agents(spoe, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: InlineResponse20082
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_spoe_agents_with_http_info(spoe, scope, **kwargs)  # noqa: E501
        else:
            (data) = self.get_spoe_agents_with_http_info(spoe, scope, **kwargs)  # noqa: E501
            return data

    def get_spoe_agents_with_http_info(self, spoe, scope, **kwargs):  # noqa: E501
        """Return an array of spoe agents in one scope  # noqa: E501

        Returns an array of all configured spoe agents in one scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_agents_with_http_info(spoe, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: InlineResponse20082
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['spoe', 'scope', 'transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spoe_agents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `get_spoe_agents`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `get_spoe_agents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_agents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20082',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_spoe_configuration_version(self, spoe, **kwargs):  # noqa: E501
        """Return a SPOE configuration version  # noqa: E501

        Returns SPOE configuration version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_configuration_version(spoe, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_spoe_configuration_version_with_http_info(spoe, **kwargs)  # noqa: E501
        else:
            (data) = self.get_spoe_configuration_version_with_http_info(spoe, **kwargs)  # noqa: E501
            return data

    def get_spoe_configuration_version_with_http_info(self, spoe, **kwargs):  # noqa: E501
        """Return a SPOE configuration version  # noqa: E501

        Returns SPOE configuration version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_configuration_version_with_http_info(spoe, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['spoe', 'transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spoe_configuration_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `get_spoe_configuration_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/version', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_spoe_group(self, spoe, scope, name, **kwargs):  # noqa: E501
        """Return a SPOE groups  # noqa: E501

        Returns one SPOE groups configuration in one SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_group(spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe group name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: InlineResponse20086
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_spoe_group_with_http_info(spoe, scope, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_spoe_group_with_http_info(spoe, scope, name, **kwargs)  # noqa: E501
            return data

    def get_spoe_group_with_http_info(self, spoe, scope, name, **kwargs):  # noqa: E501
        """Return a SPOE groups  # noqa: E501

        Returns one SPOE groups configuration in one SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_group_with_http_info(spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe group name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: InlineResponse20086
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['spoe', 'scope', 'name', 'transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spoe_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `get_spoe_group`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `get_spoe_group`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_spoe_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_groups/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20086',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_spoe_groups(self, spoe, scope, **kwargs):  # noqa: E501
        """Return an array of SPOE groups  # noqa: E501

        Returns an array of all configured SPOE groups in one SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_groups(spoe, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_spoe_groups_with_http_info(spoe, scope, **kwargs)  # noqa: E501
        else:
            (data) = self.get_spoe_groups_with_http_info(spoe, scope, **kwargs)  # noqa: E501
            return data

    def get_spoe_groups_with_http_info(self, spoe, scope, **kwargs):  # noqa: E501
        """Return an array of SPOE groups  # noqa: E501

        Returns an array of all configured SPOE groups in one SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_groups_with_http_info(spoe, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['spoe', 'scope', 'transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spoe_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `get_spoe_groups`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `get_spoe_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20085',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_spoe_message(self, spoe, scope, name, **kwargs):  # noqa: E501
        """Return a spoe message  # noqa: E501

        Returns one spoe message configuration in SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_message(spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe message name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: InlineResponse20088
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_spoe_message_with_http_info(spoe, scope, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_spoe_message_with_http_info(spoe, scope, name, **kwargs)  # noqa: E501
            return data

    def get_spoe_message_with_http_info(self, spoe, scope, name, **kwargs):  # noqa: E501
        """Return a spoe message  # noqa: E501

        Returns one spoe message configuration in SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_message_with_http_info(spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe message name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: InlineResponse20088
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['spoe', 'scope', 'name', 'transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spoe_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `get_spoe_message`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `get_spoe_message`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_spoe_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_messages/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20088',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_spoe_messages(self, spoe, scope, **kwargs):  # noqa: E501
        """Return an array of spoe messages in one scope  # noqa: E501

        Returns an array of all configured spoe messages in one scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_messages(spoe, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: InlineResponse20087
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_spoe_messages_with_http_info(spoe, scope, **kwargs)  # noqa: E501
        else:
            (data) = self.get_spoe_messages_with_http_info(spoe, scope, **kwargs)  # noqa: E501
            return data

    def get_spoe_messages_with_http_info(self, spoe, scope, **kwargs):  # noqa: E501
        """Return an array of spoe messages in one scope  # noqa: E501

        Returns an array of all configured spoe messages in one scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_messages_with_http_info(spoe, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: InlineResponse20087
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['spoe', 'scope', 'transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spoe_messages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `get_spoe_messages`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `get_spoe_messages`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20087',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_spoe_scope(self, spoe, name, **kwargs):  # noqa: E501
        """Return one SPOE scope  # noqa: E501

        Returns one SPOE scope in one SPOE file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_scope(spoe, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str name: Spoe scope (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: InlineResponse20090
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_spoe_scope_with_http_info(spoe, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_spoe_scope_with_http_info(spoe, name, **kwargs)  # noqa: E501
            return data

    def get_spoe_scope_with_http_info(self, spoe, name, **kwargs):  # noqa: E501
        """Return one SPOE scope  # noqa: E501

        Returns one SPOE scope in one SPOE file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_scope_with_http_info(spoe, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str name: Spoe scope (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: InlineResponse20090
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['spoe', 'name', 'transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spoe_scope" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `get_spoe_scope`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_spoe_scope`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_scopes/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20090',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_spoe_scopes(self, spoe, **kwargs):  # noqa: E501
        """Return an array of spoe scopes  # noqa: E501

        Returns an array of all configured spoe scopes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_scopes(spoe, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: InlineResponse20089
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_spoe_scopes_with_http_info(spoe, **kwargs)  # noqa: E501
        else:
            (data) = self.get_spoe_scopes_with_http_info(spoe, **kwargs)  # noqa: E501
            return data

    def get_spoe_scopes_with_http_info(self, spoe, **kwargs):  # noqa: E501
        """Return an array of spoe scopes  # noqa: E501

        Returns an array of all configured spoe scopes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spoe_scopes_with_http_info(spoe, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str spoe: Spoe file name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :return: InlineResponse20089
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['spoe', 'transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spoe_scopes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `get_spoe_scopes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_scopes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20089',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_spoe_agent(self, body, spoe, scope, name, **kwargs):  # noqa: E501
        """Replace a SPOE agent  # noqa: E501

        Replaces a SPOE agent configuration in one SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_spoe_agent(body, spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpoeAgent body: (required)
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe agent name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: SpoeAgent
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_spoe_agent_with_http_info(body, spoe, scope, name, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_spoe_agent_with_http_info(body, spoe, scope, name, **kwargs)  # noqa: E501
            return data

    def replace_spoe_agent_with_http_info(self, body, spoe, scope, name, **kwargs):  # noqa: E501
        """Replace a SPOE agent  # noqa: E501

        Replaces a SPOE agent configuration in one SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_spoe_agent_with_http_info(body, spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpoeAgent body: (required)
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe agent name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: SpoeAgent
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'spoe', 'scope', 'name', 'transaction_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_spoe_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `replace_spoe_agent`")  # noqa: E501
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `replace_spoe_agent`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `replace_spoe_agent`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_spoe_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_agents/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpoeAgent',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_spoe_group(self, body, spoe, scope, name, **kwargs):  # noqa: E501
        """Replace a SPOE groups  # noqa: E501

        Replaces a SPOE groups configuration in one SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_spoe_group(body, spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpoeGroup body: (required)
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe group name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: SpoeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_spoe_group_with_http_info(body, spoe, scope, name, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_spoe_group_with_http_info(body, spoe, scope, name, **kwargs)  # noqa: E501
            return data

    def replace_spoe_group_with_http_info(self, body, spoe, scope, name, **kwargs):  # noqa: E501
        """Replace a SPOE groups  # noqa: E501

        Replaces a SPOE groups configuration in one SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_spoe_group_with_http_info(body, spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpoeGroup body: (required)
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe group name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: SpoeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'spoe', 'scope', 'name', 'transaction_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_spoe_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `replace_spoe_group`")  # noqa: E501
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `replace_spoe_group`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `replace_spoe_group`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_spoe_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_groups/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpoeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_spoe_message(self, body, spoe, scope, name, **kwargs):  # noqa: E501
        """Replace a spoe message  # noqa: E501

        Replaces a spoe message configuration in one SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_spoe_message(body, spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpoeMessage body: (required)
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe message name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: SpoeMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_spoe_message_with_http_info(body, spoe, scope, name, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_spoe_message_with_http_info(body, spoe, scope, name, **kwargs)  # noqa: E501
            return data

    def replace_spoe_message_with_http_info(self, body, spoe, scope, name, **kwargs):  # noqa: E501
        """Replace a spoe message  # noqa: E501

        Replaces a spoe message configuration in one SPOE scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_spoe_message_with_http_info(body, spoe, scope, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SpoeMessage body: (required)
        :param str spoe: Spoe file name (required)
        :param str scope: Spoe scope (required)
        :param str name: Spoe message name (required)
        :param str transaction_id: ID of the transaction where we want to add the operation. Cannot be used when version is specified.
        :param int version: Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
        :return: SpoeMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'spoe', 'scope', 'name', 'transaction_id', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_spoe_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `replace_spoe_message`")  # noqa: E501
        # verify the required parameter 'spoe' is set
        if ('spoe' not in params or
                params['spoe'] is None):
            raise ValueError("Missing the required parameter `spoe` when calling `replace_spoe_message`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if ('scope' not in params or
                params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `replace_spoe_message`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `replace_spoe_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'spoe' in params:
            query_params.append(('spoe', params['spoe']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic_auth']  # noqa: E501

        return self.api_client.call_api(
            '/services/haproxy/spoe/spoe_messages/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SpoeMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
